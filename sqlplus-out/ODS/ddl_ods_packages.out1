
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jun 27 17:51:36 2019

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

SQL> 
SQL> --
SQL> -- CT_CORE  (Package)
SQL> --
SQL> --  Dependencies:
SQL> --   ORG (Table)
SQL> --   MASTERCODE (Table)
SQL> --   MEMBER (Table)
SQL> --   INSURANCEORGANIZATION (Table)
SQL> --   STANDARD (Package)
SQL> --
SQL> CREATE OR REPLACE PACKAGE ODS.ct_core
  2  AS
  3  	g_api_default_number	    number := 999.99;
  4  	g_api_default_char	    varchar2 (1) := '@';
  5  	g_api_default_double_char   varchar2 (2) := '@@';
  6  	g_api_default_date	    date := TO_DATE ('01/01/1900', 'MM/DD/YYYY');
  7  
  8  	/****************************************************************************
  9  	Description : Procedures created to handle dataservice request for CareTeam
 10  	Date		    Description 	Version
 11  	06/18/2010	    Created		 1.0
 12  	*****************************************************************************/
 13  
 14  	FUNCTION ferrorcodesct (p_errorgroup_in IN varchar2, p_errordesc_in IN varchar2)
 15  	   RETURN number;
 16  
 17  	FUNCTION fgetproviderid (p_accountid_in 	 IN number,
 18  				 p_facilityid_in	 IN number,
 19  				 p_requestorid_in	 IN number,
 20  				 p_requestortype_in	 IN varchar2,
 21  				 p_iomasterfeedflag_in	 IN varchar2 DEFAULT 'Y' )
 22  	   RETURN number;
 23  
 24  	FUNCTION get_orgid (p_oid_in IN org.orgoid%TYPE)
 25  	   RETURN number;
 26  
 27  	FUNCTION fgetctcerunmemberactionid (p_memberid_in     IN number,
 28  					    p_productcd_in    IN varchar2,
 29  					    p_supplierid_in   IN number DEFAULT NULL )
 30  	   RETURN number;
 31  
 32  	FUNCTION fgetref (p_type_in IN varchar2, p_id_in IN number, p_xreftypecd_in IN varchar2)
 33  	   RETURN varchar2;
 34  
 35  	FUNCTION fgetassocstatus (p_status_cd IN varchar2)
 36  	   RETURN varchar2;
 37  
 38  	FUNCTION fgetprovorgtype (p_requestortype_in IN varchar2)
 39  	   RETURN varchar2;
 40  
 41  	FUNCTION fgetctmemberid (p_memberplanid_in   IN MEMBER.primarymemberplanid%TYPE,
 42  				 p_accountorgid_in   IN org.orgid%TYPE,
 43  				 p_procmodecd_in     IN insuranceorganization.processingmodecd%TYPE DEFAULT NULL )
 44  	   RETURN number;
 45  
 46  	FUNCTION fvalidatesystemsource (p_systemsrc_in IN varchar2)
 47  	   RETURN number;
 48  
 49  	FUNCTION fgetmastercode (p_mastercodemnemonic_in   IN varchar2,
 50  				 p_mastergroupcd_in	   IN varchar2,
 51  				 p_mastercodedesc_in	   IN varchar2 DEFAULT NULL )
 52  	   RETURN varchar2;
 53  
 54  	FUNCTION fgetmastercodedesc (p_mastercode_in IN varchar2, p_mastergroupcd_in IN varchar2)
 55  	   RETURN mastercode.mastercodedesc%TYPE;
 56  
 57  	FUNCTION fgetmastermemoniccode (p_mastercode_in IN varchar2, p_mastergroupcd_in IN varchar2)
 58  	   RETURN varchar2;
 59  
 60  	PROCEDURE mvrefresh (p_returncode_out OUT number);
 61  
 62  	FUNCTION fgetrefservicefilter (p_servicenm_in IN varchar2, p_datasource_in IN varchar2, p_searchstring IN varchar2)
 63  	   RETURN varchar2;
 64  
 65  	FUNCTION fgetrefservicefilterlookup (p_servicenm_in    IN varchar2,
 66  					     p_datasource_in   IN varchar2,
 67  					     p_searchvalue     IN varchar2)
 68  	   RETURN varchar2;
 69  
 70  	PROCEDURE getioprocessingmode (p_accountorgid_in      IN     varchar2,
 71  				       p_insuranceorgid_out	 OUT number,
 72  				       p_processingmode_out	 OUT varchar2,
 73  				       p_masterfeedflg_out	 OUT varchar2);
 74  
 75  	FUNCTION fgetaccountoidformember (p_member_id IN MEMBER.memberid%TYPE)
 76  	   RETURN org.orgoid%TYPE;
 77  
 78  	FUNCTION fgetprovideroid (p_providerid_in IN number, p_accountorgid_in IN number)
 79  	   RETURN varchar2;
 80  
 81  
 82  	PROCEDURE getprocessingmodefrmio (p_insuranceorgid_in	 IN	number,
 83  					  p_acntorgid_out	    OUT number,
 84  					  p_processingmode_out	    OUT varchar2,
 85  					  p_masterfeedflg_out	    OUT varchar2);
 86  
 87  	FUNCTION fgetauthororgid (pn_requestorid_in IN number, pn_accountorgid_in IN number)
 88  	   RETURN number;
 89  
 90  	PROCEDURE updatemasterpcp (pv_procmode_in   IN insuranceorganization.PROCESSINGMODECD%TYPE,
 91  				   pn_memberid_in   IN MEMBER.memberid%TYPE);
 92  
 93  
 94  END ct_core;
 95  /

Package created.

SQL> 
SQL> 
SQL> --
SQL> -- ODS_COMMON_PKG	(Package)
SQL> --
SQL> --  Dependencies:
SQL> --   ORG (Table)
SQL> --   MEMBER (Table)
SQL> --   AHMMRNSUPPLIERPRECEDENCERULE (Table)
SQL> --   SUPPLIERORGANIZATION (Table)
SQL> --   MASTERCODE (Table)
SQL> --   SUPPLIERPRODUCTRELATION (Table)
SQL> --   STANDARD (Package)
SQL> --   INSURANCEORGANIZATION (Table)
SQL> --   DATASOURCE (Table)
SQL> --   TABLE_MEMBERID (Type)
SQL> --   MEMBERPROVIDERRELATIONSHIP (Table)
SQL> --   AHMMRNBUSINESSSUPPLIER (Table)
SQL> --
SQL> CREATE OR REPLACE PACKAGE ODS.ods_common_pkg
  2  AS
  3  	/******************************************************************************
  4  	   name:       ods_common_pkg
  5  	   purpose:
  6  	   revisions:
  7  	   ver	      date	  author	   description
  8  	   ---------  ----------  ---------------  ------------------------------------
  9  	   1.0	      1/28/2014   sundar	  procedures/functions used across all apps within ods
 10  	       2.0	      08/01/2018  Sudharsan	      Rally  US113391 to update emailpreferenceflg for member
 11  	******************************************************************************/
 12  
 13  	-- get business supplier for an ahm mrn.
 14  	FUNCTION fgetbusinesssupplier (
 15  	   pn_ahmmrnmemberid_in   IN MEMBER.memberid%TYPE,
 16  	   pv_accountoid_in	  IN org.orgoid%TYPE
 17  	)
 18  	   RETURN supplierorganization.ahmsupplierid%TYPE;
 19  
 20  	FUNCTION fgetbusinesssupplier_new (
 21  	   pn_ahmmrnmemberid_in   IN MEMBER.memberid%TYPE,
 22  	   pn_accountid_in	  IN insuranceorganization.insuranceorgid%TYPE
 23  	)
 24  	   RETURN supplierorganization.ahmsupplierid%TYPE;
 25  
 26  	-- updating ce member process status with bit.
 27  	PROCEDURE updatememberprocessstatus (pnmemberid_in   IN number,
 28  					     pvbits_in	     IN varchar2,
 29  					     pvceflag_in     IN varchar2);
 30  
 31  	-- function to determine if it's an act account.
 32  	FUNCTION isactaccount (
 33  	   pn_insuranceorgid_in   IN insuranceorganization.insuranceorgid%TYPE
 34  	)
 35  	   RETURN varchar2;
 36  
 37  	-- get current winner pcp for a given ahm memberid
 38  	PROCEDURE getcurrentwinnerpcp (
 39  	   pn_ahmmemberid_in		   IN	  MEMBER.memberid%TYPE,
 40  	   pv_processingmodecd_in	   IN	  insuranceorganization.
 41  	   processingmodecd%TYPE,
 42  	   pn_currpcpprovider_out	      OUT memberproviderrelationship.
 43  	   providerid%TYPE,
 44  	   pn_currmasterpcpprovider_out       OUT memberproviderrelationship.
 45  	   mastercareproviderid%TYPE,
 46  	   pn_currmemberproviderskey_out      OUT memberproviderrelationship.
 47  	   memberproviderskey%TYPE
 48  	);
 49  
 50  	-- get new winner pcp for a given ahm memberid
 51  	PROCEDURE getnewwinnerpcp (
 52  	   pn_ahmmemberid_in	       IN     MEMBER.memberid%TYPE,
 53  	   pn_accountid_in	       IN     insuranceorganization.insuranceorgid%
 54  	   TYPE,
 55  	   pv_processingmodecd_in      IN     insuranceorganization.
 56  	   processingmodecd%TYPE,
 57  	   pv_isactflag_in	       IN     varchar2,
 58  	   pv_pcpdatasourcenm_in       IN     supplierorganization.pcpdatasourcenm%
 59  	   TYPE,
 60  	   pn_projectid_in	       IN     insuranceorganization.projectid%TYPE,
 61  	   pn_newpcpprovider_out	  OUT memberproviderrelationship.providerid
 62  	   %TYPE,
 63  	   pn_memberproviderskey_out	  OUT memberproviderrelationship.
 64  	   memberproviderskey%TYPE
 65  	);
 66  
 67  	-- set winner pcp for a given ahm memberid
 68  	PROCEDURE setwinnerpcp (
 69  	   pn_accountid_in	IN insuranceorganization.insuranceorgid%TYPE
 70  	   DEFAULT NULL
 71  									       ,
 72  	   pn_ahmmemberid_in	IN MEMBER.memberid%TYPE,
 73  	   pv_datasourcenm_in	IN datasource.datasourcenm%TYPE
 74  	);
 75  
 76  	-- set winner pcp for a list of member ids.
 77  	PROCEDURE setwinnerpcp (
 78  	   pn_accountid_in	   IN	  insuranceorganization.insuranceorgid%TYPE
 79  	   ,
 80  	   pn_ahmmemberidlist_in   IN	  table_memberid,
 81  	   pv_datasourcenm_in	   IN	  datasource.datasourcenm%TYPE,
 82  	   pn_returncode_out	      OUT number
 83  	);
 84  
 85  	-- get mnemonic code from master code.
 86  	FUNCTION fgetmastermemoniccode (p_mastercode_in      IN varchar2,
 87  					p_mastergroupcd_in   IN varchar2)
 88  	   RETURN mastercode.mastercodemnemonic%TYPE;
 89  
 90  	-- setting winner pcp for a batch.
 91  	PROCEDURE pcpbatchrefresh (p_batchid_in        IN     number,
 92  				   p_mprcacheflg_in    IN     varchar2,
 93  				   p_datasourcenm_in   IN     varchar2,
 94  				   p_returncode_out	  OUT number);
 95  
 96  	-- return account id for a given member.
 97  	FUNCTION fgetaccountidformember (p_member_id IN MEMBER.memberid%TYPE)
 98  	   RETURN insuranceorganization.insuranceorgid%TYPE;
 99  
100  	FUNCTION fcheckwinnerpcpsts (p_memberid      number,
101  				     p_supplierid    number,
102  				     p_datasource    varchar2)
103  	   RETURN varchar2;
104  
105  	PROCEDURE raise_error (p_errcode_in IN number, p_errmsg_in IN varchar2);
106  
107  	PROCEDURE resetchkpt;
108  
109  	FUNCTION fget_acteligibilityflg (
110  	   pn_supplierid_in   IN supplierorganization.ahmsupplierid%TYPE
111  	)
112  	   RETURN varchar2;
113  
114  	FUNCTION fgetdodformember (pn_memberplanid_in IN number)
115  	   RETURN date;
116  
117  	PROCEDURE sp_debuglog (p_procedurename IN varchar2, p_text IN varchar2);
118  
119  	FUNCTION fchkaccount (memberid_in IN number, accountid_in IN number)
120  	   RETURN varchar2;
121  
122  	FUNCTION fchecklbsforwinnerpcp (
123  	   p_accountid			  insuranceorganization.insuranceorgid%TYPE
124  	   ,
125  	   p_lastbusinessahmsupplierid	  ahmmrnbusinesssupplier.
126  	   lastbusinessahmsupplierid%TYPE,
127  	   p_vendorsourcenm		  ahmmrnsupplierprecedencerule.
128  	   vendorsourcenm%TYPE,
129  	   p_clinicaldoctypemnemonic	  ahmmrnsupplierprecedencerule.
130  	   clinicaldoctypemnemonic%TYPE
131  	)
132  	   RETURN varchar2;
133  
134  	---to fetch members belongs to hie/payer acct
135  	PROCEDURE getmemberlist (
136  	   p_seq		   IN		 number,
137  	   p_memberplanidlist_in   IN		 table_memberid,
138  	   p_processingmodecd	   IN		 varchar2,
139  	   p_returncode_out	      OUT NOCOPY number
140  	);
141  
142  	FUNCTION checkproductforsupplier (
143  	   p_ahmsupplierid   IN supplierorganization.ahmsupplierid%TYPE,
144  	   p_productcd	     IN supplierproductrelation.productcd%TYPE
145  	)
146  	   RETURN varchar2;
147  
148  	FUNCTION fgetmemberemailaddress (pn_memberplanid_in	IN  number)
149  	  RETURN number;
150  	--to get mastersupplierid
151   FUNCTION fgetmastersupplierid (
152  	 pn_memberid_in 	     IN ods.MEMBER.memberid%TYPE DEFAULT NULL ,
153  	 pn_primarymemberplanid_in   IN ods.MEMBER.primarymemberplanid%TYPE DEFAULT
154  	   NULL ,
155  	 pn_supplierid_in	     IN ods.MEMBER.ahmsupplierid%TYPE DEFAULT NULL
156  	   -- supplierid for 'p' ,businesssupplierid for 'h' acct
157   )
158    RETURN number RESULT_CACHE;
159  	 --to get year and quarter
160   FUNCTION fgetyearqtr  (pd_date_in IN date)
161  	   RETURN number;
162  
163  	     --to get previous year and quarter
164    FUNCTION fgetpreviousyearqtr	(pd_date_in IN date)
165  	   RETURN number;
166    -- odserrorlog set error info
167   PROCEDURE seterrorinfo (pv_prcoessnm	 IN varchar2 DEFAULT NULL,
168  	    pv_parameter1   IN varchar2 DEFAULT NULL,
169  	    pv_parameter2   IN varchar2 DEFAULT NULL,
170  	    pv_parameter3   IN varchar2 DEFAULT NULL,
171  	    pv_parameter4   IN varchar2 DEFAULT NULL,
172  	    pv_parameter5   IN varchar2 DEFAULT NULL,
173  	    pv_comments     IN varchar2 DEFAULT NULL,
174  	    pv_errormsg     IN varchar2 DEFAULT NULL);
175  	 FUNCTION fgetmemberarchivepersistflg (pn_memberid IN number) RETURN
176  	   varchar2;
177  
178  	 PROCEDURE updateincvrunprocessstatus (
179  	pn_memberid_in	 IN number,
180  	pv_incvflag_in	 IN varchar2,
181  	pt_lastauditdate_in IN timestamp,
182  	p_errorcode_out       OUT number,
183  	p_errormsg_out	     OUT varchar2
184  );
185  
186  PROCEDURE	getincvrunprocessstatus (
187  	pn_memberid_in	 IN number,
188  	pv_runflag_out OUT varchar2,
189  	pt_lastupddt_out OUT timestamp
190  ) ;
191  
192   FUNCTION fGetaccountstatus(
193  	Pn_insuranceorgid_in		  IN ods.insuranceorganization.
194  	   insuranceorgid%TYPE
195   )
196  	   RETURN VARCHAR2  RESULT_CACHE;
197  
198  FUNCTION fgetdatashareconsentflg (pn_ahmsupplierid_in NUMBER)
199    RETURN VARCHAR2;
200  
201  
202    PROCEDURE getpersonaggregatemembers (
203  	memberid_in	   IN	  NUMBER,
204  	ahmsupplierid_in   IN	  NUMBER,
205  	memberid_obj_out      OUT table_memberid,
206  	errorcode	      OUT NUMBER,
207  	personviewflg_in  IN  VARCHAR2 DEFAULT	'N');
208  
209  
210   FUNCTION fgetpersonaggregateid(
211  	memberid_in	   IN	  NUMBER
212  )
213    RETURN NUMBER ;
214  
215  
216   FUNCTION fgetpersonviewflg
217    RETURN VARCHAR2;
218  
219  	FUNCTION fgetdatashareconsentformember (memberid_in IN NUMBER DEFAULT NULL,
220  					      memberplanid_in IN NUMBER DEFAULT NULL)
221  	 RETURN VARCHAR2;
222  
223  FUNCTION fgetmemberplanid (pn_memberid_in IN ods.MEMBER.memberid%TYPE)
224  RETURN NUMBER RESULT_CACHE;
225  
226  --US113391 SP to update emailpreference flag for the member
227  PROCEDURE updateemailpreferenceflg(
228  	 pn_memberid_in IN NUMBER,
229  	     pv_datasourcenm_in IN VARCHAR2,
230  	     pv_emailpreferenceflg_in IN VARCHAR2,
231  	 pn_errorcode_out OUT NUMBER ) ;
232  
233  FUNCTION fgetphonefaxnumberforperson (pn_personid_in IN ods.member.personid%TYPE)
234  RETURN VARCHAR2;
235  
236  FUNCTION fgetemailaddressforperson (pn_personid_in IN ods.member.personid%TYPE)
237  RETURN VARCHAR2;
238  
239  END ods_common_pkg;
240  /

Package created.

SQL> 
SQL> 
SQL> --
SQL> -- ODS_CORE  (Package)
SQL> --
SQL> --  Dependencies:
SQL> --   ODS_DELMITEDSTRING_TAB (Type)
SQL> --   DATASOURCE (Table)
SQL> --   STANDARD (Package)
SQL> --   MEMBER (Table)
SQL> --   DEBUGPROC (Table)
SQL> --
SQL> CREATE OR REPLACE PACKAGE ODS.ods_core
  2  AS
  3  	/****************************************************************************
  4  	Description : Procedures created to handle dataservice request for CareTeam
  5  	Date		    Description 	Version
  6  	06/18/2010	    Created		 1.0
  7  	*****************************************************************************/
  8  	-- Trace Variables
  9  	gt_start   timestamp;
 10  	gt_chk1    timestamp;
 11  	gt_chk2    timestamp;
 12  	gt_chk3    timestamp;
 13  	gt_chk4    timestamp;
 14  	gt_chk5    timestamp;
 15  	gt_chk6    timestamp;
 16  	gt_chk7    timestamp;
 17  	gt_chk8    timestamp;
 18  	gt_chk9    timestamp;
 19  	gt_chk10   timestamp;
 20  	gt_chk11   timestamp;
 21  	gt_chk12   timestamp;
 22  	gt_chk13   timestamp;
 23  	gt_chk14   timestamp;
 24  	gt_chk15   timestamp;
 25  	gt_chk16   timestamp;
 26  	gt_chk17   timestamp;
 27  	gt_chk18   timestamp;
 28  	gt_chk19   timestamp;
 29  	gt_chk20   timestamp;
 30  	gt_end	   timestamp;
 31  
 32  	FUNCTION fgetdebugexecutiontime (
 33  	   pv_debugprocname_in	 IN debugproc.procname%TYPE
 34  	)
 35  	   RETURN varchar2;
 36  
 37  	PROCEDURE resettracevariables;
 38  
 39  	PROCEDURE loglongcall (pv_procedurenm_in      IN varchar2,
 40  			       pv_logtable_in	      IN varchar2 DEFAULT NULL ,
 41  			       pn_logtableseq_in      IN number DEFAULT NULL ,
 42  			       pn_procreturncode_in   IN number DEFAULT NULL ,
 43  			       pt_start_in	      IN timestamp,
 44  			       pt_chk1_in	      IN timestamp DEFAULT NULL ,
 45  			       pt_chk2_in	      IN timestamp DEFAULT NULL ,
 46  			       pt_chk3_in	      IN timestamp DEFAULT NULL ,
 47  			       pt_chk4_in	      IN timestamp DEFAULT NULL ,
 48  			       pt_chk5_in	      IN timestamp DEFAULT NULL ,
 49  			       pt_chk6_in	      IN timestamp DEFAULT NULL ,
 50  			       pt_chk7_in	      IN timestamp DEFAULT NULL ,
 51  			       pt_chk8_in	      IN timestamp DEFAULT NULL ,
 52  			       pt_chk9_in	      IN timestamp DEFAULT NULL ,
 53  			       pt_chk10_in	      IN timestamp DEFAULT NULL ,
 54  			       pt_chk11_in	      IN timestamp DEFAULT NULL ,
 55  			       pt_chk12_in	      IN timestamp DEFAULT NULL ,
 56  			       pt_chk13_in	      IN timestamp DEFAULT NULL ,
 57  			       pt_chk14_in	      IN timestamp DEFAULT NULL ,
 58  			       pt_chk15_in	      IN timestamp DEFAULT NULL ,
 59  			       pt_chk16_in	      IN timestamp DEFAULT NULL ,
 60  			       pt_chk17_in	      IN timestamp DEFAULT NULL ,
 61  			       pt_chk18_in	      IN timestamp DEFAULT NULL ,
 62  			       pt_chk19_in	      IN timestamp DEFAULT NULL ,
 63  			       pt_chk20_in	      IN timestamp DEFAULT NULL ,
 64  			       pt_end_in	      IN timestamp);
 65  
 66  	PROCEDURE convert_delimitedstr_using_obj (
 67  	   p_delimstring   IN	  varchar2,
 68  	   p_delimiter	   IN	  varchar2,
 69  	   p_delstring	      OUT ods_delmitedstring_tab,
 70  	   p_errorcode	      OUT number
 71  	);
 72  
 73  	FUNCTION getdelimiedstrtotbl (p_delimstring   IN varchar2,
 74  				      p_delimiter     IN varchar2)
 75  	   RETURN ods_delmitedstring_tab;
 76  
 77  	FUNCTION fgetmastercode (p_mastercodemnemonic_in IN varchar2)
 78  	   RETURN varchar2;
 79  
 80  FUNCTION fgetmastercodedesc (p_mastercodemnemonic_in IN varchar2)
 81  	   RETURN varchar2;
 82  
 83  	FUNCTION fgetmastermemoniccode (p_mastercode_in      IN varchar2,
 84  					p_mastergroupcd_in   IN varchar2)
 85  	   RETURN varchar2;
 86  
 87  	FUNCTION fgetorgnm (p_orgid_in IN number)
 88  	   RETURN varchar2;
 89  
 90  	PROCEDURE setmoodcdlist (p_moodcdlist_in IN varchar2);
 91  
 92  	FUNCTION fgetunknownprovider (
 93  	   p_ahmsupplierid_in	IN MEMBER.ahmsupplierid%TYPE,
 94  	   p_systemsource_in	IN datasource.datasourcenm%TYPE
 95  	)
 96  	   RETURN number;
 97  
 98  	FUNCTION fgetprovtype (p_id_in IN number)
 99  	   RETURN varchar2;
100  
101  	FUNCTION fvalidateuserid (p_id_in IN number, p_type_in IN varchar2)
102  	   RETURN number;
103  
104  	PROCEDURE sethealthstatefdback (
105  	   p_healthstatetrackingid_in	 IN	number,
106  	   p_memberplanid_in		 IN	number,
107  	   p_healthstatetype_in 	 IN	varchar2,
108  	   p_systemsource_in		 IN	varchar2,
109  	   p_fdbstatusid_in		 IN	varchar2,
110  	   p_fdbstatusreason_in 	 IN	number,
111  	   p_fdbcomments_in		 IN	varchar2,
112  	   p_fdbdate_in 		 IN	date,
113  	   p_byuserid_in		 IN	number,
114  	   p_byprovidertype_in		 IN	varchar2,
115  	   p_foruserid_in		 IN	number,
116  	   p_forprovidertype_in 	 IN	varchar2,
117  	   p_healthstatetrackingid_out	    OUT number,
118  	   p_memberplanid_out		    OUT number,
119  	   p_returncode_out		    OUT number
120  	);
121    FUNCTION FGetOrgOIdFromOrgId(
122    pn_issuingorgid_in	 IN	 NUMBER)
123    return varchar2;
124  
125  END ods_core;
126  /

Package created.

SQL> 
SQL> --
SQL> -- CT_CORE  (Package Body)
SQL> --
SQL> CREATE OR REPLACE PACKAGE BODY ODS.ct_core
  2  AS
  3  	/****************************************************************************
  4  	description : procedures created to handle dataservice request for careteam
  5  	date		    description 	version
  6  	06/18/2010	    created		 1.0
  7  	08/08/2013	   Mairead Higgins	 Added getceproducthighlightwbitlogic
  8  	*****************************************************************************/
  9  
 10  
 11  	FUNCTION ferrorcodesct (p_errorgroup_in IN varchar2, p_errordesc_in IN varchar2)
 12  	   RETURN number
 13  	AS
 14  	   verrorcode	     number;
 15  	   lv_targetsystem   refdataserviceerror.targetsystemnm%TYPE;
 16  	BEGIN
 17  	   IF UPPER (p_errorgroup_in) = 'CM'
 18  	   THEN
 19  	      lv_targetsystem := 'CT';
 20  	   ELSE
 21  	      lv_targetsystem := UPPER (p_errorgroup_in);
 22  	   END IF;
 23  
 24  	    SELECT errorcd
 25  	      INTO verrorcode
 26  	      FROM refdataserviceerror
 27  	     WHERE UPPER (targetsystemnm) = lv_targetsystem AND UPPER (errormsg) = UPPER (p_errordesc_in);
 28  
 29  	   /*verrorcode   :=
 30  																																																     case
 31  		 when p_errordesc_in = 'successful' then 10000
 32  		 when p_errordesc_in = 'mandatory elements not found' then 10002
 33  		 when p_errordesc_in = 'not successful' then 10004
 34  		 when p_errordesc_in = 'account not found' then 10016
 35  		 when p_errordesc_in = 'facility not found' then 10017
 36  		 when p_errordesc_in = 'empiid not found' then 10018
 37  		 when p_errordesc_in = 'requestorid not found' then 10019
 38  		 when p_errordesc_in = 'product not found' then 10020
 39  		 when p_errordesc_in = 'invalid account setup' then 10021
 40  		 when p_errordesc_in = 'patient not found' then 10160
 41  		 when p_errordesc_in = 'illegal operation' then 10015
 42  		 when p_errordesc_in = 'member not found' then 10010
 43  		 when p_errordesc_in = 'partial success' then 10030
 44  		 when p_errordesc_in = 'invalid data request' then 10040
 45  	      end; */
 46  
 47  
 48  	   RETURN verrorcode;
 49  	EXCEPTION
 50  	   WHEN OTHERS
 51  	   THEN
 52  	      log_error ('Ferrorcodes_CT',
 53  			 p_errorgroup_in || ' ' || p_errordesc_in,
 54  			 SQLCODE,
 55  			 SQLERRM,
 56  			 SYSDATE,
 57  			 NULL);
 58  	      RETURN NULL;
 59  	END;
 60  
 61  	FUNCTION fgetproviderid (p_accountid_in 	 IN number,
 62  				 p_facilityid_in	 IN number,
 63  				 p_requestorid_in	 IN number,
 64  				 p_requestortype_in	 IN varchar2,
 65  				 p_iomasterfeedflag_in	 IN varchar2 DEFAULT 'Y' )
 66  	   RETURN number
 67  	IS
 68  	   lv_providerid   careprovider.careproviderid%TYPE;
 69  	   lv_provtype	   provorgstaffmasterxref.provorgstafftypecd%TYPE;
 70  	   lv_exists	   number;
 71  	BEGIN
 72  	   lv_exists := 0;
 73  
 74  	   IF p_iomasterfeedflag_in = 'Y'
 75  	   THEN
 76  	      BEGIN
 77  		  SELECT prvxref.mastercareproviderid, prvxref.provorgstafftypecd
 78  		    INTO lv_providerid, lv_provtype
 79  		    FROM provorgstaffmasterxref prvxref
 80  		   WHERE prvxref.provorgstaffid = p_requestorid_in
 81  		     AND provorgstafftypecd = p_requestortype_in
 82  		     AND prvxref.exclusioncd = 'IN'
 83  		     AND prvxref.masterproviderflg = 'Y'
 84  		     AND EXISTS
 85  			    ( SELECT 1
 86  				FROM orgpersonxref o
 87  			       WHERE o.relatedpersonid = prvxref.provorgstaffid
 88  				 AND o.accountid = p_accountid_in
 89  				 AND o.relationtypemnemonic = 'ORGPRS_AFFL'
 90  				 AND o.effenddt IS NULL
 91  				 --and o.primaryflg = 'y'
 92  				 AND NVL (o.exclusioncd, 'IN') = 'IN');
 93  
 94  
 95  		 IF p_requestortype_in = 'P'
 96  		 THEN
 97  		    BEGIN
 98  			SELECT cp.careproviderid
 99  			  INTO lv_providerid
100  			  FROM careprovider cp
101  			 WHERE cp.careproviderid = lv_providerid AND NVL (cp.exclusioncode, 'IN') = 'IN'
102  			   AND (NVL (cp.providerfilterflag, 'N') <> 'Y'
103  			     OR (cp.providerfilterflag = 'Y'
104  			     AND (cp.sourcecareproviderid = '0' OR cp.externalsourcecareproviderid = '0')));
105  		    EXCEPTION
106  		       WHEN OTHERS
107  		       THEN
108  			  lv_providerid := NULL;
109  		    END;
110  		    RETURN lv_providerid;
111  		 ELSE
112  		    RETURN lv_providerid;
113  		 END IF;
114  	      EXCEPTION
115  		 WHEN NO_DATA_FOUND
116  		 THEN
117  		    lv_providerid := NULL;
118  		    RETURN lv_providerid;
119  	      END;
120  	   ELSE
121  	      lv_providerid := p_requestorid_in;
122  	      BEGIN
123  		 IF p_requestortype_in = 'P'
124  		 THEN
125  		     SELECT 1
126  		       INTO lv_exists
127  		       FROM careprovider cp
128  		      WHERE cp.careproviderid = lv_providerid AND NVL (cp.exclusioncode, 'IN') = 'IN'
129  			AND (NVL (cp.providerfilterflag, 'N') <> 'Y'
130  			  OR (cp.providerfilterflag = 'Y'
131  			  AND (cp.sourcecareproviderid = '0' OR cp.externalsourcecareproviderid = '0')))
132  			AND EXISTS
133  			       ( SELECT 1
134  				   FROM orgpersonxref o
135  				  WHERE o.relatedpersonid = cp.careproviderid
136  				    AND o.accountid = p_accountid_in
137  				    AND o.relationtypemnemonic = 'ORGPRS_AFFL'
138  				    AND o.effenddt IS NULL
139  				    --and o.primaryflg = 'y'
140  				    AND NVL (o.exclusioncd, 'IN') = 'IN');
141  		 ELSIF p_requestortype_in = 'A'
142  		 THEN
143  		     SELECT 1
144  		       INTO lv_exists
145  		       FROM provorgadjunctstaff a
146  		      WHERE provorgadjunctstaffid = lv_providerid AND NVL (exclusioncd, 'IN') = 'IN'
147  			AND EXISTS
148  			       ( SELECT 1
149  				   FROM orgpersonxref o
150  				  WHERE o.relatedpersonid = provorgadjunctstaffid
151  				    AND o.accountid = p_accountid_in
152  				    AND o.relationtypemnemonic = 'ORGPRS_AFFL'
153  				    AND o.effenddt IS NULL
154  				    --and o.primaryflg = 'y'
155  				    AND NVL (o.exclusioncd, 'IN') = 'IN');
156  		 ELSIF p_requestortype_in = 'E'
157  		 THEN
158  		     SELECT 1
159  		       INTO lv_exists
160  		       FROM employee e
161  		      WHERE employeeid = lv_providerid AND NVL (exclusioncd, 'IN') = 'IN';
162  		 --		      and exists
163  		 --			     ( select 1
164  		 --				 from orgpersonxref o
165  		 --				where o.relatedpersonid = employeeid
166  		 --				  and o.accountid = p_accountid_in
167  		 --				  and o.relationtypemnemonic = 'orgprs_affl'
168  		 --				  and o.effenddt is null
169  		 --				  and nvl (o.exclusioncd, 'in') = 'in');
170  		 END IF;
171  	      EXCEPTION
172  		 WHEN OTHERS
173  		 THEN
174  		    lv_exists := 0;
175  	      END;
176  
177  	      IF NVL (lv_exists, 0) = 0
178  	      THEN
179  		 lv_providerid := NULL;
180  	      END IF;
181  
182  	      RETURN lv_providerid;
183  	   END IF;
184  	EXCEPTION
185  	   WHEN OTHERS
186  	   THEN
187  	      lv_providerid := NULL;
188  	      RETURN lv_providerid;
189  	END fgetproviderid;
190  
191  	FUNCTION get_orgid (p_oid_in IN org.orgoid%TYPE)
192  	   RETURN number
193  	IS
194  	   lv_org_id   org.orgid%TYPE;
195  	BEGIN
196  	    /* function to get the  org id for a accountoid or facilityoid  */
197  	    SELECT orgid
198  	      INTO lv_org_id
199  	      FROM org org
200  	     WHERE org.orgoid = p_oid_in;
201  
202  	   RETURN lv_org_id;
203  	EXCEPTION
204  	   WHEN NO_DATA_FOUND
205  	   THEN
206  	      lv_org_id := NULL;
207  	      RETURN lv_org_id;
208  	   WHEN OTHERS
209  	   THEN
210  	      lv_org_id := NULL;
211  	      RETURN lv_org_id;
212  	END get_orgid;
213  
214  	FUNCTION fgetctcerunmemberactionid (p_memberid_in     IN number,
215  					    p_productcd_in    IN varchar2,
216  					    p_supplierid_in   IN number DEFAULT NULL )
217  	   RETURN number
218  	AS
219  	   lv_careenginerunmemberactionid   number;
220  	   lv_supplierid		    MEMBER.ahmsupplierid%TYPE;
221  	   lv_usagetype 		    supplierorganization.usagemnemonic%TYPE;
222  	BEGIN
223  	   IF p_supplierid_in IS NULL
224  	   THEN
225  	       SELECT m.ahmsupplierid, so.usagemnemonic
226  		 INTO lv_supplierid, lv_usagetype
227  		 FROM MEMBER m, supplierorganization so
228  		WHERE m.memberid = p_memberid_in AND so.ahmsupplierid = m.ahmsupplierid;
229  
230  	      IF lv_usagetype = 'L'
231  	      THEN
232  		  SELECT lastbusinessahmsupplierid
233  		    INTO lv_supplierid
234  		    FROM ahmmrnbusinesssupplier
235  		   WHERE ahmmrnmemberid = p_memberid_in;
236  	      ELSE
237  		 lv_supplierid := lv_supplierid;
238  	      END IF;
239  	   ELSE
240  	      lv_supplierid := p_supplierid_in;
241  	   END IF;
242  
243  	    SELECT careenginerunmemberactionid
244  	      INTO lv_careenginerunmemberactionid
245  	      FROM csid.memberrecommendproductlastrun mrplr
246  	     WHERE mrplr.memberid = p_memberid_in
247  	       AND mrplr.businesssupplierid = lv_supplierid
248  	       AND mrplr.productmnemoniccd = p_productcd_in;
249  
250  	   RETURN lv_careenginerunmemberactionid;
251  	EXCEPTION
252  	   WHEN OTHERS
253  	   THEN
254  	      RETURN 0;
255  	END fgetctcerunmemberactionid;
256  
257  	FUNCTION fgetref (p_type_in IN varchar2, p_id_in IN number, p_xreftypecd_in IN varchar2)
258  	   RETURN varchar2
259  	IS
260  	   lv_ret_value   varchar2 (500);
261  	BEGIN
262  	   /*  common function to get the reference  data */
263  	   BEGIN
264  	      IF p_type_in = 'PATID'
265  	      THEN
266  		  SELECT xref.memberxrefcd
267  		    INTO lv_ret_value
268  		    FROM memberxref xref
269  		   WHERE xref.memberid = p_id_in AND xref.memberxreftypecd = p_xreftypecd_in;
270  	      ELSIF p_type_in = 'ISSORGID'
271  	      THEN
272  		  SELECT xref.issuingorgid
273  		    INTO lv_ret_value
274  		    FROM memberxref xref
275  		   WHERE xref.memberid = p_id_in AND xref.memberxreftypecd = p_xreftypecd_in;
276  	      ELSIF p_type_in = 'MEMBERPLANID'
277  	      THEN
278  		  SELECT xref.primarymemberplanid
279  		    INTO lv_ret_value
280  		    FROM MEMBER xref
281  		   WHERE xref.memberid = p_id_in;
282  	      ELSIF p_type_in = 'MDMSKEY'
283  	      THEN
284  		  SELECT ct.provorgstaffmasterskey
285  		    INTO lv_ret_value
286  		    FROM provorgstaffmasterxref ct
287  		   WHERE ct.provorgstaffid = p_id_in;
288  	      --and ct.provorgstafftypecd in ('p', 'a');
289  	      ELSIF p_type_in = 'ORGNM'
290  	      THEN
291  		  SELECT orgnm
292  		    INTO lv_ret_value
293  		    FROM org
294  		   WHERE orgid = p_id_in;
295  	      ELSIF p_type_in = 'ORGOID'
296  	      THEN
297  		  SELECT orgoid
298  		    INTO lv_ret_value
299  		    FROM org
300  		   WHERE orgid = p_id_in;
301  	      ELSIF p_type_in = 'MASTERPROVIDERID'
302  	      THEN
303  		  SELECT mastercareproviderid
304  		    INTO lv_ret_value
305  		    FROM provorgstaffmasterxref prvxref
306  		   WHERE prvxref.provorgstaffid = p_id_in;
307  	      ELSIF p_type_in = 'MEFEEDBACK'
308  	      THEN
309  		  SELECT COUNT (1)
310  		    INTO lv_ret_value
311  		    FROM csid.memberhealthstatefeedbackxref mhsxref
312  		   WHERE mhsxref.clinicaloutputtrackingid = p_id_in AND mhsxref.clinicaloutputtypecd = 'COM';
313  	      ELSIF p_type_in = 'PROVTYPE'
314  	      THEN
315  		  SELECT COALESCE ( ( SELECT poxref.provorgstafftypecd
316  					FROM provorgstaffmasterxref poxref
317  				       WHERE poxref.provorgstaffid = p_id_in AND poxref.exclusioncd = 'IN'),
318  				   ( SELECT 'P'
319  				       FROM careprovider cp
320  				      WHERE cp.careproviderid = p_id_in AND NVL (cp.exclusioncode, 'IN') = 'IN'),
321  				   ( SELECT 'A'
322  				       FROM provorgadjunctstaff adj
323  				      WHERE adj.provorgadjunctstaffid = p_id_in AND NVL (adj.exclusioncd, 'IN') = 'IN'),
324  				   ( SELECT 'E'
325  				       FROM employee e
326  				      WHERE e.employeeid = p_id_in AND NVL (e.exclusioncd, 'IN') = 'IN'))
327  		    INTO lv_ret_value
328  		    FROM DUAL;
329  	      --	 elsif p_type_in = 'systemoid'
330  	      --	 then
331  	      --	     select externaloid
332  	      --	       into lv_ret_value
333  	      --	       from oidregistry o
334  	      --	      where o.oidnm = p_xreftypecd_in;
335  	      ELSIF p_type_in = 'SYSTEMNAME'
336  	      THEN
337  		  SELECT oidnm
338  		    INTO lv_ret_value
339  		    FROM oidregistry o
340  		   WHERE o.externaloid = p_xreftypecd_in;
341  	      ELSIF p_type_in = 'SYSOIDSKEY'
342  	      THEN
343  		  SELECT oidregistryskey
344  		    INTO lv_ret_value
345  		    FROM oidregistry o
346  		   WHERE o.externaloid = p_xreftypecd_in;
347  	      END IF;
348  	   EXCEPTION
349  	      WHEN OTHERS
350  	      THEN
351  		 lv_ret_value := NULL;
352  	   END;
353  
354  	   RETURN lv_ret_value;
355  	END fgetref;
356  
357  	FUNCTION fgetassocstatus (p_status_cd IN varchar2)
358  	   RETURN varchar2
359  	IS
360  	   lv_ret_value   varchar2 (30);
361  	BEGIN
362  	   /* function to get the description for association status. ct has three types of association so far
363  																																																																																																																																																																																																																																																																																		      vl => validated
364  	   ch => chanllenged
365  	   cr  => created
366  	   */
367  	   IF p_status_cd IS NULL
368  	   THEN
369  	      lv_ret_value := NULL;
370  	   ELSIF p_status_cd = 'CR'
371  	   THEN
372  	      lv_ret_value := 'CREATED';
373  	   ELSIF p_status_cd = 'CH'
374  	   THEN
375  	      lv_ret_value := 'CHALLENGED';
376  	   ELSIF p_status_cd = 'VL'
377  	   THEN
378  	      lv_ret_value := 'VALIDATED';
379  	   ELSE
380  	      lv_ret_value := p_status_cd;
381  	   END IF;
382  
383  	   RETURN lv_ret_value;
384  	END fgetassocstatus;
385  
386  	FUNCTION fgetprovorgtype (p_requestortype_in IN varchar2)
387  	   RETURN varchar2
388  	IS
389  	   lv_retvalue	 varchar2 (1);
390  	BEGIN
391  	   IF p_requestortype_in = 'PRV'
392  	   THEN
393  	      lv_retvalue := 'P';
394  	   ELSIF p_requestortype_in = 'ADJ'
395  	   THEN
396  	      lv_retvalue := 'A';
397  	   ELSE
398  	      lv_retvalue := NULL;
399  	   END IF;
400  
401  	   RETURN lv_retvalue;
402  	EXCEPTION
403  	   WHEN OTHERS
404  	   THEN
405  	      lv_retvalue := NULL;
406  	END;
407  
408  	FUNCTION fgetctmemberid (p_memberplanid_in   IN MEMBER.primarymemberplanid%TYPE,
409  				 p_accountorgid_in   IN org.orgid%TYPE,
410  				 p_procmodecd_in     IN insuranceorganization.processingmodecd%TYPE DEFAULT NULL )
411  	   RETURN number
412  	IS
413  	   lv_retvalue		     number;
414  	   lv_ioorgid		     insuranceorganization.insuranceorgid%TYPE;
415  	   lv_procmodecd	     insuranceorganization.processingmodecd%TYPE;
416  	   lv_ioprovmasterfeedflag   insuranceorganization.masterfeedflg%TYPE;
417  	   lv_ahmflag		     varchar2 (1);
418  	BEGIN
419  	   /*if p_procmodecd_in is null
420  																																																																																																																					  then
421  	      getioprocessingmode (
422  		 p_accountorgid_in	=> p_accountorgid_in,
423  		 p_insuranceorgid_out	=> lv_ioorgid,
424  		 p_processingmode_out	=> lv_procmodecd,
425  		 p_masterfeedflg_out	=> lv_ioprovmasterfeedflag
426  	      );
427  	      if lv_ioorgid is null
428  	      or lv_procmodecd is null
429  	      then
430  		 lv_retvalue := null;
431  		 return lv_retvalue;
432  	      end if;
433  	   else
434  	      lv_procmodecd := p_procmodecd_in;
435  	   end if;
436  	   if lv_procmodecd = 'h'
437  	   then
438  	      select   m.memberid
439  		into   lv_retvalue
440  		from   member m,
441  		       supplierorganization so,
442  		       insuranceorgsupplierrelation iosr,
443  		       insuranceorganization io
444  	       where   m.primarymemberplanid = p_memberplanid_in
445  		   and m.ahmsupplierid = so.ahmsupplierid
446  		   and so.usagemnemonic = 'l'
447  		   and iosr.supplierid = so.supplierorgid
448  		   and iosr.insuranceorgid = io.insuranceorgid
449  		   and io.orgid = p_accountorgid_in;
450  	   else
451  	      select   m.memberid
452  		into   lv_retvalue
453  		from   member m,
454  		       supplierorganization so,
455  		       insuranceorgsupplierrelation iosr,
456  		       insuranceorganization io
457  	       where   m.primarymemberplanid = p_memberplanid_in
458  		   and m.ahmsupplierid = so.ahmsupplierid
459  		   and so.usagemnemonic <> 'l'
460  		   and iosr.supplierid = so.supplierorgid
461  		   and iosr.insuranceorgid = io.insuranceorgid
462  		   and io.orgid = p_accountorgid_in;
463  	   end if;*/
464  	   BEGIN
465  	       SELECT 'N'
466  		 INTO lv_ahmflag
467  		 FROM insuranceorganization io
468  		WHERE io.orgid = p_accountorgid_in;
469  	   EXCEPTION
470  	      WHEN OTHERS
471  	      THEN
472  		 lv_ahmflag := 'Y';
473  	   END;
474  
475  	   IF lv_ahmflag = 'N'
476  	   THEN
477  	       SELECT m.memberid
478  		 INTO lv_retvalue
479  		 FROM MEMBER m
480  		WHERE m.primarymemberplanid = p_memberplanid_in
481  		  AND EXISTS
482  			 ( SELECT 1
483  			     FROM supplierorganization so, insuranceorgsupplierrelation iosr, insuranceorganization io
484  			    WHERE so.ahmsupplierid = m.ahmsupplierid
485  			      AND so.usagemnemonic = DECODE (io.processingmodecd, 'H', 'L', so.usagemnemonic)
486  			      AND iosr.supplierid = so.supplierorgid
487  			      AND iosr.insuranceorgid = io.insuranceorgid
488  			      AND io.orgid = p_accountorgid_in);
489  	   ELSIF lv_ahmflag = 'Y'
490  	   THEN
491  	       SELECT m.memberid
492  		 INTO lv_retvalue
493  		 FROM MEMBER m
494  		WHERE m.primarymemberplanid = p_memberplanid_in
495  		  AND EXISTS
496  			 ( SELECT 1
497  			     FROM supplierorganization so, insuranceorgsupplierrelation iosr, insuranceorganization io
498  			    WHERE so.ahmsupplierid = m.ahmsupplierid
499  			      AND iosr.supplierid = so.supplierorgid
500  			      AND iosr.insuranceorgid = io.insuranceorgid
501  			      AND io.processingmodecd = 'P'
502  			      AND io.masterfeedflg = 'N');
503  	   END IF;
504  
505  
506  	   RETURN lv_retvalue;
507  	EXCEPTION
508  	   WHEN OTHERS
509  	   THEN
510  	      lv_retvalue := NULL;
511  	      RETURN lv_retvalue;
512  	END fgetctmemberid;
513  
514  	FUNCTION fvalidatesystemsource (p_systemsrc_in IN varchar2)
515  	   RETURN number
516  	IS
517  	   lv_exists   number;
518  	BEGIN
519  	    SELECT 1
520  	      INTO lv_exists
521  	      FROM datasource ds
522  	     WHERE ds.datasourcenm = p_systemsrc_in;
523  
524  	   RETURN (ct_core.ferrorcodesct ('CT', 'SUCCESSFUL'));
525  	EXCEPTION
526  	   WHEN NO_DATA_FOUND
527  	   THEN
528  	      RETURN (ct_core.ferrorcodesct ('CT', 'NOT SUCCESSFUL'));
529  	   WHEN OTHERS
530  	   THEN
531  	      RETURN (ct_core.ferrorcodesct ('CT', 'NOT SUCCESSFUL'));
532  	END fvalidatesystemsource;
533  
534  	FUNCTION fgetmastercode (p_mastercodemnemonic_in   IN varchar2,
535  				 p_mastergroupcd_in	   IN varchar2,
536  				 p_mastercodedesc_in	   IN varchar2 DEFAULT NULL )
537  	   RETURN varchar2
538  	IS
539  	   lv_retcode	mastercode.mastercode%TYPE;
540  	BEGIN
541  	   IF p_mastergroupcd_in IS NOT NULL AND p_mastercodemnemonic_in IS NOT NULL
542  	   THEN
543  	       SELECT mastercode
544  		 INTO lv_retcode
545  		 FROM mastercode
546  		WHERE mastercodemnemonic = p_mastercodemnemonic_in AND mastergroupcd = p_mastergroupcd_in;
547  	   ELSIF p_mastergroupcd_in IS NOT NULL AND p_mastercodedesc_in IS NOT NULL
548  	   THEN
549  	       SELECT mastercode
550  		 INTO lv_retcode
551  		 FROM mastercode
552  		WHERE mastercodedesc = p_mastercodedesc_in AND mastergroupcd = p_mastergroupcd_in;
553  	   ELSE
554  	       SELECT mastercode
555  		 INTO lv_retcode
556  		 FROM mastercode
557  		WHERE mastercodemnemonic = p_mastercodemnemonic_in;
558  	   END IF;
559  
560  	   RETURN lv_retcode;
561  	EXCEPTION
562  	   WHEN OTHERS
563  	   THEN
564  	      lv_retcode := NULL;
565  	      RETURN lv_retcode;
566  	END fgetmastercode;
567  
568  	FUNCTION fgetmastercodedesc (p_mastercode_in IN varchar2, p_mastergroupcd_in IN varchar2)
569  	   RETURN mastercode.mastercodedesc%TYPE
570  	IS
571  	   lv_retcode	mastercode.mastercodedesc%TYPE;
572  	BEGIN
573  	    SELECT mc.mastercodedesc
574  	      INTO lv_retcode
575  	      FROM mastercode mc
576  	     WHERE mc.mastercode = p_mastercode_in AND mc.mastergroupcd = p_mastergroupcd_in;
577  
578  	   RETURN lv_retcode;
579  	EXCEPTION
580  	   WHEN OTHERS
581  	   THEN
582  	      lv_retcode := NULL;
583  	      RETURN lv_retcode;
584  	END fgetmastercodedesc;
585  
586  	FUNCTION fgetmastermemoniccode (p_mastercode_in IN varchar2, p_mastergroupcd_in IN varchar2)
587  	   RETURN varchar2
588  	IS
589  	   lv_retcode	mastercode.mastercodemnemonic%TYPE;
590  	BEGIN
591  	    SELECT mc.mastercodemnemonic
592  	      INTO lv_retcode
593  	      FROM mastercode mc
594  	     WHERE mc.mastercode = p_mastercode_in AND mc.mastergroupcd = p_mastergroupcd_in;
595  
596  	   RETURN lv_retcode;
597  	EXCEPTION
598  	   WHEN OTHERS
599  	   THEN
600  	      lv_retcode := NULL;
601  	      RETURN lv_retcode;
602  	END fgetmastermemoniccode;
603  
604  	PROCEDURE mvrefresh (p_returncode_out OUT number)
605  	AS
606  	BEGIN
607  	   dbms_mview.refresh ('MVELEMENTBUILDERREFDATA');
608  	   p_returncode_out := ct_core.ferrorcodesct ('CT', 'SUCCESSFUL');
609  	EXCEPTION
610  	   WHEN OTHERS
611  	   THEN
612  	      p_returncode_out := ct_core.ferrorcodesct ('CT', 'NOT SUCCESSFUL');
613  	      log_error (procedurename_in    => 'CT_CORE.MVREFRESH',
614  			 memberid_in	     => NULL,
615  			 errornumber_in      => SQLCODE,
616  			 errormessage_in     => SQLERRM,
617  			 errortimestamp_in   => SYSDATE,
618  			 jseq_in	     => NULL);
619  	      RAISE;
620  	END;
621  
622  	FUNCTION fgetrefservicefilter (p_servicenm_in IN varchar2, p_datasource_in IN varchar2, p_searchstring IN varchar2)
623  	   RETURN varchar2
624  	IS
625  	   lv_retvalue	 refservicefilterlkup.lkupvalue%TYPE;
626  	BEGIN
627  	   BEGIN
628  	       SELECT lkupvalue
629  		 INTO lv_retvalue
630  		 FROM refservicefilterlkup
631  		WHERE servicenm = p_servicenm_in AND datasourcenm = p_datasource_in AND lkupstring = p_searchstring;
632  	   EXCEPTION
633  	      WHEN OTHERS
634  	      THEN
635  		 lv_retvalue := NULL;
636  	   END;
637  	   RETURN lv_retvalue;
638  	END fgetrefservicefilter;
639  
640  	FUNCTION fgetrefservicefilterlookup (p_servicenm_in    IN varchar2,
641  					     p_datasource_in   IN varchar2,
642  					     p_searchvalue     IN varchar2)
643  	   RETURN varchar2
644  	IS
645  	   lv_retvalue	 refservicefilterlkup.lkupvalue%TYPE;
646  	BEGIN
647  	   BEGIN
648  	       SELECT lkupstring
649  		 INTO lv_retvalue
650  		 FROM refservicefilterlkup
651  		WHERE servicenm = p_servicenm_in AND datasourcenm = p_datasource_in AND lkupvalue = p_searchvalue;
652  	   EXCEPTION
653  	      WHEN OTHERS
654  	      THEN
655  		 lv_retvalue := NULL;
656  	   END;
657  	   RETURN lv_retvalue;
658  	END fgetrefservicefilterlookup;
659  
660  	PROCEDURE getioprocessingmode (p_accountorgid_in      IN     varchar2,
661  				       p_insuranceorgid_out	 OUT number,
662  				       p_processingmode_out	 OUT varchar2,
663  				       p_masterfeedflg_out	 OUT varchar2)
664  	IS
665  	   lv_ahmoid	 org.orgoid%TYPE;
666  	   lv_ahmorgid	 org.orgid%TYPE;
667  	BEGIN
668  	   BEGIN
669  	       SELECT io.insuranceorgid, io.processingmodecd, io.masterfeedflg
670  		 INTO p_insuranceorgid_out, p_processingmode_out, p_masterfeedflg_out
671  		 FROM insuranceorganization io
672  		WHERE io.orgid = p_accountorgid_in;
673  	   EXCEPTION
674  	      WHEN NO_DATA_FOUND
675  	      THEN
676  		 p_insuranceorgid_out := 9999;
677  		 p_processingmode_out := 'P';
678  		 p_masterfeedflg_out := 'N';
679  	   END;
680  	EXCEPTION
681  	   WHEN OTHERS
682  	   THEN
683  	      p_insuranceorgid_out := NULL;
684  	      p_processingmode_out := NULL;
685  	      p_masterfeedflg_out := NULL;
686  	END;
687  
688  	FUNCTION fgetaccountoidformember (p_member_id IN MEMBER.memberid%TYPE)
689  	   RETURN org.orgoid%TYPE
690  	IS
691  	   l_return_oid   org.orgoid%TYPE;
692  	BEGIN
693  	    SELECT o.orgoid
694  	      INTO l_return_oid
695  	      FROM MEMBER m,
696  		   insuranceorgsupplierrelation ioso,
697  		   supplierorganization so,
698  		   insuranceorganization io,
699  		   org o
700  	     WHERE m.ahmsupplierid = so.ahmsupplierid
701  	       AND so.supplierorgid = ioso.supplierid
702  	       AND ioso.effectiveenddt IS NULL
703  	       AND so.effectiveenddt IS NULL
704  	       AND ioso.insuranceorgid = io.insuranceorgid
705  	       AND io.orgid = o.orgid
706  	       AND m.memberid = p_member_id;
707  
708  	   RETURN l_return_oid;
709  	EXCEPTION
710  	   WHEN OTHERS
711  	   THEN
712  	      RETURN NULL;
713  	END fgetaccountoidformember;
714  
715  	FUNCTION fgetprovideroid (p_providerid_in IN number, p_accountorgid_in IN number)
716  	   RETURN varchar2
717  	IS
718  	   lv_retvalue	 org.orgoid%TYPE;
719  	BEGIN
720  	    -- always returns the lowest level oid associated to the provider
721  
722  	    SELECT o.orgoid
723  	      INTO lv_retvalue
724  	      FROM org o
725  	     WHERE EXISTS
726  		      ( SELECT 1
727  			  FROM orgpersonxref x
728  			 WHERE x.orgid = o.orgid
729  			   AND x.relatedpersonid = p_providerid_in
730  			   AND x.accountid = p_accountorgid_in
731  			   AND x.relationtypemnemonic = 'ORGPRS_AFFL'
732  			   AND x.effenddt IS NULL
733  			   AND x.primaryflg = 'Y'
734  			   AND NVL (x.exclusioncd, 'IN') = 'IN');
735  
736  	   RETURN lv_retvalue;
737  	EXCEPTION
738  	   WHEN OTHERS
739  	   THEN
740  	      lv_retvalue := NULL;
741  	      RETURN lv_retvalue;
742  	END fgetprovideroid;
743  
744  
745  	PROCEDURE getprocessingmodefrmio (p_insuranceorgid_in	 IN	number,
746  					  p_acntorgid_out	    OUT number,
747  					  p_processingmode_out	    OUT varchar2,
748  					  p_masterfeedflg_out	    OUT varchar2)
749  	IS
750  	BEGIN
751  	    SELECT io.orgid, io.processingmodecd, io.masterfeedflg
752  	      INTO p_acntorgid_out, p_processingmode_out, p_masterfeedflg_out
753  	      FROM insuranceorganization io
754  	     WHERE io.insuranceorgid = p_insuranceorgid_in;
755  	EXCEPTION
756  	   WHEN OTHERS
757  	   THEN
758  	      p_acntorgid_out := NULL;
759  	      p_processingmode_out := NULL;
760  	      p_masterfeedflg_out := NULL;
761  	END getprocessingmodefrmio;
762  
763  	FUNCTION fgetauthororgid (pn_requestorid_in IN number, pn_accountorgid_in IN number)
764  	   RETURN number
765  	IS
766  	   lv_retvalue	 number;
767  	BEGIN
768  	    SELECT CASE WHEN oa.relatedorgid = oa.accountid THEN oa.orgid ELSE oa.relatedorgid END
769  	      INTO lv_retvalue
770  	      FROM orgpersonxref x, orgassociation oa
771  	     WHERE x.accountid = pn_accountorgid_in
772  	       AND x.relatedpersonid = pn_requestorid_in
773  	       AND x.relationtypemnemonic = 'ORGPRS_AFFL'
774  	       AND x.effenddt IS NULL
775  	       AND x.primaryflg = 'Y'
776  	       AND NVL (x.exclusioncd, 'IN') = 'IN'
777  	       AND oa.orgid = x.orgid
778  	       AND oa.accountid = x.accountid
779  	       AND oa.relationtypemnemonic = 'ORGREL_PARENT'
780  	       AND NVL (oa.exclusioncd, 'IN') = 'IN'
781  	       AND oa.effenddt IS NULL;
782  
783  	   RETURN lv_retvalue;
784  	EXCEPTION
785  	   WHEN OTHERS
786  	   THEN
787  	      lv_retvalue := NULL;
788  	      RETURN lv_retvalue;
789  	END fgetauthororgid;
790  
791  	PROCEDURE updatemasterpcp (pv_procmode_in   IN insuranceorganization.processingmodecd%TYPE,
792  				   pn_memberid_in   IN MEMBER.memberid%TYPE)
793  	IS
794  	   ln_memberproviderskey   memberproviderrelationship.memberproviderskey%TYPE;
795  	   lv_pcpdatasourcenm	   supplierorganization.pcpdatasourcenm%TYPE;
796  	BEGIN
797  	   -- get pcp datasourcenm for the supplier
798  
799  
800  	   IF pv_procmode_in = 'P'
801  	   THEN
802  	      BEGIN
803  		  -- if payer member get the ds for the supplierid from member
804  		  SELECT pcpdatasourcenm
805  		    INTO lv_pcpdatasourcenm
806  		    FROM supplierorganization so, MEMBER m
807  		   WHERE so.ahmsupplierid = m.ahmsupplierid AND m.memberid = pn_memberid_in;
808  	      EXCEPTION
809  		 WHEN OTHERS
810  		 THEN
811  		    lv_pcpdatasourcenm := 'ALL';
812  	      END;
813  
814  	      IF lv_pcpdatasourcenm IS NULL
815  	      THEN
816  		 lv_pcpdatasourcenm := 'ALL';
817  	      END IF;
818  
819  	       UPDATE memberproviderrelationship mpr
820  		  SET mpr.winnerpcpflg = NULL
821  		WHERE memberid = pn_memberid_in;
822  
823  	       UPDATE memberproviderrelationship
824  		  SET winnerpcpflg = 'Y'
825  		WHERE memberproviderskey =
826  			 ( SELECT memberproviderskey
827  			     FROM ( SELECT				       /*+ index (mpr memberproviderrelation_ix01) */
828  					  mpr.memberproviderskey,
829  					  ROW_NUMBER () OVER (PARTITION BY mpr.memberid ORDER BY mpr.recordupdtdt DESC) rn
830  				      FROM memberproviderrelationship mpr
831  				     WHERE mpr.ahmmemberid = pn_memberid_in AND mpr.exclusioncd = 'IN' AND mpr.pcpflg = 'Y'
832  				       AND mpr.datasourcenm =
833  					      DECODE (lv_pcpdatasourcenm, 'ALL', mpr.datasourcenm, lv_pcpdatasourcenm))
834  			    WHERE rn = 1);
835  	   ELSIF pv_procmode_in = 'H'
836  	   THEN
837  	      -- if h member get the ds for the supplierid from ahmmrnbusinesssupplier
838  	      BEGIN
839  		  SELECT pcpdatasourcenm
840  		    INTO lv_pcpdatasourcenm
841  		    FROM supplierorganization so, ahmmrnbusinesssupplier lbs
842  		   WHERE so.ahmsupplierid = lbs.lastbusinessahmsupplierid AND lbs.ahmmrnmemberid = pn_memberid_in;
843  	      EXCEPTION
844  		 WHEN OTHERS
845  		 THEN
846  		    lv_pcpdatasourcenm := 'ALL';
847  	      END;
848  
849  	      IF lv_pcpdatasourcenm IS NULL
850  	      THEN
851  		 lv_pcpdatasourcenm := 'ALL';
852  	      END IF;
853  
854  	       UPDATE memberproviderrelationship mpr
855  		  SET mpr.winnerpcpflg = NULL
856  		WHERE mpr.ahmmemberid = pn_memberid_in;
857  
858  	       UPDATE memberproviderrelationship
859  		  SET winnerpcpflg = 'Y'
860  		WHERE memberproviderskey =
861  			 ( SELECT memberproviderskey
862  			     FROM ( SELECT				       /*+ index (mpr memberproviderrelation_ix01) */
863  					  mpr.memberproviderskey,
864  					  ROW_NUMBER () OVER (PARTITION BY mpr.ahmmemberid ORDER BY mpr.recordupdtdt DESC) rn
865  				      FROM memberproviderrelationship mpr
866  				     WHERE mpr.ahmmemberid = pn_memberid_in AND mpr.exclusioncd = 'IN' AND mpr.pcpflg = 'Y'
867  				       AND mpr.datasourcenm =
868  					      DECODE (lv_pcpdatasourcenm, 'ALL', mpr.datasourcenm, lv_pcpdatasourcenm))
869  			    WHERE rn = 1);
870  	   END IF;
871  	END updatemasterpcp;
872  
873  
874  END ct_core;
875  /

Package body created.

SQL> 
SQL> 
SQL> --
SQL> -- ODS_COMMON_PKG	(Package Body)
SQL> --
SQL> CREATE OR REPLACE PACKAGE BODY ODS.ods_common_pkg
  2  AS
  3  	/******************************************************************************
  4  	   name:       ods_common_pkg
  5  	   purpose:
  6  	   revisions:
  7  	   ver	      date	  author	   description
  8  	   ---------  ----------  ---------------  ------------------------------------
  9  	   1.0	      1/28/2014   sundar	  procedures/functions used across all apps within ods
 10  	       2.0	      08/01/2018  Sudharsan	      Rally  US113391 to update emailpreferenceflg for member
 11  	******************************************************************************/
 12  	FUNCTION fgetbusinesssupplier (
 13  	   pn_ahmmrnmemberid_in   IN MEMBER.memberid%TYPE,
 14  	   pv_accountoid_in	  IN org.orgoid%TYPE
 15  	)
 16  	   RETURN supplierorganization.ahmsupplierid%TYPE
 17  	IS
 18  	   /****************************************************************************
 19  				  date		      description	  version      author																							 date		     description	 version
 20  		11/02/2012	   mantis 24080 	1.1	     mthiagarajan
 21  		03/21/2013	   mantis 26196 	 1.2	     mthiagarajan
 22  		07/17/2013	   mantis 28066 	 1.3	     sundar
 23  		1/21/2014	   pcp enhancement		     sundar
 24  	      *****************************************************************************/
 25  	   ln_accountid 	 number;
 26  	   ln_bussuppliercount	 pls_integer;
 27  	   lv_multiplebsflg	 varchar2 (1);
 28  	   ln_businesssupplier	 number;
 29  	   ln_dummy		 pls_integer;
 30  	   --bsflg		 varchar2 (5);
 31  	   lv_datasourcenm	 varchar2 (30);
 32  	   nt_lbs		 getlbs_new_tab;
 33  
 34  	   TYPE t_precedencerule IS TABLE OF ahmmrnsupplierprecedencerule%ROWTYPE;
 35  
 36  	   lt_precedencerule	 t_precedencerule;
 37  	   ln_employeecount	 pls_integer;
 38  
 39  	   -- function to return default lbs for an account
 40  	   FUNCTION returndefaultbussupplier (
 41  	      pn_accountid   IN insuranceorganization.insuranceorgid%TYPE
 42  	   )
 43  	      RETURN supplierorganization.ahmsupplierid%TYPE
 44  	   IS
 45  	      ln_defbusinesssupplierid	 supplierorganization.ahmsupplierid%TYPE;
 46  	   BEGIN
 47  	      SELECT   ahmsupplierid
 48  		INTO   ln_defbusinesssupplierid
 49  		FROM   supplierorganization so, insuranceorgsupplierrelation iosr
 50  	       WHERE	   so.supplierorgid = iosr.supplierid
 51  		       AND iosr.insuranceorgid = pn_accountid
 52  		       AND usagemnemonic = 'B'
 53  		       AND defaultbusinesssupplierflg = 'Y';
 54  
 55  	      RETURN ln_defbusinesssupplierid;
 56  	   EXCEPTION
 57  	      WHEN OTHERS
 58  	      THEN
 59  		 NULL;
 60  	   END returndefaultbussupplier;
 61  	BEGIN
 62  	   -- initialize variables
 63  	   ln_employeecount := 0;
 64  	   ln_businesssupplier := NULL;
 65  
 66  	   -- get accountid for an account
 67  	   SELECT   io.insuranceorgid
 68  	     INTO   ln_accountid
 69  	     FROM   insuranceorganization io, org org
 70  	    WHERE   io.orgid = org.orgid AND org.orgoid = pv_accountoid_in;
 71  
 72  	   -- check if the account has multiple business suppliers
 73  	   -- if the count is 1, then return default business supplier
 74  	   --- else follow the precendence logic.
 75  	   SELECT   COUNT ( * )
 76  	     INTO   ln_bussuppliercount
 77  	     FROM   supplierorganization so, insuranceorgsupplierrelation iosr
 78  	    WHERE	so.supplierorgid = iosr.supplierid
 79  		    AND iosr.insuranceorgid = ln_accountid
 80  		    AND usagemnemonic = 'B';
 81  
 82  	   --dbms_output.put_line ('business supplier count' || ln_bussuppliercount);
 83  	   IF ln_bussuppliercount < 2
 84  	   THEN
 85  	      ln_businesssupplier := returndefaultbussupplier (ln_accountid);
 86  	      RETURN ln_businesssupplier;
 87  	   ELSE
 88  		  -- step 1 - collect all the members that decide the lbs
 89  		  -- payer members + hospital members (that has pcp and valid document type defined in precedence rule table)
 90  		  SELECT   getlbs_new_obj (memberid,
 91  					   ahmsupplierid,
 92  					   membertypecode,
 93  					   effectiveenddt,
 94  					   relatedahmbusinesssupplierid,
 95  					   usagemnemonic)
 96  	      BULK COLLECT INTO   nt_lbs
 97  		    FROM   (		      -- collection of active payer members
 98  			    SELECT    m.memberid,
 99  				      CASE NVL (iosr.insuranceorgid, 1)
100  					 WHEN 1
101  					 THEN
102  					    fgetattributedpayersupplier (
103  					       m.memberid,
104  					       ln_accountid
105  					    )
106  					 ELSE
107  					    m.ahmsupplierid
108  				      END
109  					 ahmsupplierid,
110  				      m.membertypecode,
111  				      m.effectiveenddt,
112  				      CASE NVL (iosr.insuranceorgid, 1)
113  					 WHEN 1
114  					 THEN
115  					    fgetattributed_bus_supplier (
116  					       m.memberid,
117  					       ln_accountid
118  					    )
119  					 ELSE
120  					    so.relatedahmbusinesssupplierid
121  				      END
122  					 relatedahmbusinesssupplierid,
123  				      so.usagemnemonic
124  			       FROM   memberaggregation ma,
125  				      MEMBER m,
126  				      supplierorganization so,
127  				      insuranceorgsupplierrelation iosr
128  			      WHERE	  ma.memberid = m.memberid
129  				      AND ma.ahmmrnmemberid = pn_ahmmrnmemberid_in
130  				      AND m.ahmsupplierid = so.ahmsupplierid
131  				      AND so.supplierorgid = iosr.supplierid(+)
132  				      AND iosr.insuranceorgid(+) = ln_accountid
133  				      AND so.usagemnemonic = 'P'
134  				      AND ma.effectiveenddt IS NULL
135  				      AND m.effectiveenddt IS NULL
136  			    UNION ALL
137  			    -- collection of hospital members with pcp and also having document type defined in precedence rule table
138  			    SELECT   m.memberid,
139  				     m.ahmsupplierid,
140  				     m.membertypecode,
141  				     m.effectiveenddt,
142  				     so.relatedahmbusinesssupplierid,
143  				     so.usagemnemonic
144  			      FROM   memberaggregation ma,
145  				     MEMBER m,
146  				     supplierorganization so,
147  				     insuranceorgsupplierrelation iosr
148  			     WHERE	 ma.memberid = m.memberid
149  				     AND ma.ahmmrnmemberid = pn_ahmmrnmemberid_in
150  				     AND m.ahmsupplierid = so.ahmsupplierid
151  				     AND so.supplierorgid = iosr.supplierid
152  				     AND iosr.insuranceorgid = ln_accountid
153  				     AND so.usagemnemonic = 'H'
154  				     AND ma.effectiveenddt IS NULL
155  				     AND m.effectiveenddt IS NULL
156  				     AND EXISTS
157  					   (SELECT   NULL
158  					      FROM   memberproviderrelationship mpr
159  	   ,
160  						     memberproviderrelationshipextn
161  	   mprxt
162  					     WHERE	 mpr.memberid = m.memberid
163  						     AND mpr.exclusioncd = 'IN'
164  						     AND mpr.pcpflg = 'Y'
165  						     AND mpr.memberproviderskey =
166  							   mprxt.memberproviderskey
167  						     AND (NVL (
168  							     mprxt.vendorsourcenm,
169  							     'ZZZ'
170  							  ),
171  							  NVL (
172  							     mprxt.
173  	   clinicaldoctypemnemonic,
174  							     'ZZZ'
175  							  )) IN
176  							      (SELECT	NVL (
177  									   vendorsourcenm
178  	   ,
179  									   'ZZZ'
180  									),
181  									NVL (
182  									   clinicaldoctypemnemonic
183  	   ,
184  									   'ZZZ'
185  									)
186  								 FROM
187  	   ahmmrnsupplierprecedencerule
188  								WHERE
189  	   ahmsupplierid =
190  									   m.
191  	   ahmsupplierid))
192  			    UNION ALL
193  			    -- collection of hospital members with pcp and also defined in precedence rule table with no document type
194  			    SELECT   m.memberid,
195  				     m.ahmsupplierid,
196  				     m.membertypecode,
197  				     m.effectiveenddt,
198  				     so.relatedahmbusinesssupplierid,
199  				     so.usagemnemonic
200  			      FROM   memberaggregation ma,
201  				     MEMBER m,
202  				     supplierorganization so,
203  				     insuranceorgsupplierrelation iosr
204  			     WHERE	 ma.memberid = m.memberid
205  				     AND ma.ahmmrnmemberid = pn_ahmmrnmemberid_in
206  				     AND m.ahmsupplierid = so.ahmsupplierid
207  				     AND so.supplierorgid = iosr.supplierid
208  				     AND iosr.insuranceorgid = ln_accountid
209  				     AND so.usagemnemonic = 'H'
210  				     AND ma.effectiveenddt IS NULL
211  				     AND m.effectiveenddt IS NULL
212  				     AND EXISTS
213  					   (SELECT   NULL
214  					      FROM   memberproviderrelationship mpr
215  					     WHERE	 mpr.memberid = m.memberid
216  						     AND mpr.exclusioncd = 'IN'
217  						     AND mpr.pcpflg = 'Y')
218  				     AND EXISTS
219  					   (SELECT   NULL
220  					      FROM   ahmmrnsupplierprecedencerule
221  					     WHERE   ahmsupplierid =
222  							m.ahmsupplierid
223  						     AND vendorsourcenm IS NULL
224  						     AND clinicaldoctypemnemonic IS
225  	   NULL));
226  
227  	      --  dbms_output.put_line ('total member count' || nt_lbs.count);
228  	      IF nt_lbs.COUNT = 0
229  	      THEN
230  		 SELECT   datasourcenm
231  		   INTO   lv_datasourcenm
232  		   FROM   MEMBER
233  		  WHERE   memberid = pn_ahmmrnmemberid_in;
234  
235  		 IF lv_datasourcenm = 'CT'
236  		 THEN
237  		    BEGIN
238  		       -- if datasource is ct, check if any lbs has been set in the past, if not return null
239  		       SELECT	lastbusinessahmsupplierid
240  			 INTO	ln_businesssupplier
241  			 FROM	ahmmrnbusinesssupplier
242  			WHERE	ahmmrnmemberid = pn_ahmmrnmemberid_in;
243  
244  		       RETURN ln_businesssupplier;
245  		    EXCEPTION
246  		       WHEN OTHERS
247  		       THEN
248  			  RETURN NULL;
249  		    END;
250  		 ELSE
251  		    ln_businesssupplier := returndefaultbussupplier (ln_accountid);
252  		    RETURN ln_businesssupplier;
253  		 END IF;
254  	      ELSE
255  		 -- if more than one member in the aggregation
256  		 -- if there is only one payer in the aggregation, return the related business supplier
257  		 IF nt_lbs.COUNT = 1
258  		 THEN
259  		    ln_businesssupplier := nt_lbs (1).relatedahmbusinesssupplierid;
260  
261  		    IF ln_businesssupplier IS NOT NULL
262  		    THEN
263  		       RETURN ln_businesssupplier;
264  		    ELSE
265  		       RETURN returndefaultbussupplier (ln_accountid);
266  		    END IF;
267  		 ELSE			   -- count > 1 -- follow precedence logic.
268  			-- collect precedence rule
269  			SELECT	 *
270  		    BULK COLLECT INTO	lt_precedencerule
271  			  FROM	 ahmmrnsupplierprecedencerule
272  			 WHERE	 accountid = ln_accountid
273  				 AND precedencerulebasismnemonic LIKE
274  				       'LBSPRECEDENCE%'
275  		      ORDER BY	 precedencenbr ASC;
276  
277  		    FOR l_precedence_ctr IN 1 .. lt_precedencerule.COUNT
278  		    LOOP
279  		       IF lt_precedencerule (
280  			     l_precedence_ctr
281  			  ).precedencerulebasismnemonic = 'LBSPRECEDENCE_EMPLOYEE'
282  		       THEN
283  			  FOR l_ctr IN 1 .. nt_lbs.COUNT
284  			  LOOP
285  			     IF nt_lbs (l_ctr).membertypecode = 'E'
286  			     THEN
287  				ln_employeecount := ln_employeecount + 1;
288  				ln_businesssupplier :=
289  				   nt_lbs (l_ctr).relatedahmbusinesssupplierid;
290  			     END IF;
291  			  END LOOP;
292  
293  			  IF ln_employeecount = 1
294  			  THEN
295  			     IF ln_businesssupplier IS NOT NULL
296  			     THEN
297  				RETURN ln_businesssupplier;
298  			     ELSE
299  				RETURN returndefaultbussupplier (ln_accountid);
300  			     END IF;
301  			  ELSE
302  			     ln_businesssupplier := NULL;
303  			  END IF;
304  		       END IF;
305  
306  		       -- if employee count is more than 2, then continue with precendence supplier rule
307  		       IF lt_precedencerule (
308  			     l_precedence_ctr
309  			  ).precedencerulebasismnemonic = 'LBSPRECEDENCE_SUPPLIER'
310  		       THEN
311  			  FOR l_ctr IN 1 .. nt_lbs.COUNT
312  			  LOOP
313  			     IF lt_precedencerule (l_precedence_ctr).ahmsupplierid
314  	   =
315  				   nt_lbs (l_ctr).ahmsupplierid
316  			     THEN
317  				ln_businesssupplier :=
318  				   nt_lbs (l_ctr).relatedahmbusinesssupplierid;
319  
320  				IF ln_businesssupplier IS NOT NULL
321  				THEN
322  				   RETURN ln_businesssupplier;
323  				ELSE
324  				   RETURN returndefaultbussupplier (ln_accountid);
325  				END IF;
326  			     END IF;
327  			  END LOOP;		     -- looping through all members
328  		       END IF;			  -- supplier based precedence rule
329  		    END LOOP;
330  	   -- for l_precedence_ctr in 1..lt_precedencerule.count  loop
331  
332  		    -- if it comes here, then no business supplier found in the precendence logic -- return default bus
333  		    ln_businesssupplier := returndefaultbussupplier (ln_accountid);
334  		    RETURN ln_businesssupplier;
335  		 END IF;
336  	   -- if nt_lbs.count = 1 and nt_lbs(1).usagemnemonic = 'p' then
337  	      END IF;				      -- if  nt_lbs.count = 0 then;
338  	   END IF;				 -- if ln_bussuppliercount < 2 then
339  	EXCEPTION
340  	   WHEN OTHERS
341  	   THEN
342  	      hie_log_error (
343  		 procedurename_in    => 'FGETBUSINESSSUPPLIER',
344  		 memberid_in	     => SUBSTR (DBMS_UTILITY.format_error_backtrace
345  	   ,
346  						-9),
347  		 errornumber_in      => SQLCODE,
348  		 errormessage_in     => SUBSTR (SQLERRM, 1, 100),
349  		 errortimestamp_in   => SYSDATE,
350  		 jseq_in	     => NULL
351  	      );
352  	END fgetbusinesssupplier;
353  
354  	FUNCTION fgetbusinesssupplier_new (
355  	   pn_ahmmrnmemberid_in   IN MEMBER.memberid%TYPE,
356  	   pn_accountid_in	  IN insuranceorganization.insuranceorgid%TYPE
357  	)
358  	   RETURN supplierorganization.ahmsupplierid%TYPE
359  	IS
360  	   /****************************************************************************
361  						      date		  description	      version	   author																						     date		 description	     version
362  		11/02/2012	   mantis 24080 	1.1	     mthiagarajan
363  		03/21/2013	   mantis 26196 	 1.2	     mthiagarajan
364  		07/17/2013	   mantis 28066 	 1.3	     sundar
365  		1/21/2014	   pcp enhancement		     sundar
366  	      *****************************************************************************/
367  	   ln_accountid 	 number;
368  	   ln_bussuppliercount	 pls_integer;
369  	   lv_multiplebsflg	 varchar2 (1);
370  	   ln_businesssupplier	 number;
371  	   ln_dummy		 pls_integer;
372  	   --bsflg		 varchar2 (5);
373  	   lv_datasourcenm	 varchar2 (30);
374  	   nt_lbs		 getlbs_new_tab;
375  
376  	   TYPE t_precedencerule IS TABLE OF ahmmrnsupplierprecedencerule%ROWTYPE;
377  
378  	   lt_precedencerule	 t_precedencerule;
379  	   ln_employeecount	 pls_integer;
380  
381  	   -- function to return default lbs for an account
382  	   FUNCTION returndefaultbussupplier (
383  	      pn_accountid   IN insuranceorganization.insuranceorgid%TYPE
384  	   )
385  	      RETURN supplierorganization.ahmsupplierid%TYPE
386  	   IS
387  	      ln_defbusinesssupplierid	 supplierorganization.ahmsupplierid%TYPE;
388  	   BEGIN
389  	      SELECT   ahmsupplierid
390  		INTO   ln_defbusinesssupplierid
391  		FROM   supplierorganization so, insuranceorgsupplierrelation iosr
392  	       WHERE	   so.supplierorgid = iosr.supplierid
393  		       AND iosr.insuranceorgid = pn_accountid
394  		       AND usagemnemonic = 'B'
395  		       AND defaultbusinesssupplierflg = 'Y';
396  
397  	      RETURN ln_defbusinesssupplierid;
398  	   EXCEPTION
399  	      WHEN OTHERS
400  	      THEN
401  		 NULL;
402  	   END returndefaultbussupplier;
403  	BEGIN
404  	   -- initialize variables
405  	   ln_employeecount := 0;
406  	   ln_businesssupplier := NULL;
407  
408  	   -- get accountid for an account
409  	   ln_accountid := pn_accountid_in;
410  
411  	   -- check if the account has multiple business suppliers
412  	   -- if the count is 1, then return default business supplier
413  	   --- else follow the precendence logic.
414  	   SELECT   COUNT ( * )
415  	     INTO   ln_bussuppliercount
416  	     FROM   supplierorganization so, insuranceorgsupplierrelation iosr
417  	    WHERE	so.supplierorgid = iosr.supplierid
418  		    AND iosr.insuranceorgid = ln_accountid
419  		    AND usagemnemonic = 'B';
420  
421  	   --dbms_output.put_line ('business supplier count' || ln_bussuppliercount);
422  	   IF ln_bussuppliercount = 1					      --< 2
423  	   THEN
424  	      --ln_businesssupplier := returndefaultbussupplier (ln_accountid);
425  
426  	      SELECT   ahmsupplierid
427  		INTO   ln_businesssupplier
428  		FROM   supplierorganization so, insuranceorgsupplierrelation iosr
429  	       WHERE	   so.supplierorgid = iosr.supplierid
430  		       AND iosr.insuranceorgid = ln_accountid
431  		       AND usagemnemonic = 'B';
432  
433  	      RETURN ln_businesssupplier;
434  	   ELSE
435  		  -- step 1 - collect all the members that decide the lbs
436  		  -- payer members + hospital members (that has pcp and valid document type defined in precedence rule table)
437  		  SELECT   getlbs_new_obj (memberid,
438  					   ahmsupplierid,
439  					   membertypecode,
440  					   effectiveenddt,
441  					   relatedahmbusinesssupplierid,
442  					   usagemnemonic)
443  	      BULK COLLECT INTO   nt_lbs
444  		    FROM   (		      -- collection of active payer members
445  			    SELECT    m.memberid,
446  				      CASE NVL (iosr.insuranceorgid, 1)
447  					 WHEN 1
448  					 THEN
449  					    fgetattributedpayersupplier (
450  					       m.memberid,
451  					       ln_accountid
452  					    )
453  					 ELSE
454  					    m.ahmsupplierid
455  				      END
456  					 ahmsupplierid,
457  				      m.membertypecode,
458  				      m.effectiveenddt,
459  				      CASE NVL (iosr.insuranceorgid, 1)
460  					 WHEN 1
461  					 THEN
462  					    fgetattributed_bus_supplier (
463  					       m.memberid,
464  					       ln_accountid
465  					    )
466  					 ELSE
467  					    so.relatedahmbusinesssupplierid
468  				      END
469  					 relatedahmbusinesssupplierid,
470  				      so.usagemnemonic
471  			       FROM   memberaggregation ma,
472  				      MEMBER m,
473  				      supplierorganization so,
474  				      insuranceorgsupplierrelation iosr
475  			      WHERE	  ma.memberid = m.memberid
476  				      AND ma.ahmmrnmemberid = pn_ahmmrnmemberid_in
477  				      AND m.ahmsupplierid = so.ahmsupplierid
478  				      AND so.supplierorgid = iosr.supplierid(+)
479  				      AND iosr.insuranceorgid(+) = ln_accountid
480  				      AND so.usagemnemonic = 'P'
481  				      AND ma.effectiveenddt IS NULL
482  				      AND m.effectiveenddt IS NULL
483  			    UNION ALL
484  			    -- collection of hospital members with pcp and also having document type defined in precedence rule table
485  			    SELECT   m.memberid,
486  				     m.ahmsupplierid,
487  				     m.membertypecode,
488  				     m.effectiveenddt,
489  				     so.relatedahmbusinesssupplierid,
490  				     so.usagemnemonic
491  			      FROM   memberaggregation ma,
492  				     MEMBER m,
493  				     supplierorganization so,
494  				     insuranceorgsupplierrelation iosr
495  			     WHERE	 ma.memberid = m.memberid
496  				     AND ma.ahmmrnmemberid = pn_ahmmrnmemberid_in
497  				     AND m.ahmsupplierid = so.ahmsupplierid
498  				     AND so.supplierorgid = iosr.supplierid
499  				     AND iosr.insuranceorgid = ln_accountid
500  				     AND so.usagemnemonic = 'H'
501  				     AND ma.effectiveenddt IS NULL
502  				     AND m.effectiveenddt IS NULL
503  				     AND EXISTS
504  					   (SELECT   NULL
505  					      FROM   memberproviderrelationship mpr
506  	   ,
507  						     memberproviderrelationshipextn
508  	   mprxt
509  					     WHERE	 mpr.memberid = m.memberid
510  						     AND mpr.exclusioncd = 'IN'
511  						     AND mpr.pcpflg = 'Y'
512  						     AND mpr.memberproviderskey =
513  							   mprxt.memberproviderskey
514  						     AND (NVL (
515  							     mprxt.vendorsourcenm,
516  							     'ZZZ'
517  							  ),
518  							  NVL (
519  							     mprxt.
520  	   clinicaldoctypemnemonic,
521  							     'ZZZ'
522  							  )) IN
523  							      (SELECT	NVL (
524  									   vendorsourcenm
525  	   ,
526  									   'ZZZ'
527  									),
528  									NVL (
529  									   clinicaldoctypemnemonic
530  	   ,
531  									   'ZZZ'
532  									)
533  								 FROM
534  	   ahmmrnsupplierprecedencerule
535  								WHERE
536  	   ahmsupplierid =
537  									   m.
538  	   ahmsupplierid))
539  			    UNION ALL
540  			    -- collection of hospital members with pcp and also defined in precedence rule table with no document type
541  			    SELECT   m.memberid,
542  				     m.ahmsupplierid,
543  				     m.membertypecode,
544  				     m.effectiveenddt,
545  				     so.relatedahmbusinesssupplierid,
546  				     so.usagemnemonic
547  			      FROM   memberaggregation ma,
548  				     MEMBER m,
549  				     supplierorganization so,
550  				     insuranceorgsupplierrelation iosr
551  			     WHERE	 ma.memberid = m.memberid
552  				     AND ma.ahmmrnmemberid = pn_ahmmrnmemberid_in
553  				     AND m.ahmsupplierid = so.ahmsupplierid
554  				     AND so.supplierorgid = iosr.supplierid
555  				     AND iosr.insuranceorgid = ln_accountid
556  				     AND so.usagemnemonic = 'H'
557  				     AND ma.effectiveenddt IS NULL
558  				     AND m.effectiveenddt IS NULL
559  				     AND EXISTS
560  					   (SELECT   NULL
561  					      FROM   memberproviderrelationship mpr
562  					     WHERE	 mpr.memberid = m.memberid
563  						     AND mpr.exclusioncd = 'IN'
564  						     AND mpr.pcpflg = 'Y')
565  				     AND EXISTS
566  					   (SELECT   NULL
567  					      FROM   ahmmrnsupplierprecedencerule
568  					     WHERE   ahmsupplierid =
569  							m.ahmsupplierid
570  						     AND vendorsourcenm IS NULL
571  						     AND clinicaldoctypemnemonic IS
572  	   NULL));
573  
574  	      --  dbms_output.put_line ('total member count' || nt_lbs.count);
575  	      IF nt_lbs.COUNT = 0
576  	      THEN
577  		 SELECT   datasourcenm
578  		   INTO   lv_datasourcenm
579  		   FROM   MEMBER
580  		  WHERE   memberid = pn_ahmmrnmemberid_in;
581  
582  		 IF lv_datasourcenm = 'CT'
583  		 THEN
584  		    BEGIN
585  		       -- if datasource is ct, check if any lbs has been set in the past, if not return null
586  		       SELECT	lastbusinessahmsupplierid
587  			 INTO	ln_businesssupplier
588  			 FROM	ahmmrnbusinesssupplier
589  			WHERE	ahmmrnmemberid = pn_ahmmrnmemberid_in;
590  
591  		       RETURN ln_businesssupplier;
592  		    EXCEPTION
593  		       WHEN OTHERS
594  		       THEN
595  			  RETURN NULL;
596  		    END;
597  		 ELSE
598  		    ln_businesssupplier := returndefaultbussupplier (ln_accountid);
599  		    RETURN ln_businesssupplier;
600  		 END IF;
601  	      ELSE
602  		 -- if more than one member in the aggregation
603  		 -- if there is only one payer in the aggregation, return the related business supplier
604  		 IF nt_lbs.COUNT = 1
605  		 THEN
606  		    ln_businesssupplier := nt_lbs (1).relatedahmbusinesssupplierid;
607  
608  		    IF ln_businesssupplier IS NOT NULL
609  		    THEN
610  		       RETURN ln_businesssupplier;
611  		    ELSE
612  		       RETURN returndefaultbussupplier (ln_accountid);
613  		    END IF;
614  		 ELSE			   -- count > 1 -- follow precedence logic.
615  			-- collect precedence rule
616  			SELECT	 *
617  		    BULK COLLECT INTO	lt_precedencerule
618  			  FROM	 ahmmrnsupplierprecedencerule
619  			 WHERE	 accountid = ln_accountid
620  				 AND precedencerulebasismnemonic LIKE
621  				       'LBSPRECEDENCE%'
622  		      ORDER BY	 precedencenbr ASC;
623  
624  		    FOR l_precedence_ctr IN 1 .. lt_precedencerule.COUNT
625  		    LOOP
626  		       IF lt_precedencerule (
627  			     l_precedence_ctr
628  			  ).precedencerulebasismnemonic = 'LBSPRECEDENCE_EMPLOYEE'
629  		       THEN
630  			  FOR l_ctr IN 1 .. nt_lbs.COUNT
631  			  LOOP
632  			     IF nt_lbs (l_ctr).membertypecode = 'E'
633  			     THEN
634  				ln_employeecount := ln_employeecount + 1;
635  				ln_businesssupplier :=
636  				   nt_lbs (l_ctr).relatedahmbusinesssupplierid;
637  			     END IF;
638  			  END LOOP;
639  
640  			  IF ln_employeecount = 1
641  			  THEN
642  			     IF ln_businesssupplier IS NOT NULL
643  			     THEN
644  				RETURN ln_businesssupplier;
645  			     ELSE
646  				RETURN returndefaultbussupplier (ln_accountid);
647  			     END IF;
648  			  ELSE
649  			     ln_businesssupplier := NULL;
650  			  END IF;
651  		       END IF;
652  
653  		       -- if employee count is more than 2, then continue with precendence supplier rule
654  		       IF lt_precedencerule (
655  			     l_precedence_ctr
656  			  ).precedencerulebasismnemonic = 'LBSPRECEDENCE_SUPPLIER'
657  		       THEN
658  			  FOR l_ctr IN 1 .. nt_lbs.COUNT
659  			  LOOP
660  			     IF lt_precedencerule (l_precedence_ctr).ahmsupplierid
661  	   =
662  				   nt_lbs (l_ctr).ahmsupplierid
663  			     THEN
664  				ln_businesssupplier :=
665  				   nt_lbs (l_ctr).relatedahmbusinesssupplierid;
666  
667  				IF ln_businesssupplier IS NOT NULL
668  				THEN
669  				   RETURN ln_businesssupplier;
670  				ELSE
671  				   RETURN returndefaultbussupplier (ln_accountid);
672  				END IF;
673  			     END IF;
674  			  END LOOP;		     -- looping through all members
675  		       END IF;			  -- supplier based precedence rule
676  		    END LOOP;
677  	   -- for l_precedence_ctr in 1..lt_precedencerule.count  loop
678  
679  		    -- if it comes here, then no business supplier found in the precendence logic -- return default bus
680  		    ln_businesssupplier := returndefaultbussupplier (ln_accountid);
681  		    RETURN ln_businesssupplier;
682  		 END IF;
683  	   -- if nt_lbs.count = 1 and nt_lbs(1).usagemnemonic = 'p' then
684  	      END IF;				      -- if  nt_lbs.count = 0 then;
685  	   END IF;				 -- if ln_bussuppliercount < 2 then
686  
687  	   RETURN NULL;
688  	EXCEPTION
689  	   WHEN OTHERS
690  	   THEN
691  	      hie_log_error (
692  		 procedurename_in    => 'FGETBUSINESSSUPPLIER',
693  		 memberid_in	     => SUBSTR (DBMS_UTILITY.format_error_backtrace
694  	   ,
695  						-9),
696  		 errornumber_in      => SQLCODE,
697  		 errormessage_in     => SUBSTR (SQLERRM, 1, 100),
698  		 errortimestamp_in   => SYSDATE,
699  		 jseq_in	     => NULL
700  	      );
701  	END fgetbusinesssupplier_new;
702  
703  	PROCEDURE updatememberprocessstatus (pnmemberid_in   IN number,
704  					     pvbits_in	     IN varchar2,
705  					     pvceflag_in     IN varchar2)
706  	IS
707  	   vbit 	    varchar2 (4000);
708  	   vcebit	    varchar2 (4000);
709  	   vprocessedflag   careenginememberprocessstatus.processedflag%TYPE;
710  	   vbatchid	    careenginememberprocessstatus.batchid%TYPE;
711  	   vmemberid	    careenginememberprocessstatus.memberid%TYPE;
712  	BEGIN
713  	   vbit := pvbits_in;
714  
715  	   SELECT   packnumberconversion.dec2bin (NVL (processedbitind, 0)),
716  		    processedflag,
717  		    batchid
718  	     INTO   vcebit, vprocessedflag, vbatchid
719  	     FROM   careenginememberprocessstatus
720  	    WHERE   memberid = pnmemberid_in		   --for update skip locked
721  					    ;
722  
723  	   IF (vbatchid <> 100 OR vprocessedflag <> pvceflag_in)
724  	   THEN
725  	      UPDATE   careenginememberprocessstatus
726  		 SET   processedflag = pvceflag_in,
727  		       batchid = 100,
728  		       processedbitind =
729  			  packnumberconversion.bin2dec (
730  			     packnumberconversion.bitor (vcebit, vbit)
731  			  ),
732  		       processedbitupdtdt = SYSDATE,
733  		       recordupdtdt = SYSDATE,
734  		       updtdby = USER,
735  		       incvrunflg = 'Y',
736  		       incvrunflgupddt = SYSTIMESTAMP
737  	       WHERE   memberid = pnmemberid_in;
738  	   ELSE
739  	      UPDATE   careenginememberprocessstatus
740  		 SET   processedbitind =
741  			  packnumberconversion.bin2dec (
742  			     packnumberconversion.bitor (vcebit, vbit)
743  			  ),
744  		       processedbitupdtdt = SYSDATE,
745  		       incvrunflg = 'Y',
746  		       incvrunflgupddt = SYSTIMESTAMP
747  	       WHERE   memberid = pnmemberid_in;
748  	   END IF;
749  	EXCEPTION
750  	   WHEN OTHERS
751  	   THEN
752  	      hie_log_error (
753  		 procedurename_in    => 'COM_UPDATEMEMBERPROCESSSTATUS',
754  		 memberid_in	     => pnmemberid_in,
755  		 errornumber_in      => SQLCODE,
756  		 errormessage_in     => SUBSTR (
757  					  'Warning in updatememberprocessstatus '
758  					  || SQLERRM,
759  					  1,
760  					  1000
761  				       ),
762  		 errortimestamp_in   => SYSDATE,
763  		 jseq_in	     => NULL
764  	      );
765  	END updatememberprocessstatus;
766  
767  	FUNCTION isactaccount (
768  	   pn_insuranceorgid_in   IN insuranceorganization.insuranceorgid%TYPE
769  	)
770  	   RETURN varchar2
771  	IS
772  	   lv_returnflag   varchar2 (1);
773  	BEGIN
774  	   SELECT   'Y'
775  	     INTO   lv_returnflag
776  	     FROM   ods.insuranceorganization io,
777  		    insuranceorgsupplierrelation iosr,
778  		    supplierproductrelation spr
779  	    WHERE	io.orgid IS NOT NULL
780  		    AND iosr.insuranceorgid = io.insuranceorgid
781  		    AND spr.supplierorgid = iosr.supplierid
782  		    AND spr.productcd = 'ACT'
783  		    AND (spr.productterminationdt IS NULL
784  			 OR spr.productterminationdt >= SYSDATE)
785  		    AND io.insuranceorgid = pn_insuranceorgid_in
786  		    AND ROWNUM = 1;
787  
788  	   RETURN lv_returnflag;
789  	EXCEPTION
790  	   WHEN OTHERS
791  	   THEN
792  	      RETURN 'N';
793  	END isactaccount;
794  
795  	PROCEDURE getcurrentwinnerpcp (
796  	   pn_ahmmemberid_in		   IN	  MEMBER.memberid%TYPE,
797  	   pv_processingmodecd_in	   IN	  insuranceorganization.
798  	   processingmodecd%TYPE,
799  	   pn_currpcpprovider_out	      OUT memberproviderrelationship.
800  	   providerid%TYPE,
801  	   pn_currmasterpcpprovider_out       OUT memberproviderrelationship.
802  	   mastercareproviderid%TYPE,
803  	   pn_currmemberproviderskey_out      OUT memberproviderrelationship.
804  	   memberproviderskey%TYPE
805  	)
806  	IS
807  	BEGIN
808  	   IF pv_processingmodecd_in = 'P'
809  	   THEN
810  	      SELECT   providerid, mastercareproviderid, memberproviderskey
811  		INTO   pn_currpcpprovider_out,
812  		       pn_currmasterpcpprovider_out,
813  		       pn_currmemberproviderskey_out
814  		FROM   memberproviderrelationship mpr
815  	       WHERE	   mpr.memberid = pn_ahmmemberid_in
816  		       AND mpr.winnerpcpflg = 'Y'
817  		       AND mpr.exclusioncd = 'IN';
818  	   ELSIF pv_processingmodecd_in = 'H'
819  	   THEN
820  	      SELECT   providerid, mastercareproviderid, memberproviderskey
821  		INTO   pn_currpcpprovider_out,
822  		       pn_currmasterpcpprovider_out,
823  		       pn_currmemberproviderskey_out
824  		FROM   memberproviderrelationship mpr
825  	       WHERE	   mpr.ahmmemberid = pn_ahmmemberid_in
826  		       AND mpr.winnerpcpflg = 'Y'
827  		       AND mpr.exclusioncd = 'IN';
828  	   END IF;
829  	EXCEPTION
830  	   WHEN OTHERS
831  	   THEN
832  	      NULL;
833  	END getcurrentwinnerpcp;
834  
835  	FUNCTION fgetmastermemoniccode (p_mastercode_in      IN varchar2,
836  					p_mastergroupcd_in   IN varchar2)
837  	   RETURN mastercode.mastercodemnemonic%TYPE
838  	IS
839  	   lv_retcode	mastercode.mastercodemnemonic%TYPE;
840  	BEGIN
841  	   SELECT   mc.mastercodemnemonic
842  	     INTO   lv_retcode
843  	     FROM   ods.mastercode mc
844  	    WHERE   mc.mastercode = p_mastercode_in
845  		    AND mc.mastergroupcd = p_mastergroupcd_in;
846  
847  	   RETURN lv_retcode;
848  	EXCEPTION
849  	   WHEN OTHERS
850  	   THEN
851  	      lv_retcode := NULL;
852  	      RETURN lv_retcode;
853  	END fgetmastermemoniccode;
854  
855  	PROCEDURE resetwinnerpcpflg (
856  	   pn_ahmmemberid_in		   memberproviderrelationship.ahmmemberid%
857  	   TYPE,
858  	   pn_oldpcpproviderid_in	   memberproviderrelationship.providerid%
859  	   TYPE,
860  	   pn_oldmasterpcpproviderid_in    memberproviderrelationship.
861  	   mastercareproviderid%TYPE,
862  	   pn_newpcpproviderid_in	   memberproviderrelationship.providerid%
863  	   TYPE,
864  	   pv_processingmodecd_in	   insuranceorganization.processingmodecd%
865  	   TYPE,
866  	   pn_accountid_in		   insuranceorganization.insuranceorgid%
867  	   TYPE,
868  	   pv_datasourcenm_in		   datasource.datasourcenm%TYPE,
869  	   pn_memberproviderskey_in	   memberproviderrelationship.
870  	   memberproviderskey%TYPE,
871  	   pn_oldmemberproviderskey	   memberproviderrelationship.
872  	   memberproviderskey%TYPE,
873  	   pv_isactflag 		   varchar2,
874  	   pn_checkptstart		   number DEFAULT NULL
875  	)
876  	IS
877  	   ln_newmasterpcpproviderid   memberproviderrelationship.
878  	   mastercareproviderid%TYPE;
879  	BEGIN
880  	   DBMS_OUTPUT.put_line ('New MPRskey ' || pn_memberproviderskey_in);
881  	   DBMS_OUTPUT.put_line ('New PCP ' || pn_newpcpproviderid_in);
882  
883  	   -- if pcp has changed, then set the ce bit 1024
884  	   IF NVL (pn_oldpcpproviderid_in, -1) <> NVL (pn_newpcpproviderid_in, -1)
885  	   THEN
886  	      ods_common_pkg.updatememberprocessstatus (pn_ahmmemberid_in,
887  							'10000000000',
888  							'N');
889  	   END IF;
890  
891  	   IF pn_checkptstart IS NOT NULL
892  	   THEN
893  	      ods_core.gt_chk6 := SYSTIMESTAMP;
894  	   END IF;
895  
896  	   -- if new pcp is passed, then terminate the old pcp record
897  	   IF pv_processingmodecd_in = 'P'
898  	   THEN
899  	      IF pn_oldmemberproviderskey IS NOT NULL
900  	      THEN
901  		 -- reset winner pcpflag to null
902  		 UPDATE   memberproviderrelationship
903  		    SET   winnerpcpflg = NULL,
904  			  updtdby = pv_datasourcenm_in || '_WINNERPCP'
905  		  WHERE       memberid = pn_ahmmemberid_in
906  			  AND exclusioncd = 'IN'
907  			  AND winnerpcpflg = 'Y';
908  
909  		 UPDATE   memberpcprelationshiphist
910  		    SET   effenddt = SYSTIMESTAMP,
911  			  recordupdatedt = SYSTIMESTAMP,
912  			  updatedby = pv_datasourcenm_in
913  		  WHERE   memberid = pn_ahmmemberid_in AND effenddt IS NULL;
914  	      END IF;
915  
916  	      IF pn_checkptstart IS NOT NULL
917  	      THEN
918  		 ods_core.gt_chk7 := SYSTIMESTAMP;
919  	      END IF;
920  
921  	      -- if new winner found, then update mpr and insert into history
922  	      IF pn_newpcpproviderid_in IS NOT NULL
923  		 AND pn_memberproviderskey_in IS NOT NULL
924  	      THEN
925  		 -- set the winner pcp flag to the new provider.
926  		 UPDATE   memberproviderrelationship mpr
927  		    SET   winnerpcpflg = 'Y',
928  			  updtdby = pv_datasourcenm_in || '_WINNERPCP'
929  		  WHERE   memberproviderskey = pn_memberproviderskey_in;
930  
931  		 -- insert record for the new pcp
932  		 INSERT INTO memberpcprelationshiphist (memberpcphistskey,
933  							memberproviderskey,
934  							memberid,
935  							providerid,
936  							effstartdt,
937  							effenddt,
938  							pcpflg,
939  							datasourcenm,
940  							vendorsourcenm,
941  							clinicaldoctypemnemonic,
942  							recordinsertdt,
943  							recordupdatedt,
944  							insertedby,
945  							updatedby)
946  		    SELECT   ods_mbrprovhist_seq.NEXTVAL,
947  			     memberproviderskey,
948  			     memberid,
949  			     providerid,
950  			     SYSDATE,
951  			     NULL,
952  			     winnerpcpflg,
953  			     datasourcenm,
954  			     NULL,
955  			     NULL,
956  			     SYSTIMESTAMP,
957  			     SYSTIMESTAMP,
958  			     pv_datasourcenm_in || '_WINNERPCP',
959  			     pv_datasourcenm_in || '_WINNERPCP'
960  		      FROM   memberproviderrelationship mpr
961  		     WHERE   mpr.memberproviderskey = pn_memberproviderskey_in;
962  
963  		 ods_core.gt_chk8 := SYSTIMESTAMP;
964  	      END IF;		      -- if pn_newpcpproviderid_in is not null then
965  	   ELSIF pv_processingmodecd_in = 'H'
966  	   THEN
967  	      IF pn_oldpcpproviderid_in IS NOT NULL
968  	      THEN
969  		 UPDATE   memberproviderrelationship
970  		    SET   winnerpcpflg = NULL,
971  			  updtdby = pv_datasourcenm_in || '_WINNERPCP'
972  		  WHERE       ahmmemberid = pn_ahmmemberid_in
973  			  AND exclusioncd = 'IN'
974  			  AND winnerpcpflg = 'Y';
975  
976  		 UPDATE   memberpcprelationshiphist
977  		    SET   effenddt = SYSTIMESTAMP,
978  			  recordupdatedt = SYSTIMESTAMP,
979  			  updatedby = pv_datasourcenm_in
980  		  WHERE   memberid = pn_ahmmemberid_in AND effenddt IS NULL;
981  	      END IF;
982  
983  	      IF pn_checkptstart IS NOT NULL
984  	      THEN
985  		 ods_core.gt_chk7 := SYSTIMESTAMP;
986  	      END IF;
987  
988  	      IF pn_newpcpproviderid_in IS NOT NULL
989  	      THEN
990  		 UPDATE   memberproviderrelationship mpr
991  		    SET   winnerpcpflg = 'Y',
992  			  updtdby = pv_datasourcenm_in || '_WINNERPCP'
993  		  WHERE   memberproviderskey = pn_memberproviderskey_in;
994  
995  		 INSERT INTO memberpcprelationshiphist (memberpcphistskey,
996  							memberproviderskey,
997  							memberid,
998  							providerid,
999  							effstartdt,
1000  							 effenddt,
1001  							 pcpflg,
1002  							 datasourcenm,
1003  							 vendorsourcenm,
1004  							 clinicaldoctypemnemonic,
1005  							 recordinsertdt,
1006  							 recordupdatedt,
1007  							 insertedby,
1008  							 updatedby)
1009  		     SELECT   ods_mbrprovhist_seq.NEXTVAL,
1010  			      mpr.memberproviderskey,
1011  			      mpr.ahmmemberid,
1012  			      mpr.providerid,
1013  			      SYSDATE,
1014  			      NULL,
1015  			      mpr.winnerpcpflg,
1016  			      mpr.datasourcenm,
1017  			      extn.vendorsourcenm,
1018  			      extn.clinicaldoctypemnemonic,
1019  			      SYSTIMESTAMP,
1020  			      SYSTIMESTAMP,
1021  			      pv_datasourcenm_in || '_WINNERPCP',
1022  			      pv_datasourcenm_in || '_WINNERPCP'
1023  		       FROM   memberproviderrelationship mpr,
1024  			      memberproviderrelationshipextn extn
1025  		      WHERE   mpr.memberproviderskey = pn_memberproviderskey_in
1026  			      AND mpr.memberproviderskey =
1027  				    extn.memberproviderskey(+);
1028  
1029  		  ods_core.gt_chk8 := SYSTIMESTAMP;
1030  	       END IF;		       -- if pn_newpcpproviderid_in is not null then
1031  	    END IF;					   -- usagemnemonic in (p,h)
1032  
1033  	    -- common code for both usage mnemonic
1034  	    IF pv_isactflag = 'Y'
1035  	    THEN
1036  	       -- if there is an open incident for the earlier pcp, it needs to be closed.
1037  	       IF pn_oldpcpproviderid_in IS NOT NULL
1038  		  AND NVL (pn_oldpcpproviderid_in, -1) <>
1039  			NVL (pn_newpcpproviderid_in, -1)
1040  	       THEN
1041  		  DBMS_OUTPUT.put_line (
1042  		     'Closing incident for Old PCP ' || pn_oldpcpproviderid_in
1043  		  );
1044  
1045  		  -- if change in pcp, closing pcp challenged status
1046  		  UPDATE   mprincidenttrack
1047  		     SET   incidentstatusmnemonic =
1048  			      ods_common_pkg.fgetmastermemoniccode ('CLOSED',
1049  								    'INCDSTATUS'),
1050  			   updatedby = pv_datasourcenm_in || '_WINNERPCP',
1051  			   updatedbydatasourcenm = pv_datasourcenm_in,
1052  			   updateddt = SYSTIMESTAMP
1053  		   WHERE   accountid = pn_accountid_in
1054  			   AND serviceproviderid IN
1055  				    (pn_oldmasterpcpproviderid_in,
1056  				     pn_oldpcpproviderid_in)
1057  			   AND memberid = pn_ahmmemberid_in
1058  			   AND exclusioncd = 'IN'
1059  			   AND incidentstatusmnemonic =
1060  				 ods_common_pkg.fgetmastermemoniccode (
1061  				    'OPEN',
1062  				    'INCDSTATUS'
1063  				 )
1064  			   AND incidentstatemnemonic IN
1065  				    (ods_common_pkg.fgetmastermemoniccode (
1066  					'APPROVED',
1067  					'INCDSTATE'
1068  				     ),
1069  				     ods_common_pkg.fgetmastermemoniccode (
1070  					'SUBMITTED',
1071  					'INCDSTATE'
1072  				     ),
1073  				     ods_common_pkg.fgetmastermemoniccode (
1074  					'NEW',
1075  					'INCDSTATE'
1076  				     ))
1077  			   AND incidenttypemnemonic =
1078  				 ods_common_pkg.fgetmastermemoniccode ('PCPCHLG',
1079  								       'RLTNRSNCD');
1080  
1081  		  ods_core.gt_chk9 := SYSTIMESTAMP;
1082  
1083  		  -- closing pcprelchng status.
1084  		  UPDATE   mprincidenttrack
1085  		     SET   incidentstatusmnemonic =
1086  			      ods_common_pkg.fgetmastermemoniccode ('CLOSED',
1087  								    'INCDSTATUS'),
1088  			   updatedby = pv_datasourcenm_in || '_WINNERPCP',
1089  			   updatedbydatasourcenm = pv_datasourcenm_in,
1090  			   updateddt = SYSTIMESTAMP
1091  		   WHERE   accountid = pn_accountid_in
1092  			   AND serviceproviderid IN
1093  				    (pn_oldmasterpcpproviderid_in,
1094  				     pn_oldpcpproviderid_in)
1095  			   AND memberid = pn_ahmmemberid_in
1096  			   AND exclusioncd = 'IN'
1097  			   AND incidentstatusmnemonic =
1098  				 ods_common_pkg.fgetmastermemoniccode (
1099  				    'OPEN',
1100  				    'INCDSTATUS'
1101  				 )
1102  			   AND incidentstatemnemonic IN
1103  				    (ods_common_pkg.fgetmastermemoniccode (
1104  					'APPROVED',
1105  					'INCDSTATE'
1106  				     ),
1107  				     ods_common_pkg.fgetmastermemoniccode (
1108  					'SUBMITTED',
1109  					'INCDSTATE'
1110  				     ),
1111  				     ods_common_pkg.fgetmastermemoniccode (
1112  					'NEW',
1113  					'INCDSTATE'
1114  				     ))
1115  			   AND incidenttypemnemonic =
1116  				 ods_common_pkg.fgetmastermemoniccode (
1117  				    'PCPRELCHLG',
1118  				    'RLTNRSNCD'
1119  				 );
1120  
1121  		  ods_core.gt_chk10 := SYSTIMESTAMP;
1122  
1123  		  -- addition to above, need to insert into mpr with ch status.
1124  		  IF sql%ROWCOUNT > 0 AND pn_oldmasterpcpproviderid_in IS NOT NULL
1125  		  THEN
1126  		     INSERT INTO memberproviderrelationship (
1127  								memberproviderskey,
1128  								memberid,
1129  								providerid,
1130  								datasourcenm,
1131  								pcpflg,
1132  								providertypecd,
1133  								relationstatuscd,
1134  								relationstatuschangedt
1135  	    ,
1136  								exclusioncd,
1137  								recordinsertdt,
1138  								recordupdtdt,
1139  								insertedby,
1140  								updtdby,
1141  								odsclindocskey,
1142  								accountid,
1143  								mastercareproviderid
1144  	    ,
1145  								ahmmemberid,
1146  								winnerpcpflg
1147  				)
1148  		       VALUES	(ods_mbrprov_seq.NEXTVAL,
1149  				 pn_ahmmemberid_in,
1150  				 pn_oldmasterpcpproviderid_in,
1151  				 'CT',
1152  				 'N',
1153  				 'P',
1154  				 'CH',
1155  				 SYSDATE,
1156  				 'IN',
1157  				 SYSTIMESTAMP,
1158  				 SYSTIMESTAMP,
1159  				 pv_datasourcenm_in || '_WINNERPCP',
1160  				 pv_datasourcenm_in || '_WINNERPCP',
1161  				 NULL,
1162  				 pn_accountid_in,
1163  				 pn_oldmasterpcpproviderid_in,
1164  				 pn_ahmmemberid_in,
1165  				 NULL);
1166  
1167  		     ods_core.gt_chk11 := SYSTIMESTAMP;
1168  		  END IF;
1169  	       END IF;
1170  	    END IF;				       -- if pv_isactflag = 'y' then
1171  
1172  	    -- if there is an open incident for the new pcp, it needs to be closed.
1173  	    IF pn_newpcpproviderid_in IS NOT NULL
1174  	       AND NVL (pn_oldpcpproviderid_in, -1) <>
1175  		     NVL (pn_newpcpproviderid_in, -1)
1176  	    THEN
1177  	       IF pv_isactflag = 'Y'
1178  	       THEN
1179  		  -- get masterprovider for the new pcp
1180  		  BEGIN
1181  		     SELECT   mastercareproviderid
1182  		       INTO   ln_newmasterpcpproviderid
1183  		       FROM   provorgstaffmasterxref ps
1184  		      WHERE   ps.provorgstaffid = pn_newpcpproviderid_in
1185  			      AND ps.exclusioncd = 'IN';
1186  		  EXCEPTION
1187  		     WHEN OTHERS
1188  		     THEN
1189  			ln_newmasterpcpproviderid := NULL;
1190  		  END;
1191  
1192  		  ods_core.gt_chk12 := SYSTIMESTAMP;
1193  
1194  		  UPDATE   mprincidenttrack
1195  		     SET   incidentstatusmnemonic =
1196  			      ods_common_pkg.fgetmastermemoniccode ('CLOSED',
1197  								    'INCDSTATUS'),
1198  			   updatedby = pv_datasourcenm_in || '_WINNERPCP',
1199  			   updatedbydatasourcenm = pv_datasourcenm_in,
1200  			   updateddt = SYSTIMESTAMP
1201  		   WHERE   accountid = pn_accountid_in
1202  			   AND serviceproviderid IN
1203  				    (ln_newmasterpcpproviderid,
1204  				     pn_newpcpproviderid_in)
1205  			   AND memberid = pn_ahmmemberid_in
1206  			   AND exclusioncd = 'IN'
1207  			   AND incidentstatusmnemonic =
1208  				 ods_common_pkg.fgetmastermemoniccode (
1209  				    'OPEN',
1210  				    'INCDSTATUS'
1211  				 )
1212  			   AND incidentstatemnemonic IN
1213  				    (ods_common_pkg.fgetmastermemoniccode (
1214  					'APPROVED',
1215  					'INCDSTATE'
1216  				     ),
1217  				     ods_common_pkg.fgetmastermemoniccode (
1218  					'SUBMITTED',
1219  					'INCDSTATE'
1220  				     ),
1221  				     ods_common_pkg.fgetmastermemoniccode (
1222  					'NEW',
1223  					'INCDSTATE'
1224  				     ))
1225  			   AND incidenttypemnemonic IN
1226  				    (ods_common_pkg.fgetmastermemoniccode (
1227  					'PCPREL',
1228  					'RLTNRSNCD'
1229  				     ),
1230  				     ods_common_pkg.fgetmastermemoniccode (
1231  					'PCP',
1232  					'RLTNRSNCD'
1233  				     ));
1234  
1235  		  ods_core.gt_chk14 := SYSTIMESTAMP;
1236  	       END IF;				       -- if pv_isactflag = 'y' then
1237  	    END IF;			-- if pn_newpcpproviderid_in is not null and
1238  	 END resetwinnerpcpflg;
1239  
1240  	 PROCEDURE getnewwinnerpcp (
1241  	    pn_ahmmemberid_in		IN     MEMBER.memberid%TYPE,
1242  	    pn_accountid_in		IN     insuranceorganization.insuranceorgid%
1243  	    TYPE,
1244  	    pv_processingmodecd_in	IN     insuranceorganization.
1245  	    processingmodecd%TYPE,
1246  	    pv_isactflag_in		IN     varchar2,
1247  	    pv_pcpdatasourcenm_in	IN     supplierorganization.pcpdatasourcenm%
1248  	    TYPE,
1249  	    pn_projectid_in		IN     insuranceorganization.projectid%TYPE,
1250  	    pn_newpcpprovider_out	   OUT memberproviderrelationship.providerid
1251  	    %TYPE,
1252  	    pn_memberproviderskey_out	   OUT memberproviderrelationship.
1253  	    memberproviderskey%TYPE
1254  	 )
1255  	 IS
1256  	 BEGIN
1257  	    DBMS_OUTPUT.put_line (' AHM ID' || pn_ahmmemberid_in);
1258  	    DBMS_OUTPUT.put_line (
1259  	       ' pv_processingmodecd_in ' || pv_processingmodecd_in
1260  	    );
1261  	    DBMS_OUTPUT.put_line (' pv_isactflag_in_in ' || pv_isactflag_in);
1262  	    DBMS_OUTPUT.put_line (
1263  	       ' pv_pcpdatasourcenm_in ' || pv_pcpdatasourcenm_in
1264  	    );
1265  
1266  	    /******************************************************************************
1267  												----- processing mode - p
1268  	    *******************************************************************************/
1269  	    IF pv_processingmodecd_in = 'P'
1270  	    THEN
1271  	       IF pv_pcpdatasourcenm_in = 'ALL'
1272  	       THEN
1273  		  IF pv_isactflag_in = 'N'
1274  		  THEN
1275  		     -- fetch the latest valid pcp across datasources.
1276  		     SELECT   MAX(mpr.providerid)
1277  				 KEEP (DENSE_RANK FIRST ORDER BY
1278  							   mpr.recordupdtdt DESC),
1279  			      MAX(mpr.memberproviderskey)
1280  				 KEEP (DENSE_RANK FIRST ORDER BY
1281  							   mpr.recordupdtdt DESC)
1282  		       INTO   pn_newpcpprovider_out, pn_memberproviderskey_out
1283  		       FROM   memberproviderrelationship mpr,
1284  			      careprovider cp,
1285  			      careproviderxref cpx,
1286  			      MEMBER m
1287  		      WHERE	  mpr.memberid = pn_ahmmemberid_in
1288  			      AND mpr.memberid = m.memberid
1289  			      AND m.effectiveenddt IS NULL
1290  			      AND mpr.exclusioncd = 'IN'
1291  			      AND NVL (cp.exclusioncode, 'IN') = 'IN'
1292  			      AND mpr.pcpflg = 'Y'
1293  			      AND cp.careproviderid = mpr.providerid
1294  			      AND cp.careproviderid = cpx.careproviderid
1295  			      AND cpx.projectid = pn_projectid_in
1296  			      AND NVL (cp.providerfilterflag, 'ZZ') <> 'Y'
1297  			      AND NVL (cp.provideroptoutflag, 'ZZ') <> 'Y'
1298  			      AND NVL (mpr.relationstatuscd, 'ZZZ') <> 'CH';
1299  		  ELSE					  -- 'all' and actflag = 'y'
1300  		     SELECT   MAX(mpr.providerid)
1301  				 KEEP (DENSE_RANK FIRST ORDER BY
1302  							   mpr.recordupdtdt DESC),
1303  			      MAX(mpr.memberproviderskey)
1304  				 KEEP (DENSE_RANK FIRST ORDER BY
1305  							   mpr.recordupdtdt DESC)
1306  		       INTO   pn_newpcpprovider_out, pn_memberproviderskey_out
1307  		       FROM   memberproviderrelationship mpr,
1308  			      userfact uf,
1309  			      careprovider cp,
1310  			      MEMBER m
1311  		      WHERE	  mpr.providerid = uf.userid
1312  			      AND mpr.memberid = pn_ahmmemberid_in
1313  			      AND mpr.memberid = m.memberid
1314  			      AND m.effectiveenddt IS NULL
1315  			      AND uf.accountid = pn_accountid_in
1316  			      AND mpr.exclusioncd = 'IN'
1317  			      AND NVL (cp.exclusioncode, 'IN') = 'IN'
1318  			      AND mpr.pcpflg = 'Y'
1319  			      AND uf.userid = cp.careproviderid
1320  			      AND NVL (cp.providerfilterflag, 'ZZ') <> 'Y'
1321  			      AND NVL (cp.provideroptoutflag, 'ZZ') <> 'Y'
1322  			      AND NVL (mpr.relationstatuscd, 'ZZZ') <> 'CH';
1323  		  END IF;
1324  	    -- pv_pcpdatasourcenm_in = 'all' and if pv_processingmodecd_in = 'p' and pv_isactflag_in_in = 'n'
1325  	       ELSIF pv_pcpdatasourcenm_in = 'PRC'
1326  	       THEN
1327  		  IF pv_isactflag_in = 'N'
1328  		  THEN
1329  		     SELECT   MAX(providerid)
1330  				 KEEP (DENSE_RANK FIRST ORDER BY
1331  							   prc.precedencenbr,
1332  							   mpr.recordupdtdt DESC),
1333  			      MAX(mpr.memberproviderskey)
1334  				 KEEP (DENSE_RANK FIRST ORDER BY
1335  							   prc.precedencenbr,
1336  							   mpr.recordupdtdt DESC)
1337  		       INTO   pn_newpcpprovider_out, pn_memberproviderskey_out
1338  		       FROM   memberproviderrelationship mpr,
1339  			      MEMBER m,
1340  			      ahmmrnsupplierprecedencerule prc,
1341  			      mastercode mc,
1342  			      careprovider cp,
1343  			      careproviderxref cpx,
1344  			      insuranceorganization io
1345  		      WHERE	  mpr.memberid = pn_ahmmemberid_in
1346  			      AND mpr.memberid = m.memberid
1347  			      AND m.effectiveenddt IS NULL
1348  			      AND m.ahmsupplierid = prc.ahmsupplierid
1349  			      AND prc.precedencerulebasismnemonic LIKE 'PCPPRC%'
1350  			      AND prc.precedencerulebasismnemonic =
1351  				    mc.mastercodemnemonic
1352  			      AND mc.mastercode = mpr.datasourcenm
1353  			      AND cp.careproviderid = mpr.providerid
1354  			      AND cp.careproviderid = cpx.careproviderid
1355  			      AND cpx.projectid = io.projectid
1356  			      AND io.insuranceorgid = pn_accountid_in
1357  			      AND NVL (cp.providerfilterflag, 'ZZ') <> 'Y'
1358  			      AND NVL (cp.provideroptoutflag, 'ZZ') <> 'Y'
1359  			      AND mpr.exclusioncd = 'IN'
1360  			      AND NVL (cp.exclusioncode, 'IN') = 'IN'
1361  			      AND mpr.pcpflg = 'Y'
1362  			      AND NVL (mpr.relationstatuscd, 'ZZZ') <> 'CH';
1363  		  ELSE					    -- prc and actflag = 'y'
1364  		     SELECT   MAX(providerid)
1365  				 KEEP (DENSE_RANK FIRST ORDER BY
1366  							   prc.precedencenbr,
1367  							   mpr.recordupdtdt DESC),
1368  			      MAX(mpr.memberproviderskey)
1369  				 KEEP (DENSE_RANK FIRST ORDER BY
1370  							   prc.precedencenbr,
1371  							   mpr.recordupdtdt DESC)
1372  		       INTO   pn_newpcpprovider_out, pn_memberproviderskey_out
1373  		       FROM   memberproviderrelationship mpr,
1374  			      MEMBER m,
1375  			      ahmmrnsupplierprecedencerule prc,
1376  			      mastercode mc,
1377  			      userfact uf,
1378  			      careprovider cp
1379  		      WHERE	  mpr.memberid = pn_ahmmemberid_in
1380  			      AND mpr.memberid = m.memberid
1381  			      AND m.effectiveenddt IS NULL
1382  			      AND m.ahmsupplierid = prc.ahmsupplierid
1383  			      AND prc.precedencerulebasismnemonic LIKE 'PCPPRC%'
1384  			      AND prc.precedencerulebasismnemonic =
1385  				    mc.mastercodemnemonic
1386  			      AND mc.mastercode = mpr.datasourcenm
1387  			      AND uf.userid = mpr.providerid
1388  			      AND uf.accountid = pn_accountid_in
1389  			      AND uf.userid = cp.careproviderid
1390  			      AND NVL (cp.exclusioncode, 'IN') = 'IN'
1391  			      AND NVL (cp.providerfilterflag, 'ZZ') <> 'Y'
1392  			      AND NVL (cp.provideroptoutflag, 'ZZ') <> 'Y'
1393  			      AND mpr.exclusioncd = 'IN'
1394  			      AND mpr.pcpflg = 'Y'
1395  			      AND NVL (mpr.relationstatuscd, 'ZZZ') <> 'CH';
1396  		  END IF;
1397  	    -- pv_pcpdatasourcenm_in = 'all' and if pv_processingmodecd_in = 'p' and pv_isactflag_in in (y,n)
1398  	       END IF;
1399  	    -- pv_pcpdatasourcenm_in in ('all','prc') and if pv_processingmodecd_in = 'p'
1400  	    /******************************************************************************
1401  														  ----- processing mode - h
1402  	    *******************************************************************************/
1403  	    ELSIF pv_processingmodecd_in = 'H'
1404  	    THEN
1405  	       IF pv_pcpdatasourcenm_in = 'ALL'
1406  	       THEN
1407  		  IF pv_isactflag_in = 'N'
1408  		  THEN
1409  		     SELECT   MAX(mpr.providerid)
1410  				 KEEP (DENSE_RANK FIRST ORDER BY
1411  							   mpr.recordupdtdt DESC),
1412  			      MAX(mpr.memberproviderskey)
1413  				 KEEP (DENSE_RANK FIRST ORDER BY
1414  							   mpr.recordupdtdt DESC)
1415  		       INTO   pn_newpcpprovider_out, pn_memberproviderskey_out
1416  		       FROM   memberproviderrelationship mpr,
1417  			      careprovider cp,
1418  			      careproviderxref cpx,
1419  			      insuranceorganization io,
1420  			      MEMBER m
1421  		      WHERE	  mpr.ahmmemberid = pn_ahmmemberid_in
1422  			      AND mpr.exclusioncd = 'IN'
1423  			      AND mpr.memberid = m.memberid
1424  			      AND m.effectiveenddt IS NULL
1425  			      AND mpr.pcpflg = 'Y'
1426  			      AND cp.careproviderid = mpr.providerid
1427  			      AND cp.careproviderid = cpx.careproviderid
1428  			      AND cpx.projectid = io.projectid
1429  			      AND io.insuranceorgid = pn_accountid_in
1430  			      AND NVL (cp.exclusioncode, 'IN') = 'IN'
1431  			      AND NVL (cp.providerfilterflag, 'ZZ') <> 'Y'
1432  			      AND NVL (cp.provideroptoutflag, 'ZZ') <> 'Y'
1433  			      AND NVL (mpr.relationstatuscd, 'ZZZ') <> 'CH';
1434  		  ELSE					   --'all' and actflag = 'y'
1435  		     SELECT   MAX(mpr.providerid)
1436  				 KEEP (DENSE_RANK FIRST ORDER BY
1437  							   mpr.recordupdtdt DESC),
1438  			      MAX(mpr.memberproviderskey)
1439  				 KEEP (DENSE_RANK FIRST ORDER BY
1440  							   mpr.recordupdtdt DESC)
1441  		       INTO   pn_newpcpprovider_out, pn_memberproviderskey_out
1442  		       FROM   memberproviderrelationship mpr,
1443  			      userfact uf,
1444  			      careprovider cp,
1445  			      MEMBER m
1446  		      WHERE	  mpr.providerid = uf.userid
1447  			      AND mpr.ahmmemberid = pn_ahmmemberid_in
1448  			      AND mpr.memberid = m.memberid
1449  			      AND m.effectiveenddt IS NULL
1450  			      AND uf.accountid = pn_accountid_in
1451  			      AND mpr.exclusioncd = 'IN'
1452  			      AND NVL (cp.exclusioncode, 'IN') = 'IN'
1453  			      AND mpr.pcpflg = 'Y'
1454  			      AND uf.userid = cp.careproviderid
1455  			      AND NVL (cp.providerfilterflag, 'ZZ') <> 'Y'
1456  			      AND NVL (cp.provideroptoutflag, 'ZZ') <> 'Y'
1457  			      AND NVL (mpr.relationstatuscd, 'ZZZ') <> 'CH';
1458  		  END IF;
1459  	       ELSIF pv_pcpdatasourcenm_in = 'PRC'
1460  	       THEN
1461  		  IF pv_isactflag_in = 'Y'
1462  		  THEN
1463  		     SELECT   MAX(providerid)
1464  				 KEEP (DENSE_RANK FIRST ORDER BY
1465  							   precedencenbr,
1466  							   recordupdtdt DESC),
1467  			      MAX(memberproviderskey)
1468  				 KEEP (DENSE_RANK FIRST ORDER BY
1469  							   precedencenbr,
1470  							   recordupdtdt DESC)
1471  		       INTO   pn_newpcpprovider_out, pn_memberproviderskey_out
1472  		       FROM   (
1473  	    -- all the providers from the precedence with no vendorsourcenm or doctype defined
1474  				--			 select mpr.providerid
1475  				--			       ,prc.precedencenbr
1476  				--			       ,mpr.recordupdtdt
1477  				--			   from memberproviderrelationship mpr
1478  				--			       ,ahmmrnbusinesssupplier lbs
1479  				--			       ,ahmmrnsupplierprecedencerule prc
1480  				--			       ,mastercode mc
1481  				--			       ,userfact uf
1482  				--			       ,careprovider cp
1483  				--			  where mpr.ahmmemberid = pn_ahmmemberid_in
1484  				--			    and mpr.ahmmemberid = lbs.ahmmrnmemberid
1485  				--			    and lbs.lastbusinessahmsupplierid = prc.ahmsupplierid
1486  				--			    and prc.precedencerulebasismnemonic like '%prc%'
1487  				--			    and prc.precedencerulebasismnemonic = mc.mastercodemnemonic
1488  				--			    and prc.vendorsourcenm is null
1489  				--			    and prc.clinicaldoctypemnemonic is null
1490  				--			    and mc.mastercode = mpr.datasourcenm
1491  				--			    and uf.userid = mpr.providerid
1492  				--			    and uf.accountid = pn_accountid_in
1493  				--			    and uf.userid = cp.careproviderid
1494  				--			    and nvl (cp.providerfilterflag
1495  				--				    ,'zz'
1496  				--				    ) <> 'y'
1497  				--			    and nvl (cp.provideroptoutflag
1498  				--				    ,'zz'
1499  				--				    ) <> 'y'
1500  				--			    and mpr.exclusioncd = 'in'
1501  				--			    and nvl(cp.exclusioncode,'in') = 'in'
1502  				--			    and mpr.pcpflg = 'y'
1503  				--			    and nvl (mpr.relationstatuscd
1504  				--				    ,'zzz'
1505  				--				    ) not in ('vl', 'ch')
1506  				SELECT	 mpr.providerid,
1507  					 prc.precedencenbr,
1508  					 mpr.recordupdtdt,
1509  					 mpr.memberproviderskey
1510  				  FROM	 memberproviderrelationship mpr,
1511  					 ahmmrnbusinesssupplier lbs,
1512  					 ahmmrnsupplierprecedencerule prc,
1513  					 mastercode mc,
1514  					 userfact uf,
1515  					 careprovider cp,
1516  					 MEMBER m,
1517  					 supplierorganization so
1518  				 WHERE	 mpr.ahmmemberid = pn_ahmmemberid_in
1519  					 AND mpr.ahmmemberid = lbs.ahmmrnmemberid
1520  					 AND lbs.lastbusinessahmsupplierid =
1521  					       prc.ahmsupplierid
1522  					 AND lbs.lastbusinessahmsupplierid =
1523  					       so.relatedahmbusinesssupplierid
1524  					 AND so.ahmsupplierid = m.ahmsupplierid
1525  					 AND mpr.memberid = m.memberid
1526  					 AND m.effectiveenddt IS NULL
1527  					 AND prc.precedencerulebasismnemonic LIKE
1528  					       'PCPPRC%'
1529  					 AND prc.precedencerulebasismnemonic =
1530  					       mc.mastercodemnemonic
1531  					 AND prc.vendorsourcenm IS NULL
1532  					 AND prc.clinicaldoctypemnemonic IS NULL
1533  					 AND mc.mastercode = mpr.datasourcenm
1534  					 AND uf.userid = mpr.providerid
1535  					 AND uf.accountid = pn_accountid_in
1536  					 AND uf.userid = cp.careproviderid
1537  					 AND NVL (cp.providerfilterflag, 'ZZ') <>
1538  					       'Y'
1539  					 AND NVL (cp.provideroptoutflag, 'ZZ') <>
1540  					       'Y'
1541  					 AND mpr.exclusioncd = 'IN'
1542  					 AND NVL (cp.exclusioncode, 'IN') = 'IN'
1543  					 AND mpr.pcpflg = 'Y'
1544  					 AND NVL (mpr.relationstatuscd, 'ZZZ') <>
1545  					       'CH'
1546  			       UNION ALL
1547  			       -- for attributed suppliers where vendorsource and doctype are not defined.
1548  			       SELECT	mpr.providerid,
1549  					prc.precedencenbr,
1550  					mpr.recordupdtdt,
1551  					mpr.memberproviderskey
1552  				 FROM	memberproviderrelationship mpr,
1553  					ahmmrnbusinesssupplier lbs,
1554  					ahmmrnsupplierprecedencerule prc,
1555  					mastercode mc,
1556  					userfact uf,
1557  					careprovider cp,
1558  					attributedmember am,
1559  					supplierorganization so,
1560  					MEMBER m
1561  				WHERE	mpr.ahmmemberid = pn_ahmmemberid_in
1562  					AND mpr.ahmmemberid = lbs.ahmmrnmemberid
1563  					AND lbs.lastbusinessahmsupplierid =
1564  					      prc.ahmsupplierid
1565  					AND lbs.lastbusinessahmsupplierid =
1566  					      so.relatedahmbusinesssupplierid
1567  					AND so.ahmsupplierid =
1568  					      am.attributedpayersupplierid
1569  					AND mpr.memberid = am.memberid
1570  					AND mpr.memberid = m.memberid
1571  					AND m.effectiveenddt IS NULL
1572  					AND am.projectid = pn_projectid_in
1573  					AND am.effectiveenddt IS NULL
1574  					AND prc.precedencerulebasismnemonic LIKE
1575  					      'PCPPRC%'
1576  					AND prc.precedencerulebasismnemonic =
1577  					      mc.mastercodemnemonic
1578  					AND prc.vendorsourcenm IS NULL
1579  					AND prc.clinicaldoctypemnemonic IS NULL
1580  					AND mc.mastercode = mpr.datasourcenm
1581  					AND uf.userid = mpr.providerid
1582  					AND uf.accountid = pn_accountid_in
1583  					AND uf.userid = cp.careproviderid
1584  					AND NVL (cp.providerfilterflag, 'ZZ') <>
1585  					      'Y'
1586  					AND NVL (cp.provideroptoutflag, 'ZZ') <>
1587  					      'Y'
1588  					AND mpr.exclusioncd = 'IN'
1589  					AND NVL (cp.exclusioncode, 'IN') = 'IN'
1590  					AND mpr.pcpflg = 'Y'
1591  					AND NVL (mpr.relationstatuscd, 'ZZZ') <>
1592  					      'CH'
1593  			       UNION ALL
1594  			       -- all the providers from the precendence where vendorsourcenm or doctype are defined
1595  			       SELECT	mpr.providerid,
1596  					prc.precedencenbr,
1597  					mpr.recordupdtdt,
1598  					mpr.memberproviderskey
1599  				 FROM	memberproviderrelationship mpr,
1600  					memberproviderrelationshipextn ext,
1601  					ahmmrnbusinesssupplier lbs,
1602  					ahmmrnsupplierprecedencerule prc,
1603  					mastercode mc,
1604  					userfact uf,
1605  					careprovider cp
1606  				WHERE	mpr.memberproviderskey =
1607  					   ext.memberproviderskey
1608  					AND mpr.ahmmemberid = lbs.ahmmrnmemberid
1609  					AND mpr.ahmmemberid = pn_ahmmemberid_in
1610  					AND lbs.lastbusinessahmsupplierid =
1611  					      prc.ahmsupplierid
1612  					AND prc.precedencerulebasismnemonic LIKE
1613  					      'PCPPRC%'
1614  					AND prc.precedencerulebasismnemonic =
1615  					      mc.mastercodemnemonic
1616  					AND NVL (prc.vendorsourcenm, 'ZZZ') =
1617  					      NVL (ext.vendorsourcenm, 'ZZZ')
1618  					AND NVL (prc.clinicaldoctypemnemonic,
1619  						 'ZZZ') =
1620  					      NVL (ext.clinicaldoctypemnemonic,
1621  						   'ZZZ')
1622  					AND mc.mastercode = mpr.datasourcenm
1623  					AND uf.userid = mpr.providerid
1624  					AND uf.accountid = pn_accountid_in
1625  					AND uf.userid = cp.careproviderid
1626  					AND NVL (cp.providerfilterflag, 'ZZ') <>
1627  					      'Y'
1628  					AND NVL (cp.provideroptoutflag, 'ZZ') <>
1629  					      'Y'
1630  					AND mpr.exclusioncd = 'IN'
1631  					AND NVL (cp.exclusioncode, 'IN') = 'IN'
1632  					AND mpr.pcpflg = 'Y'
1633  					AND NVL (mpr.relationstatuscd, 'ZZZ') <>
1634  					      'CH'
1635  			       UNION ALL
1636  			       SELECT	mpr.providerid,
1637  					prc.precedencenbr,
1638  					mpr.recordupdtdt,
1639  					mpr.memberproviderskey
1640  				 FROM	memberproviderrelationship mpr,
1641  					memberproviderrelationshipextn ext,
1642  					ahmmrnbusinesssupplier lbs,
1643  					ahmmrnsupplierprecedencerule prc,
1644  					mastercode mc,
1645  					userfact uf,
1646  					careprovider cp,
1647  					MEMBER m,
1648  					supplierorganization so
1649  				WHERE	mpr.ahmmemberid = pn_ahmmemberid_in
1650  					AND mpr.ahmmemberid = lbs.ahmmrnmemberid
1651  					AND mpr.memberproviderskey =
1652  					      ext.memberproviderskey(+)
1653  					AND lbs.lastbusinessahmsupplierid =
1654  					      prc.ahmsupplierid
1655  					AND prc.ahmsupplierid = so.ahmsupplierid
1656  					AND so.defaultbusinesssupplierflg = 'Y'
1657  					AND mpr.memberid = m.memberid
1658  					AND m.effectiveenddt IS NULL
1659  					AND prc.precedencerulebasismnemonic LIKE
1660  					      'PCPPRC%'
1661  					AND prc.precedencerulebasismnemonic =
1662  					      mc.mastercodemnemonic
1663  					AND NVL (prc.vendorsourcenm, 'ZZZ') =
1664  					      NVL (ext.vendorsourcenm, 'ZZZ')
1665  					AND NVL (prc.clinicaldoctypemnemonic,
1666  						 'ZZZ') =
1667  					      NVL (ext.clinicaldoctypemnemonic,
1668  						   'ZZZ')
1669  					AND mc.mastercode = mpr.datasourcenm
1670  					AND uf.userid = mpr.providerid
1671  					AND uf.accountid = pn_accountid_in
1672  					AND uf.userid = cp.careproviderid
1673  					AND NVL (cp.providerfilterflag, 'ZZ') <>
1674  					      'Y'
1675  					AND NVL (cp.provideroptoutflag, 'ZZ') <>
1676  					      'Y'
1677  					AND mpr.exclusioncd = 'IN'
1678  					AND NVL (cp.exclusioncode, 'IN') = 'IN'
1679  					AND mpr.pcpflg = 'Y'
1680  					AND NVL (mpr.relationstatuscd, 'ZZZ') <>
1681  					      'CH');
1682  		  END IF;			    -- if pv_isactflag_in in 'y','n'
1683  	       END IF;
1684  	    --	 pv_pcpdatasourcenm_in	in ('all','prc') and if pv_processingmodecd_in = 'h'
1685  	    END IF;			     -- if processing mode code in ('p','h')
1686  	 END getnewwinnerpcp;
1687  
1688  	 PROCEDURE setwinnerpcp (
1689  	    pn_accountid_in	 IN insuranceorganization.insuranceorgid%TYPE
1690  	    DEFAULT NULL
1691  										,
1692  	    pn_ahmmemberid_in	 IN MEMBER.memberid%TYPE,
1693  	    pv_datasourcenm_in	 IN datasource.datasourcenm%TYPE
1694  	 )
1695  	 IS
1696  	    ln_accountid		insuranceorganization.insuranceorgid%TYPE;
1697  	    lv_processingmodecd 	insuranceorganization.processingmodecd%TYPE;
1698  	    lv_actflag			varchar2 (1);
1699  	    lv_pcpdatasourcenm		supplierorganization.pcpdatasourcenm%TYPE;
1700  	    lv_providerassignationcd	supplierorganization.providerassignationcd%
1701  	    TYPE;
1702  	    ln_oldpcpproviderid 	memberproviderrelationship.providerid%TYPE;
1703  	    ln_oldmasterpcpproviderid	memberproviderrelationship.
1704  	    mastercareproviderid%TYPE;
1705  	    ln_newpcpproviderid 	memberproviderrelationship.providerid%TYPE;
1706  	    ln_newmasterpcpproviderid	memberproviderrelationship.
1707  	    mastercareproviderid%TYPE;
1708  	    ln_projectid		insuranceorganization.projectid%TYPE;
1709  	    ln_memberproviderskey	memberproviderrelationship.
1710  	    memberproviderskey%TYPE;
1711  	    ln_currmemberproviderskey	memberproviderrelationship.
1712  	    memberproviderskey%TYPE;
1713  	 BEGIN
1714  	    ods_common_pkg.resetchkpt;
1715  	    ods_core.gt_start := SYSTIMESTAMP;
1716  
1717  	    -- if account id is not passed, derive from memberid
1718  	    IF pn_accountid_in IS NULL
1719  	    THEN
1720  	       -- ln_accountid		       := ods_common_pkg.fgetaccountidformember (pn_ahmmemberid_in);
1721  	       -- derive from member id
1722  	       BEGIN
1723  		  SELECT   vw.processingmodecd, vw.projectid, vw.accountid
1724  		    INTO   lv_processingmodecd, ln_projectid, ln_accountid
1725  		    FROM   MEMBER m, vw_project_account_rel vw
1726  		   WHERE   m.ahmsupplierid = vw.ahmsupplierid
1727  			   AND m.memberid = pn_ahmmemberid_in;
1728  	       EXCEPTION
1729  		  WHEN OTHERS
1730  		  THEN
1731  		     raise_application_error (
1732  			-20005,
1733  			'Unable to retrive account id for member '
1734  			|| pn_ahmmemberid_in
1735  		     );
1736  	       END;
1737  	    ELSE
1738  	       ln_accountid := pn_accountid_in;
1739  
1740  	       BEGIN
1741  		  SELECT   processingmodecd, projectid
1742  		    INTO   lv_processingmodecd, ln_projectid
1743  		    FROM   vw_project_account_rel io
1744  		   WHERE   io.accountid = ln_accountid AND ROWNUM = 1;
1745  	       EXCEPTION
1746  		  WHEN NO_DATA_FOUND
1747  		  THEN
1748  		     raise_application_error (-20005,
1749  					      'Invalid IO id ' || ln_accountid);
1750  	       END;
1751  	    END IF;
1752  
1753  	    ods_core.gt_chk1 := SYSTIMESTAMP;
1754  	    -- get the processingmodecd for the account
1755  
1756  	    -- check if the account is act or non-act
1757  	    lv_actflag := ods_common_pkg.isactaccount (ln_accountid);
1758  	    ods_core.gt_chk2 := SYSTIMESTAMP;
1759  
1760  	    IF lv_processingmodecd = 'P'
1761  	    THEN
1762  	       -- no aggregation. instance id is the ahm member id.
1763  	       -- get the pcpdatasourcenm, provider assignation code for member supplier
1764  	       BEGIN
1765  		  SELECT   pcpdatasourcenm, providerassignationcd
1766  		    INTO   lv_pcpdatasourcenm, lv_providerassignationcd
1767  		    FROM   supplierorganization so, MEMBER m
1768  		   WHERE   so.ahmsupplierid = m.ahmsupplierid
1769  			   AND m.memberid = pn_ahmmemberid_in;
1770  	       EXCEPTION
1771  		  WHEN NO_DATA_FOUND
1772  		  THEN
1773  		     raise_application_error (
1774  			-20005,
1775  			'No record in supplierorganization for the memberid '
1776  			|| pn_ahmmemberid_in
1777  		     );
1778  	       END;
1779  	    ELSIF lv_processingmodecd = 'H'
1780  	    THEN
1781  	       -- get the pcpdatasourcenm, provider assignation code for member supplier
1782  	       BEGIN
1783  		  SELECT   pcpdatasourcenm, providerassignationcd
1784  		    INTO   lv_pcpdatasourcenm, lv_providerassignationcd
1785  		    FROM   supplierorganization so, ahmmrnbusinesssupplier lbs
1786  		   WHERE   so.ahmsupplierid = lbs.lastbusinessahmsupplierid
1787  			   AND lbs.ahmmrnmemberid = pn_ahmmemberid_in;
1788  	       EXCEPTION
1789  		  WHEN NO_DATA_FOUND
1790  		  THEN
1791  		     raise_application_error (
1792  			-20005,
1793  			'Unable to retrieve PCP datasourcenm for the memberid '
1794  			|| pn_ahmmemberid_in
1795  		     );
1796  	       END;
1797  	    END IF;
1798  
1799  	    ods_core.gt_chk3 := SYSTIMESTAMP;
1800  	    DBMS_OUTPUT.put_line ('pcpdatasourcenm ' || lv_pcpdatasourcenm);
1801  	    DBMS_OUTPUT.put_line (
1802  	       'providerassignationcd ' || lv_providerassignationcd
1803  	    );
1804  	    -- get existing pcp.
1805  	    ods_common_pkg.getcurrentwinnerpcp (
1806  	       pn_ahmmemberid_in	       => pn_ahmmemberid_in,
1807  	       pv_processingmodecd_in	       => lv_processingmodecd,
1808  	       pn_currpcpprovider_out	       => ln_oldpcpproviderid,
1809  	       pn_currmasterpcpprovider_out    => ln_oldmasterpcpproviderid,
1810  	       pn_currmemberproviderskey_out   => ln_currmemberproviderskey
1811  	    );
1812  	    DBMS_OUTPUT.put_line ('Old PCP ' || ln_oldpcpproviderid);
1813  	    ods_core.gt_chk4 := SYSTIMESTAMP;
1814  
1815  	    -- if pcp datasource is na or the provider assignation is not pcp, then no need to set winner flag
1816  	    --- terminate if any pcp exists currently
1817  	    IF lv_pcpdatasourcenm = 'NA'
1818  	       OR NVL (lv_providerassignationcd, 'ZZ') <> 'PCP'
1819  	    THEN
1820  	       -- if record found then reset the mpr winner pcp flag
1821  	       IF ln_oldpcpproviderid IS NOT NULL
1822  	       THEN
1823  		  resetwinnerpcpflg (
1824  		     pn_ahmmemberid_in		    => pn_ahmmemberid_in,
1825  		     pn_oldpcpproviderid_in	    => ln_oldpcpproviderid,
1826  		     pn_oldmasterpcpproviderid_in   => ln_oldmasterpcpproviderid,
1827  		     pn_newpcpproviderid_in	    => NULL,
1828  		     pv_processingmodecd_in	    => lv_processingmodecd,
1829  		     pn_accountid_in		    => ln_accountid,
1830  		     pv_datasourcenm_in 	    => pv_datasourcenm_in,
1831  		     pn_memberproviderskey_in	    => NULL,
1832  		     pn_oldmemberproviderskey	    => ln_currmemberproviderskey,
1833  		     pv_isactflag		    => lv_actflag
1834  		  );
1835  	       END IF;
1836  
1837  	       ods_core.gt_chk5 := SYSTIMESTAMP;
1838  	       RETURN;
1839  	    ELSE
1840  	       -- else get the new pcp. if it's different, then need to terminate old pcp and add the new one.
1841  
1842  	       -- get new pcp
1843  	       ods_common_pkg.getnewwinnerpcp (
1844  		  pn_ahmmemberid_in	      => pn_ahmmemberid_in,
1845  		  pn_accountid_in	      => ln_accountid,
1846  		  pv_processingmodecd_in      => lv_processingmodecd,
1847  		  pv_isactflag_in	      => lv_actflag,
1848  		  pv_pcpdatasourcenm_in       => lv_pcpdatasourcenm,
1849  		  pn_projectid_in	      => ln_projectid,
1850  		  pn_newpcpprovider_out       => ln_newpcpproviderid,
1851  		  pn_memberproviderskey_out   => ln_memberproviderskey
1852  	       );
1853  	       DBMS_OUTPUT.put_line ('ln_newpcpproviderid ' || ln_newpcpproviderid);
1854  	       ods_core.gt_chk5 := SYSTIMESTAMP;
1855  
1856  	       IF NVL (ln_memberproviderskey, -1) <>
1857  		     NVL (ln_currmemberproviderskey, -1)
1858  	       THEN
1859  		  -- reset the winner pcp flag
1860  		  resetwinnerpcpflg (
1861  		     pn_ahmmemberid_in		    => pn_ahmmemberid_in,
1862  		     pn_oldpcpproviderid_in	    => ln_oldpcpproviderid,
1863  		     pn_oldmasterpcpproviderid_in   => ln_oldmasterpcpproviderid,
1864  		     pn_newpcpproviderid_in	    => ln_newpcpproviderid,
1865  		     pv_processingmodecd_in	    => lv_processingmodecd,
1866  		     pn_accountid_in		    => ln_accountid,
1867  		     pv_datasourcenm_in 	    => pv_datasourcenm_in,
1868  		     pn_memberproviderskey_in	    => ln_memberproviderskey,
1869  		     pn_oldmemberproviderskey	    => ln_currmemberproviderskey,
1870  		     pv_isactflag		    => lv_actflag,
1871  		     pn_checkptstart		    => 7
1872  		  );
1873  		  ods_core.gt_chk15 := SYSTIMESTAMP;
1874  	       END IF;	       -- if ln_oldpcpproviderid =  ln_newpcpproviderid then
1875  	    END IF;	       -- if	lv_pcpdatasourcenm in ('na','prc','all' etc)
1876  
1877  	    ods_core.gt_end := SYSTIMESTAMP;
1878  
1879  	    IF (ods_core.gt_end - ods_core.gt_start) >
1880  		  ods_core.fgetdebugexecutiontime ('SETWINNERPCP')
1881  	    THEN
1882  	       ods_core.loglongcall (pv_procedurenm_in	 => 'SETWINNERPCP',
1883  				     pv_logtable_in	 => NULL,
1884  				     pn_logtableseq_in	 => NULL,
1885  				     pt_start_in	 => ods_core.gt_start,
1886  				     pt_chk1_in 	 => ods_core.gt_chk1,
1887  				     pt_chk2_in 	 => ods_core.gt_chk2,
1888  				     pt_chk3_in 	 => ods_core.gt_chk3,
1889  				     pt_chk4_in 	 => ods_core.gt_chk4,
1890  				     pt_chk5_in 	 => ods_core.gt_chk5,
1891  				     pt_chk6_in 	 => ods_core.gt_chk6,
1892  				     pt_chk7_in 	 => ods_core.gt_chk7,
1893  				     pt_chk8_in 	 => ods_core.gt_chk8,
1894  				     pt_chk9_in 	 => ods_core.gt_chk9,
1895  				     pt_chk10_in	 => ods_core.gt_chk10,
1896  				     pt_chk11_in	 => ods_core.gt_chk11,
1897  				     pt_chk12_in	 => ods_core.gt_chk12,
1898  				     pt_chk13_in	 => ods_core.gt_chk13,
1899  				     pt_chk14_in	 => ods_core.gt_chk14,
1900  				     pt_chk15_in	 => ods_core.gt_chk15,
1901  				     pt_end_in		 => ods_core.gt_end);
1902  	    END IF;
1903  	 EXCEPTION
1904  	    WHEN OTHERS
1905  	    THEN
1906  	       hie_log_error (
1907  		  procedurename_in    => 'SETWINNERPCP',
1908  		  memberid_in	      => SUBSTR (DBMS_UTILITY.format_error_backtrace
1909  	    ,
1910  						 -9),
1911  		  errornumber_in      => SQLCODE,
1912  		  errormessage_in     =>   'Error for MRN '
1913  					|| pn_ahmmemberid_in
1914  					|| ':'
1915  					|| SUBSTR (SQLERRM, 1, 200),
1916  		  errortimestamp_in   => SYSDATE,
1917  		  jseq_in	      => NULL
1918  	       );
1919  	       RAISE;
1920  	 END setwinnerpcp;
1921  
1922  	 PROCEDURE setwinnerpcp (
1923  	    pn_accountid_in	    IN	   insuranceorganization.insuranceorgid%TYPE
1924  	    ,
1925  	    pn_ahmmemberidlist_in   IN	   table_memberid,
1926  	    pv_datasourcenm_in	    IN	   datasource.datasourcenm%TYPE,
1927  	    pn_returncode_out	       OUT number
1928  	 )
1929  	 IS
1930  	 BEGIN
1931  	    IF pn_ahmmemberidlist_in IS NOT NULL
1932  	    THEN
1933  	       FOR l_ctr IN 1 .. pn_ahmmemberidlist_in.COUNT
1934  	       LOOP
1935  		  BEGIN
1936  		     ods_common_pkg.setwinnerpcp (
1937  			pn_accountid_in      => pn_accountid_in,
1938  			pn_ahmmemberid_in    => pn_ahmmemberidlist_in (l_ctr),
1939  			pv_datasourcenm_in   => pv_datasourcenm_in
1940  		     );
1941  		  EXCEPTION
1942  		     WHEN OTHERS
1943  		     THEN
1944  			NULL;
1945  		  END;
1946  	       END LOOP;
1947  	    END IF;
1948  
1949  	    pn_returncode_out := ct_core.ferrorcodesct ('CT', 'SUCCESSFUL');
1950  	 END setwinnerpcp;
1951  
1952  	 PROCEDURE pcpbatchrefresh (p_batchid_in	IN     number,
1953  				    p_mprcacheflg_in	IN     varchar2,
1954  				    p_datasourcenm_in	IN     varchar2,
1955  				    p_returncode_out	   OUT number)
1956  	 IS
1957  	    lv_accountid	   userpatienttracker.accountid%TYPE;
1958  	    lv_memberidlist	   table_memberid;
1959  	    lv_memberplanidlist    table_memberid;
1960  	    lv_limit		   number;
1961  	    lv_returncode	   number;
1962  	    lv_err_line 	   varchar2 (4000);
1963  	    lv_tran_id		   number;
1964  	    lv_memberstslist	   mbrrefreshsts_tab := mbrrefreshsts_tab ();
1965  	    -- changed to get the sucess/error
1966  	    lv_count		   number;
1967  	    ln_existingwinnerpcp   memberproviderrelationship.providerid%TYPE;
1968  	    ln_existingmasterpcp   memberproviderrelationship.mastercareproviderid%
1969  	    TYPE;
1970  	    ln_newwinnerpcp	   memberproviderrelationship.providerid%TYPE;
1971  	    ln_newmasterpcp	   memberproviderrelationship.mastercareproviderid%
1972  	    TYPE;
1973  
1974  	    CURSOR cur1
1975  	    IS
1976  	       SELECT	DISTINCT UP.memberid, UP.memberplanid
1977  		 FROM	userpatienttracker UP
1978  		WHERE	    UP.userpatienttrackerid = p_batchid_in
1979  			AND processstatus = 'PENDING'
1980  			AND UP.actionflag IN ('A', 'C');
1981  	    -- do we need to check <> 'd' instead
1982  
1983  	    PROCEDURE setdebuginfo (lp_batchid_in	 IN number,
1984  				    lp_mprcacheflg_in	 IN varchar2,
1985  				    lp_datasourcenm_in	 IN varchar2)
1986  	    IS
1987  	       PRAGMA AUTONOMOUS_TRANSACTION;
1988  	    BEGIN
1989  	       SELECT	transaction_seq.NEXTVAL INTO lv_tran_id FROM DUAL;
1990  
1991  	       INSERT INTO dbug_pcpbatchrefresh (batchid,
1992  						 mprcacheflag,
1993  						 datasourcenm,
1994  						 recordinsertdt,
1995  						 log_seq)
1996  		 VALUES   (lp_batchid_in,
1997  			   lp_mprcacheflg_in,
1998  			   lp_datasourcenm_in,
1999  			   SYSTIMESTAMP,
2000  			   lv_tran_id);
2001  
2002  	       COMMIT;
2003  	    END;
2004  	 BEGIN
2005  	    ods_core.gt_start := SYSTIMESTAMP;
2006  
2007  	    IF fdebug ('PCPBATCHREFRESH') = 'Y'
2008  	    THEN
2009  	       setdebuginfo (lp_batchid_in	  => p_batchid_in,
2010  			     lp_mprcacheflg_in	  => p_mprcacheflg_in,
2011  			     lp_datasourcenm_in   => p_datasourcenm_in);
2012  	    END IF;
2013  
2014  	    BEGIN
2015  	       SELECT	UP.accountid
2016  		 INTO	lv_accountid
2017  		 FROM	userpatienttracker UP
2018  		WHERE	UP.userpatienttrackerid = p_batchid_in AND ROWNUM < 2;
2019  	    EXCEPTION
2020  	       WHEN OTHERS
2021  	       THEN
2022  		  lv_accountid := NULL;
2023  	    END;
2024  
2025  	    lv_limit :=
2026  	       ct_core.fgetrefservicefilter (p_servicenm_in    => 'PCPBATCHREFRESH',
2027  					     p_datasource_in   => 'CT',
2028  					     p_searchstring    => 'FETCHLIMIT');
2029  	    lv_limit := NVL (lv_limit, 1000);
2030  	    ods_core.gt_chk1 := SYSTIMESTAMP;
2031  
2032  	    OPEN cur1;
2033  
2034  	    LOOP
2035  	       FETCH cur1
2036  		  BULK COLLECT INTO   lv_memberidlist, lv_memberplanidlist
2037  		  LIMIT lv_limit;
2038  
2039  	       EXIT WHEN lv_memberidlist.COUNT = 0;
2040  
2041  	       FOR i IN lv_memberidlist.FIRST .. lv_memberidlist.LAST
2042  	    -- changed to get the sucess/error
2043  	       LOOP				  -- changed to get the sucess/error
2044  		  BEGIN
2045  		     IF (p_mprcacheflg_in = 'Y')
2046  		     THEN
2047  			-- get existing winner pcp
2048  			BEGIN
2049  			   SELECT   providerid, mastercareproviderid
2050  			     INTO   ln_existingwinnerpcp, ln_existingmasterpcp
2051  			     FROM   memberproviderrelationship mpr
2052  			    WHERE	mpr.ahmmemberid = lv_memberidlist (i)
2053  				    AND mpr.winnerpcpflg = 'Y'
2054  				    AND mpr.pcpflg = 'Y'
2055  				    AND mpr.exclusioncd = 'IN';
2056  			EXCEPTION
2057  			   WHEN OTHERS
2058  			   THEN
2059  			      ln_existingwinnerpcp := NULL;
2060  			      ln_existingmasterpcp := NULL;
2061  			END;
2062  		     END IF;
2063  
2064  		     ods_common_pkg.setwinnerpcp (
2065  			pn_accountid_in      => lv_accountid,
2066  			pn_ahmmemberid_in    => lv_memberidlist (i)
2067  	    -- changed to get the sucess/error
2068  								   ,
2069  			pv_datasourcenm_in   => p_datasourcenm_in
2070  		     );
2071  
2072  		     IF (p_mprcacheflg_in = 'Y')
2073  		     THEN
2074  			-- get new winner pcp
2075  			BEGIN
2076  			   SELECT   providerid, mastercareproviderid
2077  			     INTO   ln_newwinnerpcp, ln_newmasterpcp
2078  			     FROM   memberproviderrelationship mpr
2079  			    WHERE	mpr.ahmmemberid = lv_memberidlist (i)
2080  				    AND mpr.winnerpcpflg = 'Y'
2081  				    AND mpr.pcpflg = 'Y'
2082  				    AND mpr.exclusioncd = 'IN';
2083  			EXCEPTION
2084  			   WHEN OTHERS
2085  			   THEN
2086  			      ln_newwinnerpcp := NULL;
2087  			      ln_newmasterpcp := NULL;
2088  			END;
2089  
2090  			-- if different, then both these ids should be in the upt table for this member
2091  			IF NVL (ln_existingwinnerpcp, -1) <>
2092  			      NVL (ln_newwinnerpcp, -1)
2093  			THEN
2094  			   INSERT INTO userpatienttracker (userpatienttrackerid,
2095  							   accountid,
2096  							   memberid,
2097  							   memberplanid,
2098  							   providerid,
2099  							   masterflag,
2100  							   associationsource,
2101  							   associationstatus,
2102  							   pcpindicator,
2103  							   pcpsource,
2104  							   pcpdate,
2105  							   actionflag,
2106  							   processdt,
2107  							   processstatus,
2108  							   insertedby,
2109  							   inserteddt,
2110  							   updatedby,
2111  							   updateddt)
2112  			      SELECT   p_batchid_in,
2113  				       lv_accountid,
2114  				       lv_memberidlist (i),
2115  				       lv_memberplanidlist (i),
2116  				       p.providerid,
2117  				       p.masterflag,
2118  				       NULL		  --  associationsource    ,
2119  					   ,
2120  				       NULL		   -- associationstatus    ,
2121  					   ,
2122  				       NULL		   -- pcpindicator	   ,
2123  					   ,
2124  				       NULL		   -- pcpsource 	   ,
2125  					   ,
2126  				       NULL		   -- pcpdate		   ,
2127  					   ,
2128  				       actionflag,
2129  				       SYSDATE,
2130  				       processstatus,
2131  				       'PCPBATCHREFRESH',
2132  				       SYSTIMESTAMP,
2133  				       'PCPBATCHREFRESH',
2134  				       SYSTIMESTAMP
2135  				FROM   (SELECT	 ln_existingwinnerpcp providerid,
2136  						 'N' masterflag,
2137  						 (CASE
2138  						     WHEN ln_existingmasterpcp IS
2139  	    NOT NULL
2140  						     THEN
2141  							'D'
2142  						     ELSE
2143  							'A'
2144  						  END)
2145  						    actionflag,
2146  						 (CASE
2147  						     WHEN ln_existingmasterpcp IS
2148  	    NOT NULL
2149  						     THEN
2150  							'PROCESSED'
2151  						     ELSE
2152  							'PENDING'
2153  						  END)
2154  						    processstatus
2155  					  FROM	 DUAL
2156  					 WHERE	 ln_existingwinnerpcp IS NOT NULL
2157  					UNION ALL
2158  					SELECT	 ln_existingmasterpcp providerid,
2159  						 'Y' masterflag,
2160  						 'A',
2161  						 'PENDING'
2162  					  FROM	 DUAL
2163  					 WHERE	 ln_existingmasterpcp IS NOT NULL
2164  					UNION ALL
2165  					SELECT	 ln_newwinnerpcp providerid,
2166  						 'N' masterflag,
2167  						 (CASE
2168  						     WHEN ln_newmasterpcp IS NOT
2169  	    NULL
2170  						     THEN
2171  							'D'
2172  						     ELSE
2173  							'A'
2174  						  END),
2175  						 (CASE
2176  						     WHEN ln_newmasterpcp IS NOT
2177  	    NULL
2178  						     THEN
2179  							'PROCESSED'
2180  						     ELSE
2181  							'PENDING'
2182  						  END)
2183  						    processstatus
2184  					  FROM	 DUAL
2185  					 WHERE	 ln_newwinnerpcp IS NOT NULL
2186  					UNION ALL
2187  					SELECT	 ln_newmasterpcp providerid,
2188  						 'Y' masterflag,
2189  						 'A',
2190  						 'PENDING'
2191  					  FROM	 DUAL
2192  					 WHERE	 ln_newmasterpcp IS NOT NULL) p
2193  			       WHERE   NOT EXISTS
2194  					  (SELECT   NULL
2195  					     FROM   userpatienttracker upt
2196  					    WHERE   upt.userpatienttrackerid =
2197  						       p_batchid_in
2198  						    AND upt.memberid =
2199  							  lv_memberidlist (i)
2200  						    AND upt.providerid =
2201  							  p.providerid);
2202  			END IF;
2203  		     END IF;
2204  
2205  		     IF (p_mprcacheflg_in = 'N')
2206  		     THEN
2207  			lv_memberstslist.EXTEND (1);
2208  			lv_memberstslist (lv_memberstslist.LAST) :=
2209  			   mbrrefreshsts_obj (lv_memberidlist (i), 'SUCCESS');
2210  		     END IF;
2211  		  EXCEPTION
2212  		     WHEN OTHERS
2213  		     THEN
2214  			lv_memberstslist.EXTEND (1);
2215  			lv_memberstslist (lv_memberstslist.LAST) :=
2216  			   mbrrefreshsts_obj (lv_memberidlist (i), 'ERROR');
2217  		  END;
2218  	       -- changed to get the sucess/error
2219  	       END LOOP;
2220  	    -- changed to get the sucess/error
2221  	    END LOOP;
2222  
2223  	    CLOSE cur1;
2224  
2225  	    ods_core.gt_chk2 := SYSTIMESTAMP;
2226  
2227  	    IF (p_mprcacheflg_in = 'Y')
2228  	    THEN
2229  	       actuserpatientbatchrefresh (
2230  		  p_userpatienttrackerid_in   => p_batchid_in
2231  	       );
2232  	    ELSIF (p_mprcacheflg_in = 'N')
2233  	    THEN
2234  	       FORALL idx IN 1 .. lv_memberstslist.COUNT
2235  		  UPDATE   userpatienttracker upt
2236  		     SET   upt.processstatus =
2237  			      DECODE (lv_memberstslist (idx).processstatus,
2238  				      'SUCCESS', 'COMPLETED',
2239  				      'ERROR', 'EXCEPTION',
2240  				      'NOTPROCESSED'),
2241  			   updatedby = USER || '_WINNERPCP',
2242  			   updateddt = SYSTIMESTAMP,
2243  			   processdt = SYSDATE
2244  		   -- pojo flag
2245  		   WHERE       upt.userpatienttrackerid = p_batchid_in
2246  			   AND upt.memberid = lv_memberstslist (idx).memberid
2247  			   AND upt.actionflag IN ('A', 'C');
2248  	    END IF;
2249  
2250  	    ods_core.gt_end := SYSTIMESTAMP;
2251  
2252  	    IF (ods_core.gt_end - ods_core.gt_start) >
2253  		  ods_core.fgetdebugexecutiontime ('PCPBATCHREFRESH')
2254  	    THEN
2255  	       ods_core.loglongcall (pv_procedurenm_in	    => 'PCPBATCHREFRESH',
2256  				     pn_procreturncode_in   => NULL,
2257  				     pn_logtableseq_in	    => lv_tran_id,
2258  				     pt_start_in	    => ods_core.gt_start,
2259  				     pt_chk1_in 	    => ods_core.gt_chk1,
2260  				     pt_chk2_in 	    => ods_core.gt_chk2,
2261  				     pt_end_in		    => ods_core.gt_end);
2262  	    END IF;
2263  
2264  	    p_returncode_out := ct_core.ferrorcodesct ('CT', 'SUCCESSFUL');
2265  	 EXCEPTION
2266  	    WHEN NO_DATA_FOUND
2267  	    THEN
2268  	       p_returncode_out := ct_core.ferrorcodesct ('CT', 'NOT SUCCESSFUL');
2269  	    WHEN OTHERS
2270  	    THEN
2271  	       p_returncode_out := ct_core.ferrorcodesct ('CT', 'NOT SUCCESSFUL');
2272  	       lv_err_line := DBMS_UTILITY.format_error_backtrace;
2273  	       log_error ('PCPBATCHREFRESH',
2274  			  SUBSTR (lv_err_line, -9),
2275  			  SQLCODE,
2276  			  SQLERRM,
2277  			  SYSDATE,
2278  			  NULL);
2279  	 END pcpbatchrefresh;
2280  
2281  	 FUNCTION fgetaccountidformember (p_member_id IN MEMBER.memberid%TYPE)
2282  	    RETURN insuranceorganization.insuranceorgid%TYPE
2283  	 IS
2284  	    l_accountid   insuranceorganization.insuranceorgid%TYPE;
2285  	 BEGIN
2286  	    SELECT   io.insuranceorgid
2287  	      INTO   l_accountid
2288  	      FROM   MEMBER m,
2289  		     insuranceorgsupplierrelation iosr,
2290  		     supplierorganization so,
2291  		     insuranceorganization io
2292  	     WHERE	 m.ahmsupplierid = so.ahmsupplierid
2293  		     AND so.supplierorgid = iosr.supplierid
2294  		     AND iosr.insuranceorgid = io.insuranceorgid
2295  		     AND m.memberid = p_member_id;
2296  
2297  	    RETURN l_accountid;
2298  	 EXCEPTION
2299  	    WHEN OTHERS
2300  	    THEN
2301  	       RETURN NULL;
2302  	 END fgetaccountidformember;
2303  
2304  	 FUNCTION fcheckwinnerpcpsts (p_memberid      number,
2305  				      p_supplierid    number,
2306  				      p_datasource    varchar2)
2307  	    RETURN varchar2
2308  	 IS
2309  	    ln_supplierid	   MEMBER.ahmsupplierid%TYPE;
2310  	    lv_processmodecd	   insuranceorganization.processingmodecd%TYPE;
2311  	    lv_pcpdatasourcenm	   supplierorganization.pcpdatasourcenm%TYPE;
2312  	    lv_provassignationcd   supplierorganization.providerassignationcd%TYPE;
2313  	    ln_prccount 	   number;
2314  	 BEGIN
2315  	    IF (p_supplierid IS NULL)
2316  	    THEN
2317  	       SELECT	io.processingmodecd, m.ahmsupplierid
2318  		 INTO	lv_processmodecd, ln_supplierid
2319  		 FROM	insuranceorganization io,
2320  			insuranceorgsupplierrelation iosr,
2321  			supplierorganization so,
2322  			MEMBER m
2323  		WHERE	    io.insuranceorgid = iosr.insuranceorgid
2324  			AND so.supplierorgid = iosr.supplierid
2325  			AND so.ahmsupplierid = m.ahmsupplierid
2326  			AND m.memberid = p_memberid;
2327  
2328  	       /*select io.processingmodecd
2329  									 into lv_processmodecd
2330  		from insuranceorganization io, insuranceorgsupplierrelation iosr
2331  	       where io.insuranceorgid = iosr.insuranceorgid
2332  		 and iosr.supplierid =
2333  		     (select so.supplierorgid
2334  			from supplierorganization so
2335  		       where so.ahmsupplierid = (select m.ahmsupplierid
2336  		from member m
2337  	       where m.memberid = p_memberid));*/
2338  	       IF (lv_processmodecd = 'H')
2339  	       THEN
2340  		  SELECT   lbs.lastbusinessahmsupplierid
2341  		    INTO   ln_supplierid
2342  		    FROM   ahmmrnbusinesssupplier lbs
2343  		   WHERE   lbs.ahmmrnmemberid = p_memberid;
2344  	       END IF;
2345  	    ELSE
2346  	       ln_supplierid := p_supplierid;
2347  	    END IF;
2348  
2349  	    SELECT   so.pcpdatasourcenm, so.providerassignationcd
2350  	      INTO   lv_pcpdatasourcenm, lv_provassignationcd
2351  	      FROM   supplierorganization so
2352  	     WHERE   so.ahmsupplierid = ln_supplierid;
2353  
2354  	    IF (lv_provassignationcd <> 'PCP')
2355  	    THEN
2356  	       RETURN 'N';
2357  	    END IF;
2358  
2359  	    IF (lv_pcpdatasourcenm = 'ALL')
2360  	    THEN
2361  	       RETURN 'Y';
2362  	    ELSIF (lv_pcpdatasourcenm = 'PRC')
2363  	    THEN
2364  	       SELECT	COUNT (1)
2365  		 INTO	ln_prccount
2366  		 FROM	ahmmrnsupplierprecedencerule pr
2367  		WHERE	pr.ahmsupplierid = ln_supplierid
2368  			AND pr.precedencerulebasismnemonic LIKE
2369  			      'PCPPRC%' || p_datasource || '%';
2370  
2371  	       IF ln_prccount > 0
2372  	       THEN
2373  		  RETURN 'Y';
2374  	       ELSE
2375  		  RETURN 'N';
2376  	       END IF;
2377  	    ELSE
2378  	       RETURN 'N';
2379  	    END IF;
2380  	 EXCEPTION
2381  	    WHEN OTHERS
2382  	    THEN
2383  	       log_error ('FCHECKWINNERPCPSTS',
2384  			  p_memberid,
2385  			  SQLCODE,
2386  			  SQLERRM,
2387  			  SYSDATE,
2388  			  NULL);
2389  	       RETURN 'N';					    -- need to check
2390  	 END fcheckwinnerpcpsts;
2391  
2392  	 PROCEDURE raise_error (p_errcode_in IN number, p_errmsg_in IN varchar2)
2393  	 IS
2394  	    ln_dummy   varchar2 (1);
2395  	 BEGIN
2396  	    -- check if the errorcode passed is one of the retry error codes.
2397  	    SELECT   'Y'
2398  	      INTO   ln_dummy
2399  	      FROM   refservicefilterlkup
2400  	     WHERE	 servicenm = 'RETRYERRORCODES'
2401  		     AND datasourcenm = 'HIE'
2402  		     AND lkupstring = 'RETRYERRORCODES'
2403  		     AND lkupvalue = p_errcode_in;
2404  
2405  	    raise_application_error (-20899, p_errcode_in || p_errmsg_in);
2406  	 EXCEPTION
2407  	    WHEN OTHERS
2408  	    THEN
2409  	       IF p_errcode_in BETWEEN -20999 AND -20001
2410  	       THEN
2411  		  raise_application_error (p_errcode_in, p_errmsg_in);
2412  	       ELSE
2413  		  raise_application_error (-20001, p_errmsg_in);
2414  	       END IF;
2415  	 END raise_error;
2416  
2417  	 PROCEDURE resetchkpt
2418  	 IS
2419  	 BEGIN
2420  	    ods_core.gt_start := NULL;
2421  	    ods_core.gt_chk1 := NULL;
2422  	    ods_core.gt_chk2 := NULL;
2423  	    ods_core.gt_chk3 := NULL;
2424  	    ods_core.gt_chk4 := NULL;
2425  	    ods_core.gt_chk5 := NULL;
2426  	    ods_core.gt_chk6 := NULL;
2427  	    ods_core.gt_chk7 := NULL;
2428  	    ods_core.gt_chk8 := NULL;
2429  	    ods_core.gt_chk9 := NULL;
2430  	    ods_core.gt_chk10 := NULL;
2431  	    ods_core.gt_chk11 := NULL;
2432  	    ods_core.gt_chk12 := NULL;
2433  	    ods_core.gt_chk13 := NULL;
2434  	    ods_core.gt_chk14 := NULL;
2435  	    ods_core.gt_chk15 := NULL;
2436  	    ods_core.gt_chk16 := NULL;
2437  	    ods_core.gt_chk17 := NULL;
2438  	    ods_core.gt_chk18 := NULL;
2439  	    ods_core.gt_chk19 := NULL;
2440  	    ods_core.gt_chk20 := NULL;
2441  	 END resetchkpt;
2442  
2443  	 FUNCTION fget_acteligibilityflg (
2444  	    pn_supplierid_in   IN supplierorganization.ahmsupplierid%TYPE
2445  	 )
2446  	    RETURN varchar2
2447  	 AS
2448  	    vflag   varchar2 (10);
2449  	 BEGIN
2450  	    SELECT   'Y'
2451  	      INTO   vflag
2452  	      FROM   ods.supplierorganization so, ods.supplierproductrelation spr
2453  	     WHERE	 spr.supplierorgid = so.supplierorgid
2454  		     AND so.ahmsupplierid = pn_supplierid_in
2455  		     AND spr.productcd = 'ACT'
2456  		     AND (spr.productterminationdt IS NULL
2457  			  OR spr.productterminationdt >= SYSDATE)
2458  		     AND ROWNUM < 2;
2459  
2460  	    RETURN vflag;
2461  	 EXCEPTION
2462  	    WHEN OTHERS
2463  	    THEN
2464  	       RETURN 'N';
2465  	 END fget_acteligibilityflg;
2466  
2467  	 FUNCTION fgetdodformember (pn_memberplanid_in IN number)
2468  	    RETURN date
2469  	 AS
2470  	    lv_deceaseddt   date;
2471  	 BEGIN
2472  	    SELECT   MAX (pe.deceaseddt)
2473  			KEEP (DENSE_RANK FIRST ORDER BY pe.updateddt DESC)
2474  	      INTO   lv_deceaseddt
2475  	      FROM   personext pe, MEMBER m
2476  	     WHERE	 m.primarymemberplanid = pn_memberplanid_in
2477  		     AND m.ahmsupplierid <> 0
2478  		     AND pe.personid = m.personid
2479  		     AND ( (pe.deceasedflg = 'Y'
2480  			    AND pe.createdbydatasourcenm = 'CT')
2481  			  OR (pe.deceasedflg = 'Y'
2482  			      AND pe.createdbydatasourcenm <> 'CT'
2483  			      AND NOT EXISTS
2484  				    (SELECT   1
2485  				       FROM   ods.personext pe1
2486  				      WHERE   pe1.personid = pe.personid
2487  					      AND pe1.createdbydatasourcenm = 'CT'))
2488  	    )
2489  		     AND pe.deceaseddt IS NOT NULL;
2490  
2491  	    RETURN lv_deceaseddt;
2492  	 EXCEPTION
2493  	    WHEN OTHERS
2494  	    THEN
2495  	       RETURN NULL;
2496  	 END fgetdodformember;
2497  
2498  	 PROCEDURE sp_debuglog (p_procedurename IN varchar2, p_text IN varchar2)
2499  	 IS
2500  	    PRAGMA AUTONOMOUS_TRANSACTION;
2501  	 BEGIN
2502  	    INSERT INTO debuglog (procedurename, debugtext, runtime)
2503  	      VALUES   (p_procedurename, p_text, SYSTIMESTAMP);
2504  
2505  	    COMMIT;
2506  	 END sp_debuglog;
2507  
2508  	 FUNCTION fchkaccount (memberid_in IN number, accountid_in IN number)
2509  	    RETURN varchar2
2510  	 AS
2511  	    vflag   varchar2 (5);
2512  	 BEGIN
2513  	    SELECT   'Y'
2514  	      INTO   vflag
2515  	      FROM   MEMBER mbr,
2516  		     supplierorganization so,
2517  		     insuranceorgsupplierrelation iosr
2518  	     WHERE	 mbr.memberid = memberid_in
2519  		     AND mbr.ahmsupplierid = so.ahmsupplierid
2520  		     AND so.supplierorgid = iosr.supplierid
2521  		     AND iosr.insuranceorgid = accountid_in;
2522  
2523  	    RETURN vflag;
2524  	 EXCEPTION
2525  	    WHEN OTHERS
2526  	    THEN
2527  	       BEGIN
2528  		  SELECT   'Y'
2529  		    INTO   vflag
2530  		    FROM   MEMBER mbr,
2531  			   ods.attributedmember ats,
2532  			   vw_project_account_rel par
2533  		   WHERE       mbr.memberid = memberid_in
2534  			   AND ats.memberid = mbr.memberid
2535  			   AND ats.projectid = par.projectid
2536  			   AND par.accountid = accountid_in
2537  			   AND ats.effectiveenddt IS NULL
2538  			   AND ROWNUM < 2;
2539  
2540  		  RETURN vflag;
2541  	       EXCEPTION
2542  		  WHEN OTHERS
2543  		  THEN
2544  		     RETURN 'N';
2545  	       END;
2546  	 END fchkaccount;
2547  
2548  	 FUNCTION fchecklbsforwinnerpcp (
2549  	    p_accountid 		   insuranceorganization.insuranceorgid%TYPE
2550  	    ,
2551  	    p_lastbusinessahmsupplierid    ahmmrnbusinesssupplier.
2552  	    lastbusinessahmsupplierid%TYPE,
2553  	    p_vendorsourcenm		   ahmmrnsupplierprecedencerule.
2554  	    vendorsourcenm%TYPE,
2555  	    p_clinicaldoctypemnemonic	   ahmmrnsupplierprecedencerule.
2556  	    clinicaldoctypemnemonic%TYPE
2557  	 )
2558  	    RETURN varchar2
2559  	 IS
2560  	    lv_returnvalue   varchar2 (1);
2561  	 BEGIN
2562  	    SELECT   'Y'
2563  	      INTO   lv_returnvalue
2564  	      FROM   ahmmrnsupplierprecedencerule
2565  	     WHERE	 accountid = p_accountid
2566  		     AND vendorsourcenm = p_vendorsourcenm
2567  		     AND clinicaldoctypemnemonic = p_clinicaldoctypemnemonic
2568  		     AND precedencerulebasismnemonic LIKE 'PCP%'
2569  		     AND ahmsupplierid = p_lastbusinessahmsupplierid;
2570  
2571  	    RETURN lv_returnvalue;
2572  	 EXCEPTION
2573  	    WHEN OTHERS
2574  	    THEN
2575  	       RETURN 'N';
2576  	 END fchecklbsforwinnerpcp;
2577  
2578  	 PROCEDURE getmemberlist (
2579  	    p_seq		    IN		  number,
2580  	    p_memberplanidlist_in   IN		  table_memberid,
2581  	    p_processingmodecd	    IN		  varchar2,
2582  	    p_returncode_out	       OUT NOCOPY number
2583  	 )
2584  	 IS
2585  	    lv_txn_seq		  number;
2586  	    lv_memberid 	  number;
2587  	    lv_return_code	  number;
2588  	    lv_processingmodecd   varchar2 (1);
2589  	 BEGIN
2590  	    lv_return_code := ct_core.ferrorcodesct ('CT', 'SUCCESSFUL');
2591  	    lv_processingmodecd := p_processingmodecd;
2592  
2593  	    --delete from global_ct_temp_member_list;
2594  	    EXECUTE IMMEDIATE 'Truncate table global_ct_temp_member_list';
2595  
2596  	    ---select transaction_seq.nextval into lv_txn_seq from dual;
2597  
2598  	    IF (lv_processingmodecd = 'H')
2599  	    THEN
2600  	       INSERT INTO global_ct_temp_member_list (transactionseq,
2601  						       mastermemberid,
2602  						       mastermemberplanid,
2603  						       mastermbrclpatid,
2604  						       mastermbrissorgid,
2605  						       ahmmrnmemberid,
2606  						       ahmmrnmemberplanid,
2607  						       ahmmrnclpatid,
2608  						       ahmmrnissorgid,
2609  						       memberid,
2610  						       memberplanid,
2611  						       memberclpatid,
2612  						       memberissorgid,
2613  						       memberaggregate)
2614  		  SELECT   p_seq seq_no,
2615  			   ma.mastermemberid,
2616  			   NULL mastermemberplanid,
2617  			   NULL mastermbrclpatid,
2618  			   NULL mastermbrissorgid,
2619  			   ma.ahmmrnmemberid localmrnmemberid,
2620  			   primarymemberplanid AS localmrnmemberplanid,
2621  			   NULL localmrnclpatid,
2622  			   NULL localmrnissorgid,
2623  			   ma.memberid,
2624  			   ct_core.fgetref ('MEMBERPLANID', ma.memberid, 'CLPATID')
2625  			      mbrplanid,
2626  			   -- added nvl(<>,0) for clpatid and issorgid. 6/28/11
2627  			   ct_core.fgetref ('PATID', ma.memberid, 'CLPATID') patid,
2628  			   ct_core.fgetref ('ISSORGID', ma.memberid, 'CLPATID')
2629  			      issorgid,
2630  			   'Y' agg_flag
2631  		    FROM   memberaggregation ma, MEMBER m
2632  		   WHERE   m.primarymemberplanid IN
2633  				 (SELECT   * FROM table (p_memberplanidlist_in))
2634  			   AND ma.ahmmrnmemberid = m.memberid
2635  			   AND ma.effectiveenddt IS NULL;
2636  	    END IF;
2637  
2638  	    IF (lv_processingmodecd = 'P')
2639  	    THEN
2640  	       INSERT INTO global_ct_temp_member_list (transactionseq,
2641  						       mastermemberid,
2642  						       mastermemberplanid,
2643  						       mastermbrclpatid,
2644  						       mastermbrissorgid,
2645  						       ahmmrnmemberid,
2646  						       ahmmrnmemberplanid,
2647  						       ahmmrnclpatid,
2648  						       ahmmrnissorgid,
2649  						       memberid,
2650  						       memberplanid,
2651  						       memberclpatid,
2652  						       memberissorgid,
2653  						       memberaggregate)
2654  		  SELECT   p_seq AS seq_no,
2655  			   mbr.memberid AS mastermemberid,
2656  			   NULL AS mastermemberplanid,
2657  			   NULL AS mastermbrclpatid,
2658  			   NULL AS mastermbrissorgid,
2659  			   mbr.memberid localmrnmemberid,
2660  			   primarymemberplanid AS localmrnmemberplanid,
2661  			   NULL localmrnclpatid,
2662  			   NULL localmrnissorgid,
2663  			   mbr.memberid,
2664  			   TO_CHAR (mbr.primarymemberplanid) AS mbrplanid,
2665  			   ct_core.fgetref ('PATID', mbr.memberid, 'CLPATID')
2666  			      AS patid,
2667  			   ct_core.fgetref ('ISSORGID', mbr.memberid, 'CLPATID')
2668  			      AS issorgid,
2669  			   'N' AS agg_flag
2670  		    FROM   MEMBER mbr
2671  		   WHERE   mbr.primarymemberplanid IN
2672  				 (SELECT   * FROM table (p_memberplanidlist_in));
2673  	    END IF;
2674  
2675  	   <<finish>>
2676  	    p_returncode_out := lv_return_code;
2677  	 END getmemberlist;
2678  
2679  	 FUNCTION checkproductforsupplier (
2680  	    p_ahmsupplierid   IN supplierorganization.ahmsupplierid%TYPE,
2681  	    p_productcd       IN supplierproductrelation.productcd%TYPE
2682  	 )
2683  	    RETURN varchar2
2684  	 IS
2685  	    lv_returnvalue   varchar2 (1);
2686  	 BEGIN
2687  	    SELECT   'Y'
2688  	      INTO   lv_returnvalue
2689  	      FROM   supplierorganization so, supplierproductrelation spr
2690  	     WHERE	 spr.supplierorgid = so.supplierorgid
2691  		     AND spr.productcd = p_productcd
2692  		     AND so.ahmsupplierid = p_ahmsupplierid
2693  		     AND (spr.productterminationdt IS NULL
2694  			  OR spr.productterminationdt >= SYSDATE);
2695  
2696  	    RETURN lv_returnvalue;
2697  	 EXCEPTION
2698  	    WHEN OTHERS
2699  	    THEN
2700  	       RETURN 'N';
2701  	 END checkproductforsupplier;
2702  
2703  	 FUNCTION fgetmemberemailaddress (pn_memberplanid_in IN number)
2704  	    RETURN number
2705  	 IS
2706  	    ln_emailskey   number;
2707  	    lv_emailconsentflg ods.supplierorganization.emailconsentflg%TYPE;
2708  	 BEGIN
2709  	      SELECT emailid
2710  		      INTO ln_emailskey
2711  		      FROM (
2712  				      SELECT pea.partyid,
2713  					      pea.emailid,
2714  								pea.emailaddr,
2715  								ROW_NUMBER () --  get the latest email addresss
2716  								OVER (
2717  									      PARTITION BY pea.partyid
2718  									      ORDER BY
2719  									      CASE
2720  										      WHEN pea.updtdatasourcenm IN ('PHR_UE','AA')
2721  										      THEN
2722  											      'A'
2723  										      ELSE
2724  											      'B'
2725  									      END ASC
2726  								      ) email_rn
2727  						       FROM ods.partyemailaddress pea, ods.member m
2728  						      WHERE pea.partyid = m.personid
2729  						      AND m.primarymemberplanid = pn_memberplanid_in
2730  				      ) WHERE email_rn = 1;
2731  		      RETURN ln_emailskey;
2732  	      /*
2733  
2734  	    SELECT   p1.emailid
2735  	      INTO   ln_emailskey
2736  	      FROM   ods.MEMBER m1, ods.partyemailaddress p1
2737  	     WHERE	 m1.primarymemberplanid = pn_memberplanid_in
2738  		     AND m1.ahmsupplierid <> 0
2739  		     AND m1.personid = p1.partyid
2740  		     AND p1.emailpreferenceflg = 'Y'
2741  		     AND p1.createdbydatasourcenm IN ('PHR_UE', 'AA','HDMS') -- US101550
2742  		     AND p1.updtdatasourcenm IN ('PHR_UE', 'AA','HDMS','COMMENG')  -- US101550,US113391
2743  		     AND p1.deletedbydatasourcenm IS NULL
2744  				 AND NOT EXISTS
2745  					      (SELECT 1
2746  					      FROM ods.partyemailaddress p2
2747  					      WHERE m1.personid 		 = p2.partyid
2748  					      AND NVL(p2.emailpreferenceflg,'Y') = 'N'
2749  					      AND p2.deletedbydatasourcenm IS NULL
2750  					      ) --US113391 added to remove supplier override member preference
2751  		     AND ROWNUM = 1;
2752  	    RETURN ln_emailskey;
2753  	 EXCEPTION
2754  	     WHEN NO_DATA_FOUND THEN  -- US86154
2755  	    BEGIN
2756  		  SELECT NVL(emailconsentflg,'N')
2757  		  INTO lv_emailconsentflg
2758  		  FROM ods.supplierorganization so, ods.MEMBER m1
2759  		  WHERE m1.primarymemberplanid = pn_memberplanid_in
2760  		   AND so.ahmsupplierid = m1.ahmsupplierid;
2761  		   IF lv_emailconsentflg ='Y' THEN
2762  		     SELECT   p1.emailid
2763  		     INTO   ln_emailskey
2764  		     FROM   ods.MEMBER m1, ods.partyemailaddress p1
2765  		     WHERE   m1.primarymemberplanid = pn_memberplanid_in
2766  			 AND m1.personid = p1.partyid
2767  			 AND p1.createdbydatasourcenm = 'HDMS'
2768  			 AND p1.deletedbydatasourcenm IS NULL
2769  			 AND NOT EXISTS (SELECT 1 FROM ods.partyemailaddress p1
2770  					 WHERE	m1.personid = p1.partyid
2771  						AND NVL(p1.emailpreferenceflg,'Y') =
2772  	    'N')
2773  			 AND ROWNUM = 1;
2774  
2775  			  END IF;
2776  			   RETURN ln_emailskey;
2777  			  EXCEPTION
2778  			     WHEN NO_DATA_FOUND  THEN
2779  			       ln_emailskey := NULL;
2780  			  RETURN ln_emailskey;
2781  			   END; */
2782  EXCEPTION
2783  	 WHEN OTHERS
2784  	    THEN
2785  	       ln_emailskey := NULL;
2786  	       RETURN ln_emailskey;
2787  	 END fgetmemberemailaddress;
2788  
2789  	FUNCTION fgetyearqtr  (pd_date_in IN date)
2790  	    RETURN number
2791  	 AS
2792  	    ln_fyearqtr   number;
2793  	 BEGIN
2794  	    SELECT   TO_CHAR (pd_date_in, 'YYYYQ')
2795  	      INTO   ln_fyearqtr
2796  	      FROM   DUAL;
2797  
2798  	    RETURN ln_fyearqtr;
2799  	 END fgetyearqtr;
2800  
2801  	 -- to get previous 4th quarter
2802  	 FUNCTION fgetpreviousyearqtr  (pd_date_in IN date)
2803  	    RETURN number
2804  	 AS
2805  	  --( ex current quarter  20162 then  previous quarter	20153)
2806  	    ln_fyearqtr   number;
2807  	 BEGIN
2808  	    SELECT   TO_CHAR (ADD_MONTHS(pd_date_in,-9),'YYYYQ')
2809  	      INTO   ln_fyearqtr
2810  	      FROM   DUAL;
2811  
2812  	    RETURN ln_fyearqtr;
2813  	 END fgetpreviousyearqtr;
2814  
2815  
2816   FUNCTION fgetmastersupplierid (
2817  	  pn_memberid_in	      IN ods.MEMBER.memberid%TYPE DEFAULT NULL ,
2818  	  pn_primarymemberplanid_in   IN ods.MEMBER.primarymemberplanid%TYPE DEFAULT
2819  	    NULL,
2820  	  pn_supplierid_in	      IN ods.MEMBER.ahmsupplierid%TYPE DEFAULT NULL
2821  	    -- supplierid for 'p' ,businesssupplierid for 'h' acct
2822   )
2823  	  RETURN number RESULT_CACHE
2824   AS
2825  	  /****************************************************************************
2826  		  date		      description	  version      author																							 date		     description	 version
2827  		  6/23/2016		 to get masstersupplierid      1.0   chitra
2828  		*****************************************************************************/
2829  	  ln_mastersupplierid	ods.mastersuppliersupplierrelation.mastersupplierid%
2830  	    TYPE;
2831  	  ln_ahmmrnmemberid	ods.memberaggregation.ahmmrnmemberid%TYPE;
2832  	  lv_processingmodecd	varchar2 (2);
2833  	  ln_ahmsupplierid	ods.MEMBER.ahmsupplierid%TYPE;
2834   BEGIN
2835  	  IF pn_supplierid_in IS NULL
2836  	  AND (pn_memberid_in IS NOT NULL
2837  	    OR pn_primarymemberplanid_in IS NOT NULL)
2838  	  THEN
2839  
2840  	    IF pn_memberid_in IS NOT NULL THEN
2841  	       SELECT	ahmsupplierid
2842  		 INTO	ln_ahmsupplierid
2843  		 FROM	ods.MEMBER
2844  		WHERE	memberid = pn_memberid_in
2845  		AND ahmsupplierid <>0;
2846  	     ELSIF    pn_primarymemberplanid_in IS NOT NULL
2847  	      THEN
2848  	       SELECT	ahmsupplierid
2849  		 INTO	ln_ahmsupplierid
2850  		 FROM	ods.MEMBER
2851  		WHERE	primarymemberplanid = pn_primarymemberplanid_in
2852  		AND ahmsupplierid <>0;
2853  	     END IF;
2854  
2855  	  -- check 'h' or 'p' acct
2856  	  SELECT   processingmodecd
2857  	 INTO	lv_processingmodecd
2858  	 FROM	vw_project_account_rel
2859  	   WHERE   ahmsupplierid = ln_ahmsupplierid;
2860  
2861  	  IF lv_processingmodecd = 'H'	-- if 'h' acct then get businesssupplierid
2862  	  THEN
2863  	  BEGIN
2864  	  SELECT   lastbusinessahmsupplierid
2865  	    INTO   ln_ahmsupplierid
2866  	    FROM   ods.ahmmrnbusinesssupplier
2867  	   WHERE   ahmmrnmemberid IN
2868  		(SELECT   ahmmrnmemberid
2869  		FROM   ods.memberaggregation
2870  	       WHERE   memberid = pn_memberid_in
2871  		 AND effectiveenddt IS NULL);
2872  	  EXCEPTION
2873  	  WHEN OTHERS
2874  	  THEN
2875  	     NULL;
2876  	  END;
2877  	  END IF;			    -- end of if lv_processingmodecd = 'h'
2878  	  ELSE
2879  	  ln_ahmsupplierid := pn_supplierid_in;
2880  	  END IF;
2881  	    -- end of	if pn_supplierid_in is null
2882  
2883  	  SELECT   mastersupplier
2884  	 INTO	ln_mastersupplierid
2885  	 FROM	vw_projectsupplier
2886  	WHERE  supplier = ln_ahmsupplierid;
2887  
2888  	  RETURN ln_mastersupplierid;
2889   EXCEPTION
2890  	  WHEN OTHERS
2891  	  THEN
2892  	  RETURN NULL;
2893   END fgetmastersupplierid;
2894  
2895  	 PROCEDURE seterrorinfo (pv_prcoessnm	 IN varchar2 DEFAULT NULL,
2896  			      pv_parameter1   IN varchar2 DEFAULT NULL,
2897  			      pv_parameter2   IN varchar2 DEFAULT NULL,
2898  			      pv_parameter3   IN varchar2 DEFAULT NULL,
2899  			      pv_parameter4   IN varchar2 DEFAULT NULL,
2900  			      pv_parameter5   IN varchar2 DEFAULT NULL,
2901  			      pv_comments     IN varchar2 DEFAULT NULL,
2902  			      pv_errormsg     IN varchar2 DEFAULT NULL)
2903   IS
2904  	  PRAGMA AUTONOMOUS_TRANSACTION;
2905   BEGIN
2906  	  INSERT INTO odserrorlog (err_seq,
2907  	      processnm,
2908  	      parameter1,
2909  	      parameter2,
2910  	      parameter3,
2911  	      parameter4,
2912  	      parameter5,
2913  	      parameter_comments,
2914  	      errormsg,
2915  	      insertdt)
2916  	  SELECT   error_seq.NEXTVAL,
2917  	     pv_prcoessnm,
2918  	     pv_parameter1,
2919  	     pv_parameter2,
2920  	     pv_parameter3,
2921  	     pv_parameter4,
2922  	     pv_parameter5,
2923  	     pv_comments,
2924  	     pv_errormsg,
2925  	     SYSTIMESTAMP
2926  	 FROM	DUAL;
2927  
2928  	  COMMIT;
2929   EXCEPTION
2930  	  WHEN OTHERS
2931  	  THEN
2932  	  NULL;
2933   END seterrorinfo;
2934  
2935  FUNCTION fgetmemberarchivepersistflg (pn_memberid IN number) RETURN
2936  	    varchar2 IS
2937  	  lv_flg char(1);
2938   BEGIN
2939  	  SELECT archpersistflg
2940  	   INTO lv_flg
2941  	  FROM careenginememberprocessstatus
2942  	WHERE memberid = pn_memberid;
2943  
2944  	RETURN lv_flg;
2945  
2946  	EXCEPTION
2947  	WHEN NO_DATA_FOUND  THEN
2948  	  RETURN 'Y';
2949  	WHEN OTHERS THEN
2950  	  RETURN 'N';
2951  END fgetmemberarchivepersistflg;
2952  PROCEDURE updateincvrunprocessstatus (
2953  	 pn_memberid_in   IN number,
2954  	 pv_incvflag_in   IN varchar2,
2955  	 pt_lastauditdate_in IN timestamp,
2956  	 p_errorcode_out       OUT number,
2957  	 p_errormsg_out       OUT varchar2
2958  ) AS
2959  	 PRAGMA AUTONOMOUS_TRANSACTION;
2960  BEGIN
2961  
2962  	 IF pv_incvflag_in ='Y' THEN
2963  	    UPDATE   ods.careenginememberprocessstatus
2964  	       SET   incvrunflgupddt = SYSTIMESTAMP,
2965  		     updtdby = USER,
2966  		     incvrunflg = pv_incvflag_in
2967  	     WHERE   memberid = pn_memberid_in		;
2968  
2969  	       p_errorcode_out	   := 0;
2970  	       p_errormsg_out	    := 'Success';
2971  	  ELSIF pv_incvflag_in ='N' THEN
2972  	     UPDATE   ods.careenginememberprocessstatus
2973  		SET   incvrunflgupddt = SYSTIMESTAMP,
2974  		      updtdby = USER,
2975  		      incvrunflg = pv_incvflag_in
2976  	       WHERE   memberid = pn_memberid_in
2977  	       --AND NVL(incvrunflg,'Y') ='Y'
2978  	       AND NVL(incvrunflgupddt,pt_lastauditdate_in) <= pt_lastauditdate_in;
2979  
2980  	       IF sql%ROWCOUNT =0 THEN
2981  		 p_errorcode_out     := -2;
2982  		 p_errormsg_out       :=
2983  	    'Warning ! Member Last Incv update date may be different' ;
2984  	       ELSE
2985  		  p_errorcode_out     := 0;
2986  		  p_errormsg_out       := 'Success';
2987  	       END IF;
2988  
2989  	  END IF;
2990  
2991  
2992  
2993  
2994  	 COMMIT;
2995  EXCEPTION
2996  	 WHEN OTHERS
2997  	 THEN
2998  	   log_error ('UPDATEINCVRUNPROCESSSTATUS',
2999  		       pn_memberid_in,
3000  		       SQLCODE,
3001  		       SQLERRM,
3002  		       SYSDATE,
3003  		       NULL);
3004  	p_errorcode_out     := -1;
3005  	 p_errormsg_out       := SUBSTR(SQLERRM,1,2000);
3006  
3007  END updateincvrunprocessstatus;
3008  
3009  PROCEDURE  getincvrunprocessstatus (
3010  	 pn_memberid_in   IN number,
3011  	 pv_runflag_out OUT varchar2,
3012  	 pt_lastupddt_out OUT timestamp
3013  )
3014  IS
3015  BEGIN
3016  
3017  	 SELECT NVL(incvrunflg,'Y'),NVL(incvrunflgupddt,SYSTIMESTAMP)
3018  	   INTO pv_runflag_out,pt_lastupddt_out
3019  	   FROM ods.careenginememberprocessstatus
3020  	  WHERE memberid = pn_memberid_in;
3021  
3022  
3023  EXCEPTION
3024  	 WHEN OTHERS THEN
3025  	    pv_runflag_out := 'N';
3026  	    pt_lastupddt_out := NULL;
3027  END getincvrunprocessstatus;
3028  
3029  FUNCTION fGetaccountstatus(
3030  	  Pn_insuranceorgid_in		    IN ods.insuranceorganization.
3031  	    insuranceorgid%
3032  	    TYPE
3033   )
3034  	  RETURN VARCHAR2  RESULT_CACHE
3035  
3036  AS
3037  	ln_productcount  NUMBER;
3038   BEGIN
3039  	   SELECT   COUNT(1) INTO   ln_productcount
3040  		      FROM   ods.VW_PROJECT_ACCOUNT_REL par,
3041  				    ods.supplierproductrelation spr
3042  			    WHERE     spr.supplierorgid = par.supplierorgid
3043  				    AND par.accountid  = Pn_insuranceorgid_in
3044  				    AND (productterminationdt IS NULL
3045  					 OR productterminationdt > TRUNC (SYSDATE));
3046  
3047  	IF ln_productcount  > 0 THEN
3048  	       RETURN  'A';   -- Active
3049  	  ELSE
3050  	       RETURN  'T'; -- Termed
3051  END IF;
3052  
3053  EXCEPTION
3054  	  WHEN OTHERS THEN
3055  		RETURN	 NULL;
3056  END fGetaccountstatus;
3057  
3058  
3059  FUNCTION fgetdatashareconsentflg (pn_ahmsupplierid_in NUMBER)
3060  	RETURN VARCHAR2
3061  	AS
3062  	   lv_datashareconsentflg varchar2(1);
3063  	BEGIN
3064  
3065  	      SELECT  NVL(datashareconsentflg,(SELECT LKUPVALUE
3066  									      FROM REFSERVICEFILTERLKUP
3067  									      WHERE LKUPSTRING = 'NULLVALUE'
3068  									      AND SERVICENM    = 'DATASHARECONSENTFLG'
3069  									      ))
3070  		  INTO lv_datashareconsentflg
3071  		  FROM ODS.supplierorganization
3072  	      WHERE ahmsupplierid = pn_ahmsupplierid_in;
3073  	      RETURN lv_datashareconsentflg;
3074  	  EXCEPTION
3075  	      WHEN OTHERS THEN
3076  		  RETURN  NULL;
3077  	END fgetdatashareconsentflg;
3078  
3079   PROCEDURE getpersonaggregatemembers (
3080  	 memberid_in	    IN	   NUMBER,
3081  	 ahmsupplierid_in   IN	   NUMBER,
3082  	 memberid_obj_out      OUT table_memberid,
3083  	 errorcode	       OUT NUMBER,
3084  	 personviewflg_in  IN  VARCHAR2 DEFAULT  'N'
3085  )
3086  AS
3087  	 --
3088  	 --******************************************************************************
3089  	 --$Workfile:	sp_getaggregatemembersforphr.sql  $ (File name)
3090  	 --$Author:   MThiagarajan  $ (Last modified user)
3091  	 --$Modtime:   18 Jun 2013 $ (Last modified time)
3092  	 --$Revision:	1.1 (Revision number)
3093  	 --Owner:  ODS
3094  	 ---Mantis 27275
3095  	 --******************************************************************************
3096  	 --
3097   vprocessingmodecd   insuranceorganization.processingmodecd%TYPE;
3098   lv_datashareconsentflg	supplierorganization.datashareconsentflg %TYPE;
3099   ln_aggregatememberid  personaggregation.aggregatememberid%TYPE;
3100  BEGIN
3101  
3102   IF   personviewflg_in = 'N' THEN
3103  	     getaggregatemembersforphr_esb (memberid_in,
3104  				       ahmsupplierid_in,
3105  				       memberid_obj_out,
3106  				       errorcode);
3107  	 ELSE
3108  	    BEGIN   -- Personview starts
3109  
3110  		SELECT aggregatememberid INTO ln_aggregatememberid
3111  		      FROM  ods.personaggregation  m
3112  		     WHERE  m.memberid = memberid_in
3113  		       AND m.effectiveenddt IS NULL
3114  				       AND ROWNUM = 1;
3115  
3116  		  SELECT   memberid
3117  	      BULK COLLECT INTO   memberid_obj_out
3118  		  FROM	 (SELECT   a.memberid
3119  		      FROM   ods.personaggregation A,
3120  			     ods.MEMBER M
3121  		     WHERE	 m.memberid = A.MEMBERID
3122  			   AND A.effectiveenddt IS NULL
3123  			     AND A.aggregatememberid = ln_aggregatememberid
3124  			     AND A.AGGREGATEMEMBERID <> A.MEMBERID
3125  			     AND ods.ods_common_pkg.fgetdatashareconsentflg(pn_ahmsupplierid_in => M.AHMSUPPLIERID )='Y'
3126  		    UNION
3127  			SELECT	memberid_in FROM DUAL);
3128  		  EXCEPTION
3129  		     WHEN NO_DATA_FOUND THEN
3130  			SELECT	 memberid_in
3131  				    BULK COLLECT INTO	memberid_obj_out
3132  					  FROM	 DUAL;
3133  	       END;  -- Personview Ends
3134  		errorcode := 0;
3135  	 END IF ;  -- personviewflg_in = 'N'
3136  
3137  	<<FINISH>>
3138  	 NULL;
3139  EXCEPTION
3140  	 WHEN OTHERS
3141  	 THEN
3142  	    errorcode := 1;
3143  END getpersonaggregatemembers;
3144  
3145   FUNCTION fgetpersonaggregateid(
3146  	 memberid_in	    IN	   NUMBER
3147  )
3148  	RETURN NUMBER
3149  AS
3150  	ln_aggregatememberid	 personaggregation.aggregatememberid%TYPE;
3151  
3152  BEGIN
3153  	     SELECT aggregatememberid INTO ln_aggregatememberid
3154  		      FROM  ods.personaggregation  m
3155  		  WHERE  m.memberid = memberid_in
3156  			AND m.effectiveenddt IS NULL
3157  					AND ROWNUM  = 1;
3158  	 RETURN ln_aggregatememberid;
3159  	    EXCEPTION
3160  		   WHEN NO_DATA_FOUND THEN
3161  		      RETURN NULL;
3162  END fgetpersonaggregateid;
3163  
3164  
3165  FUNCTION fgetpersonviewflg
3166  	RETURN VARCHAR2
3167  
3168   AS
3169  lv_LKUPVALUE  REFSERVICEFILTERLKUP.LKUPVALUE%TYPE;
3170  BEGIN
3171  	  SELECT LKUPVALUE INTO lv_LKUPVALUE FROM REFSERVICEFILTERLKUP
3172  		      WHERE LKUPSTRING = 'PERSONVIEWENABLEFLG'
3173  					       AND SERVICENM = 'PERSONVIEW';
3174  
3175  RETURN lv_LKUPVALUE ;
3176  EXCEPTION
3177  	 WHEN NO_DATA_FOUND THEN
3178  	 RETURN 'N';
3179  END fgetpersonviewflg;
3180  
3181  
3182   FUNCTION fgetdatashareconsentformember (memberid_in IN NUMBER DEFAULT NULL,
3183  					     memberplanid_in IN NUMBER	DEFAULT NULL)
3184  	  RETURN VARCHAR2
3185  	      AS
3186  	      lv_datashareconsentflg  varchar2(1);
3187  
3188  	BEGIN
3189  
3190  
3191  
3192  	      IF memberid_in IS NOT NULL THEN
3193  	    SELECT  NVL(datashareconsentflg,(SELECT LKUPVALUE
3194  									      FROM REFSERVICEFILTERLKUP
3195  									      WHERE LKUPSTRING = 'NULLVALUE'
3196  									      AND SERVICENM    = 'DATASHARECONSENTFLG'
3197  									      ))
3198  		  INTO lv_datashareconsentflg
3199  		  FROM ODS.supplierorganization so,ods.member m
3200  	      WHERE so.ahmsupplierid = m.ahmsupplierid
3201  			    AND m.memberid = memberid_in;
3202  
3203  	      ELSIF memberplanid_in IS NOT NULL THEN
3204  	    SELECT  NVL(datashareconsentflg,(SELECT LKUPVALUE
3205  									      FROM REFSERVICEFILTERLKUP
3206  									      WHERE LKUPSTRING = 'NULLVALUE'
3207  									      AND SERVICENM    = 'DATASHARECONSENTFLG'
3208  									      ))
3209  		  INTO lv_datashareconsentflg
3210  		  FROM ODS.supplierorganization so,ods.member m
3211  	      WHERE so.ahmsupplierid = m.ahmsupplierid
3212  			    AND m.primarymemberplanid = memberplanid_in;
3213  	  END IF;
3214  	    RETURN lv_datashareconsentflg;
3215  	END fgetdatashareconsentformember;
3216  
3217  	FUNCTION fgetmemberplanid (pn_memberid_in IN ods.MEMBER.memberid%TYPE)
3218  RETURN NUMBER RESULT_CACHE
3219  IS
3220  ln_memberplanid	  ods.MEMBER.primarymemberplanid%TYPE;
3221  BEGIN
3222  SELECT	 PRIMARYMEMBERPLANID
3223  INTO ln_memberplanid
3224  	FROM   ODS.MEMBER
3225   WHERE	 memberid = pn_memberid_in;
3226  	  RETURN ln_memberplanid;
3227   EXCEPTION
3228  	  WHEN OTHERS
3229  	  THEN
3230  	  RETURN NULL;
3231   END ;
3232  
3233   --US113391 SP to update emailpreference flag for the member
3234   PROCEDURE updateemailpreferenceflg(
3235  	  pn_memberid_in IN NUMBER,
3236  	      pv_datasourcenm_in IN VARCHAR2,
3237  	      pv_emailpreferenceflg_in IN VARCHAR2,
3238  	  pn_errorcode_out OUT NUMBER )
3239  AS
3240  	       lv_emailaddr ods.partyemailaddress.emailaddr%TYPE;
3241  	       lv_emailconsentflg ods.supplierorganization.emailconsentflg%TYPE;
3242  /****************************************************************************
3243  	  date		      description	  version      author																							 date		     description	 version
3244  	  08/01/2018	       US113391 	  1.0	       Sudharsan
3245  	 *****************************************************************************/
3246  PROCEDURE debug_emailpreferenceflg(
3247  	  memberid IN NUMBER,
3248  	      datasourcenm IN VARCHAR2,
3249  	      emailpreferenceflg IN VARCHAR2 )
3250  IS
3251  	PRAGMA AUTONOMOUS_TRANSACTION;
3252  BEGIN
3253  	INSERT
3254  	INTO DBUG_UPDATEEMAILPREFERENCEFLG
3255  	  (
3256  	    memberid,
3257  		datasourcenm,
3258  		emailpreferenceflg,
3259  	    inserteddt,
3260  	    insertedby
3261  	  )
3262  	  VALUES
3263  	  (
3264  	    pn_memberid_in,
3265  		pv_datasourcenm_in,
3266  		pv_emailpreferenceflg_in,
3267  	    systimestamp,
3268  	    USER
3269  	  );
3270  	COMMIT;
3271  END;
3272  BEGIN
3273  
3274  	      IF fdebug ('UPDATEEMAILPREFERENCEFLG') = 'Y' THEN
3275  		      debug_emailpreferenceflg(pn_memberid_in,pv_datasourcenm_in,pv_emailpreferenceflg_in);
3276  	      END IF;
3277  
3278  	      BEGIN
3279  
3280  		      SELECT NVL(emailconsentflg,'N')
3281  		  INTO lv_emailconsentflg
3282  	      FROM ods.supplierorganization so, ods.MEMBER m1
3283  	      WHERE m1.memberid = pn_memberid_in
3284  	      AND so.ahmsupplierid = m1.ahmsupplierid;
3285  	      IF lv_emailconsentflg ='Y' THEN
3286  			      SELECT   p1.emailaddr
3287  				      INTO   lv_emailaddr
3288  			      FROM   ods.MEMBER m1, ods.partyemailaddress p1
3289  			      WHERE   m1.memberid = pn_memberid_in
3290  			      AND m1.personid = p1.partyid
3291  			      AND p1.createdbydatasourcenm = 'HDMS'
3292  			      AND p1.deletedbydatasourcenm IS NULL
3293  			      AND NOT EXISTS (SELECT 1 FROM ods.partyemailaddress p1
3294  							      WHERE  m1.personid = p1.partyid
3295  								      AND NVL(p1.emailpreferenceflg,'Y') =
3296  			      'N')
3297  			      AND ROWNUM = 1;
3298  		      END IF;
3299  
3300  	      EXCEPTION
3301  		      WHEN OTHERS THEN
3302  		      lv_emailaddr := NULL;
3303  	      END;
3304  
3305  	--check if member exists for AA and PHR_UE else add member as PHR_UE createdbydatasourcenm and	'commeng' as updtdatasourcenm for emailpreferenceflg
3306  	      IF pv_datasourcenm_in = 'COMMENG' THEN
3307  
3308  		      MERGE INTO partyemailaddress pe USING
3309  		      (SELECT personid FROM member m WHERE m.MEMBERID = pn_memberid_in
3310  		      ) mbr ON (pe.partyid = mbr.personid AND pe.CREATEDBYDATASOURCENM IN ('PHR_UE','AA'))
3311  		      WHEN MATCHED THEN
3312  		      UPDATE
3313  		      SET pe.EMAILPREFERENCEFLG 	= pv_emailpreferenceflg_in,
3314  			      pe.UPDTDBY		    = USER,
3315  			      pe.RECORDUPDTDT		    = systimestamp,
3316  			      pe.UPDTDATASOURCENM	    = pv_datasourcenm_in
3317  		      -- WHERE pe.CREATEDBYDATASOURCENM IN ('PHR_UE','AA')
3318  		      WHEN NOT MATCHED THEN
3319  		      INSERT
3320  			      (
3321  			      pe.emailid,
3322  			      pe.partyid,
3323  			      pe.effectivestartdt,
3324  			      pe.recordinsertdt,
3325  			      pe.recordupdtdt,
3326  			      pe.insertedby,
3327  			      pe.updtdby,
3328  			      pe.updtdatasourcenm,
3329  			      pe.createdbydatasourcenm,
3330  			      pe.EMAILPREFERENCEFLG,
3331  			      pe.emailaddr
3332  			      )
3333  			      VALUES
3334  			      (
3335  			      ods_email_seq.NEXTVAL,
3336  			      mbr.personid,
3337  			      sysdate,
3338  			      systimestamp,
3339  			      systimestamp,
3340  			      USER,
3341  			      USER,
3342  			      pv_datasourcenm_in,
3343  			      'PHR_UE',
3344  			      pv_emailpreferenceflg_in,
3345  			      lv_emailaddr
3346  			      );
3347  
3348  	      END IF;
3349  
3350  	pn_errorcode_out	  := 0;
3351  EXCEPTION
3352  WHEN OTHERS THEN
3353  	log_error ('UPDATEEMAILPREFERENCEFLG', pn_memberid_in, SQLCODE, SQLERRM, SYSDATE, NULL);
3354  	pn_errorcode_out := SQLCODE;
3355  END updateemailpreferenceflg;
3356  
3357  FUNCTION fgetphonefaxnumberforperson (pn_personid_in IN ods.member.personid%TYPE)
3358  	RETURN VARCHAR2
3359  AS
3360  /****************************************************************************
3361  	  Date		      Description	  Version      Author																							 date		     description	 version
3362  	  11/14/2018	      US113724		  1.0	       Kader
3363  *****************************************************************************/
3364  	 lv_phonefaxnumber ods.partyphonefax.phonefaxdisplaynumber%TYPE;
3365  BEGIN
3366  	 SELECT phonefaxdisplaynumber
3367  	   INTO lv_phonefaxnumber
3368  	       FROM (SELECT ppf.partyid,
3369  					ppf.phonefaxdisplaynumber,
3370  					ROW_NUMBER () --  get the latest phone number
3371  					OVER (
3372  						      PARTITION BY ppf.partyid
3373  						      ORDER BY
3374  						      CASE
3375  							  WHEN ppf.UPDTDATASOURCENM IN ('PHR_UE','AA')
3376  							      THEN
3377  								      'A'
3378  							      ELSE
3379  								  'B'
3380  						      END ASC
3381  					      ) phone_rn
3382  		   FROM ods.partyphonefax ppf
3383  			      WHERE ppf.partyid = pn_personid_in )
3384  	  WHERE phone_rn = 1;
3385  
3386  	      RETURN lv_phonefaxnumber;
3387  
3388  EXCEPTION
3389  WHEN OTHERS THEN
3390  	RETURN NULL;
3391  END fgetphonefaxnumberforperson;
3392  
3393  FUNCTION fgetemailaddressforperson (pn_personid_in IN ods.member.personid%TYPE)
3394  	RETURN VARCHAR2
3395  AS
3396  /****************************************************************************
3397  	  Date		      Description	  Version      Author																							 date		     description	 version
3398  	  11/14/2018	      US113724		  1.0	       Kader
3399  *****************************************************************************/
3400   lv_emailaddress ods.partyemailaddress.emailaddr%TYPE;
3401  BEGIN
3402  	 SELECT emailaddr
3403  	   INTO lv_emailaddress
3404  	       FROM (SELECT pea.partyid,
3405  					pea.emailaddr,
3406  					ROW_NUMBER () --  get the latest email addresss
3407  					OVER (
3408  						      PARTITION BY pea.partyid
3409  						      ORDER BY
3410  						      CASE
3411  							  WHEN pea.updtdatasourcenm IN ('PHR_UE','AA')
3412  							      THEN
3413  								      'A'
3414  							      ELSE
3415  								  'B'
3416  						      END ASC
3417  					      ) email_rn
3418  		   FROM ods.partyemailaddress pea
3419  			      WHERE pea.partyid = pn_personid_in )
3420  	  WHERE email_rn = 1;
3421  
3422  	RETURN lv_emailaddress;
3423  
3424  EXCEPTION
3425  WHEN OTHERS THEN
3426  	RETURN NULL;
3427  END fgetemailaddressforperson;
3428  
3429  END ods_common_pkg;
3430  /

Warning: Package Body created with compilation errors.

SQL> 
SQL> 
SQL> --
SQL> -- ODS_CORE  (Package Body)
SQL> --
SQL> CREATE OR REPLACE PACKAGE BODY ODS.ods_core
  2  AS
  3  	PROCEDURE resettracevariables
  4  	IS
  5  	BEGIN
  6  	   gt_start := NULL;
  7  	   gt_chk1 := NULL;
  8  	   gt_chk2 := NULL;
  9  	   gt_chk3 := NULL;
 10  	   gt_chk4 := NULL;
 11  	   gt_chk5 := NULL;
 12  	   gt_chk6 := NULL;
 13  	   gt_chk7 := NULL;
 14  	   gt_chk8 := NULL;
 15  	   gt_chk9 := NULL;
 16  	   gt_chk10 := NULL;
 17  	   gt_chk11 := NULL;
 18  	   gt_chk12 := NULL;
 19  	   gt_chk13 := NULL;
 20  	   gt_chk14 := NULL;
 21  	   gt_chk15 := NULL;
 22  	   gt_chk16 := NULL;
 23  	   gt_chk17 := NULL;
 24  	   gt_chk18 := NULL;
 25  	   gt_chk19 := NULL;
 26  	   gt_chk20 := NULL;
 27  	   gt_end := NULL;
 28  	END resettracevariables;
 29  
 30  	FUNCTION fgetdebugexecutiontime (pv_debugprocname_in IN debugproc.procname%TYPE)
 31  	   RETURN varchar2
 32  	AS
 33  	   lt_time   varchar2 (30);
 34  	BEGIN
 35  	   IF pv_debugprocname_in IS NOT NULL
 36  	   THEN
 37  	       SELECT exceptiontimelimit
 38  		 INTO lt_time
 39  		 FROM ods.debugproc d
 40  		WHERE d.procname = pv_debugprocname_in;
 41  	   ELSE
 42  	      lt_time := '000 00:00:03';
 43  	   END IF;
 44  
 45  	   RETURN lt_time;
 46  	EXCEPTION
 47  	   WHEN NO_DATA_FOUND
 48  	   THEN
 49  	      lt_time := '000 00:00:03';
 50  	      RETURN lt_time;
 51  	   WHEN OTHERS
 52  	   THEN
 53  	      lt_time := '000 00:00:03';
 54  	      RETURN lt_time;
 55  	END;
 56  
 57  	PROCEDURE loglongcall (pv_procedurenm_in      IN varchar2,
 58  			       pv_logtable_in	      IN varchar2 DEFAULT NULL ,
 59  			       pn_logtableseq_in      IN number DEFAULT NULL ,
 60  			       pn_procreturncode_in   IN number DEFAULT NULL ,
 61  			       pt_start_in	      IN timestamp,
 62  			       pt_chk1_in	      IN timestamp DEFAULT NULL ,
 63  			       pt_chk2_in	      IN timestamp DEFAULT NULL ,
 64  			       pt_chk3_in	      IN timestamp DEFAULT NULL ,
 65  			       pt_chk4_in	      IN timestamp DEFAULT NULL ,
 66  			       pt_chk5_in	      IN timestamp DEFAULT NULL ,
 67  			       pt_chk6_in	      IN timestamp DEFAULT NULL ,
 68  			       pt_chk7_in	      IN timestamp DEFAULT NULL ,
 69  			       pt_chk8_in	      IN timestamp DEFAULT NULL ,
 70  			       pt_chk9_in	      IN timestamp DEFAULT NULL ,
 71  			       pt_chk10_in	      IN timestamp DEFAULT NULL ,
 72  			       pt_chk11_in	      IN timestamp DEFAULT NULL ,
 73  			       pt_chk12_in	      IN timestamp DEFAULT NULL ,
 74  			       pt_chk13_in	      IN timestamp DEFAULT NULL ,
 75  			       pt_chk14_in	      IN timestamp DEFAULT NULL ,
 76  			       pt_chk15_in	      IN timestamp DEFAULT NULL ,
 77  			       pt_chk16_in	      IN timestamp DEFAULT NULL ,
 78  			       pt_chk17_in	      IN timestamp DEFAULT NULL ,
 79  			       pt_chk18_in	      IN timestamp DEFAULT NULL ,
 80  			       pt_chk19_in	      IN timestamp DEFAULT NULL ,
 81  			       pt_chk20_in	      IN timestamp DEFAULT NULL ,
 82  			       pt_end_in	      IN timestamp)
 83  	AS
 84  	   PRAGMA AUTONOMOUS_TRANSACTION;
 85  	BEGIN
 86  	   INSERT INTO debugexception (procname,
 87  				       logtable,
 88  				       logtableseq,
 89  				       procreturncode,
 90  				       startat,
 91  				       checkpt01,
 92  				       checkpt02,
 93  				       checkpt03,
 94  				       checkpt04,
 95  				       checkpt05,
 96  				       checkpt06,
 97  				       checkpt07,
 98  				       checkpt08,
 99  				       checkpt09,
100  				       checkpt10,
101  				       checkpt11,
102  				       checkpt12,
103  				       checkpt13,
104  				       checkpt14,
105  				       checkpt15,
106  				       checkpt16,
107  				       checkpt17,
108  				       checkpt18,
109  				       checkpt19,
110  				       checkpt20,
111  				       endat)
112  	    VALUES (pv_procedurenm_in,
113  		    pv_logtable_in,
114  		    pn_logtableseq_in,
115  		    pn_procreturncode_in,
116  		    pt_start_in,
117  		    pt_chk1_in,
118  		    pt_chk2_in,
119  		    pt_chk3_in,
120  		    pt_chk4_in,
121  		    pt_chk5_in,
122  		    pt_chk6_in,
123  		    pt_chk7_in,
124  		    pt_chk8_in,
125  		    pt_chk9_in,
126  		    pt_chk10_in,
127  		    pt_chk11_in,
128  		    pt_chk12_in,
129  		    pt_chk13_in,
130  		    pt_chk14_in,
131  		    pt_chk15_in,
132  		    pt_chk16_in,
133  		    pt_chk17_in,
134  		    pt_chk18_in,
135  		    pt_chk19_in,
136  		    pt_chk20_in,
137  		    pt_end_in);
138  
139  	   COMMIT;
140  	END loglongcall;
141  
142  	PROCEDURE convert_delimitedstr_using_obj (p_delimstring   IN	 varchar2,
143  						  p_delimiter	  IN	 varchar2,
144  						  p_delstring	     OUT ods_delmitedstring_tab,
145  						  p_errorcode	     OUT number)
146  	IS
147  	   lv_ret		 number;
148  	   lv_pos		 number;
149  	   lv_search_str	 varchar2 (32767);
150  	   lv_index		 binary_integer := 0;
151  	   lv_count		 integer;
152  	   lv_temp		 varchar2 (32767);
153  	   lv_value		 varchar2 (32767);
154  	   lv_delimiter_length	 number;
155  	BEGIN
156  	   p_errorcode := 0;
157  	   p_delstring := ods_delmitedstring_tab ();
158  	   lv_delimiter_length := LENGTH (p_delimiter);
159  
160  	   IF p_delimstring IS NOT NULL
161  	   THEN
162  	      lv_search_str := p_delimstring;
163  	      lv_pos := 1;
164  	      lv_ret := INSTR (lv_search_str, p_delimiter);
165  
166  	      WHILE lv_ret > 0 OR LENGTH (lv_search_str) > 0
167  	      LOOP
168  		 lv_value := NULL;
169  
170  		 IF lv_ret <= 0
171  		 THEN
172  		    lv_value := TRIM (lv_search_str);
173  		    lv_search_str := NULL;
174  		 ELSE
175  		    lv_value := TRIM (SUBSTR (lv_search_str, lv_pos, lv_ret - 1));
176  		 END IF;
177  
178  		 lv_index := lv_index + 1;
179  		 lv_temp := LENGTH (lv_value);
180  		 p_delstring.EXTEND;
181  		 p_delstring (p_delstring.LAST) := lv_value;
182  		 lv_search_str := SUBSTR (lv_search_str, lv_ret + lv_delimiter_length);
183  		 lv_ret := INSTR (lv_search_str, p_delimiter, lv_pos);
184  	      END LOOP;
185  	   END IF;
186  	EXCEPTION
187  	   WHEN OTHERS
188  	   THEN
189  	      p_errorcode := SQLCODE;
190  	END;
191  
192  	FUNCTION getdelimiedstrtotbl (p_delimstring IN varchar2, p_delimiter IN varchar2)
193  	   RETURN ods_delmitedstring_tab
194  	AS
195  	   lv_string	  ods_delmitedstring_tab := ods_delmitedstring_tab ();
196  	   lv_errorcode   number;
197  	BEGIN
198  	   ods_core.convert_delimitedstr_using_obj (p_delimstring   => p_delimstring,
199  						    p_delimiter     => p_delimiter,
200  						    p_delstring     => lv_string,
201  						    p_errorcode     => lv_errorcode);
202  
203  	   IF NVL (lv_errorcode, 0) <> 0
204  	   THEN
205  	      lv_string := ods_delmitedstring_tab ();
206  	   END IF;
207  
208  	   RETURN lv_string;
209  	/* SELECT ROWNUM, TRIM (COLUMN_VALUE) col_val
210  	FROM the( SELECT CAST (
211  			   bsfm_tokenize_str_to_tbl (
212  			      '306J_^^_J1062J_^^_JNew fields are added for Sep releaese, mediaPath and mediaTitleJ_^^_JNOTCOMPLETEDJ_^^_J2010-08-23T00:00:00.000ZJ_^^_JJ_^^_JFUCASPJ_^^_JPDFJ_^^_Jwww.activeadvise.com/media/patientPhoto/recentJ_^^_JTitle has beeen changed to New MediaJ_^^_J2010-08-23T00:00:00.000ZJ_^^_JKEEPJ_##_J',
213  			      'J_^^_J'
214  			   ) AS str_tokens_tab
215  			)
216  		    FROM DUAL) */
217  	EXCEPTION
218  	   WHEN OTHERS
219  	   THEN
220  	      lv_string := ods_delmitedstring_tab ();
221  	      RETURN lv_string;
222  	END;
223  
224  	FUNCTION fgetmastercode (p_mastercodemnemonic_in IN varchar2)
225  	   RETURN varchar2
226  	IS
227  	   lv_retcode	mastercode.mastercode%TYPE;
228  	BEGIN
229  	    SELECT mastercode
230  	      INTO lv_retcode
231  	      FROM ods.mastercode
232  	     WHERE mastercodemnemonic = p_mastercodemnemonic_in;
233  
234  	   RETURN lv_retcode;
235  	EXCEPTION
236  	   WHEN OTHERS
237  	   THEN
238  	      lv_retcode := NULL;
239  	      RETURN lv_retcode;
240  	END fgetmastercode;
241  
242  	FUNCTION fgetmastercodedesc (p_mastercodemnemonic_in IN varchar2)
243  	   RETURN varchar2
244  	IS
245  	   lv_retcode	mastercode.mastercodedesc%TYPE;
246  	BEGIN
247  	    SELECT mastercodedesc
248  	      INTO lv_retcode
249  	      FROM ods.mastercode
250  	     WHERE mastercodemnemonic = p_mastercodemnemonic_in;
251  
252  	   RETURN lv_retcode;
253  	EXCEPTION
254  	   WHEN OTHERS
255  	   THEN
256  	      lv_retcode := NULL;
257  	      RETURN lv_retcode;
258  	END fgetmastercodedesc;
259  
260  	FUNCTION fgetmastermemoniccode (p_mastercode_in IN varchar2, p_mastergroupcd_in IN varchar2)
261  	   RETURN varchar2
262  	IS
263  	   lv_retcode	mastercode.mastercodemnemonic%TYPE;
264  	BEGIN
265  	    SELECT mc.mastercodemnemonic
266  	      INTO lv_retcode
267  	      FROM ods.mastercode mc
268  	     WHERE mc.mastercode = p_mastercode_in AND mc.mastergroupcd = p_mastergroupcd_in;
269  
270  	   RETURN lv_retcode;
271  	EXCEPTION
272  	   WHEN OTHERS
273  	   THEN
274  	      lv_retcode := NULL;
275  	      RETURN lv_retcode;
276  	END fgetmastermemoniccode;
277  
278  	FUNCTION fgetorgnm (p_orgid_in IN number)
279  	   RETURN varchar2
280  	IS
281  	   lv_retcode	org.orgnm%TYPE;
282  	BEGIN
283  	    SELECT orgnm
284  	      INTO lv_retcode
285  	      FROM org
286  	     WHERE orgid = p_orgid_in;
287  
288  	   RETURN lv_retcode;
289  	EXCEPTION
290  	   WHEN OTHERS
291  	   THEN
292  	      lv_retcode := NULL;
293  	      RETURN lv_retcode;
294  	END fgetorgnm;
295  
296  	PROCEDURE setmoodcdlist (p_moodcdlist_in IN varchar2)
297  	IS
298  	BEGIN
299  	   IF p_moodcdlist_in IS NULL
300  	   THEN
301  	      INSERT INTO ods.global_temp_moodcdlist (moodcd)
302  		  SELECT TRIM (mastercodemnemonic)
303  		    FROM mastercode
304  		   WHERE mastergroupcd = 'MOOD';
305  	   ELSE
306  	      INSERT INTO ods.global_temp_moodcdlist (moodcd)
307  		 ( SELECT ods_core.fgetmastermemoniccode (col_val, 'MOOD')
308  		     FROM ( SELECT TRIM (COLUMN_VALUE) col_val
309  			      FROM the( SELECT CAST (
310  						 ods_core.getdelimiedstrtotbl (p_moodcdlist_in, 'J_##_J') AS ods_delmitedstring_tab
311  					      )
312  					  FROM DUAL)));
313  	   END IF;
314  	END;
315  
316  	FUNCTION fgetunknownprovider (p_ahmsupplierid_in   IN MEMBER.ahmsupplierid%TYPE,
317  				      p_systemsource_in    IN datasource.datasourcenm%TYPE)
318  	   RETURN number
319  	IS
320  	   lv_retvalue	   careprovider.careproviderid%TYPE;
321  	   ln_acntorgid    org.orgid%TYPE;
322  	   ln_providerid   careprovider.careproviderid%TYPE;
323  	BEGIN
324  	    SELECT io.orgid
325  	      INTO ln_acntorgid
326  	      FROM ods.insuranceorganization io, ods.insuranceorgsupplierrelation iosr, ods.supplierorganization so
327  	     WHERE io.insuranceorgid = iosr.insuranceorgid
328  	       AND iosr.supplierid = so.supplierorgid
329  	       AND so.ahmsupplierid = p_ahmsupplierid_in;
330  
331  	   IF ln_acntorgid IS NOT NULL
332  	   THEN
333  	       SELECT cp.careproviderid
334  		 INTO lv_retvalue
335  		 FROM careprovider cp
336  		WHERE (cp.sourcecareproviderid = '0' OR cp.externalsourcecareproviderid = '0')
337  		  AND NVL (cp.exclusioncode, 'IN') = 'IN'
338  		  AND cp.providerfilterflag = 'Y'
339  		  AND cp.datasourcenm = p_systemsource_in
340  		  AND EXISTS
341  			 ( SELECT 1
342  			     FROM orgpersonxref x
343  			    WHERE x.orgid = ln_acntorgid
344  			      AND x.relatedpersonid = cp.careproviderid
345  			      AND x.accountid = ln_acntorgid
346  			      AND x.relationtypemnemonic = 'ORGPRS_AFFL'
347  			      AND x.effenddt IS NULL
348  			      AND x.PRIMARYFLG = 'Y'
349  			      AND x.exclusioncd = 'IN');
350  	   ELSE
351  	       SELECT cp.careproviderid
352  		 INTO lv_retvalue
353  		 FROM careprovider cp
354  		WHERE (cp.sourcecareproviderid = '0' OR cp.externalsourcecareproviderid = '0')
355  		  AND NVL (cp.exclusioncode, 'IN') = 'IN'
356  		  AND cp.providerfilterflag = 'Y'
357  		  AND cp.datasourcenm = p_systemsource_in;
358  	   END IF;
359  
360  	   RETURN lv_retvalue;
361  	EXCEPTION
362  	   WHEN NO_DATA_FOUND
363  	   THEN
364  	      -- Create the Unknown Provider for that account
365  	      SELECT ods_party_seq.NEXTVAL INTO ln_providerid FROM DUAL;
366  
367  	      INSERT INTO party (partyid, partytypecode)
368  	       VALUES (ln_providerid, 'P');
369  
370  	      INSERT INTO careprovider (careproviderid,
371  					careprovidertype,
372  					nationalproviderid,
373  					sourcecareproviderid,
374  					recordinsertdt,
375  					recordupdtdt,
376  					insertedby,
377  					updtdby,
378  					providerfilterflag,
379  					taxid,
380  					provideroptoutflag,
381  					provideruniqueid,
382  					providermasterid,
383  					exclusioncode,
384  					projectid,
385  					datasourcenm,
386  					externalsourcecareproviderid,
387  					primaryrolecd,
388  					secondaryrolecd,
389  					deliverytypetxt,
390  					sourceissuingorgid)
391  	       VALUES (ln_providerid									   -- CAREPROVIDERID,
392  				    ,
393  		       'UNKNOWN'									  --CAREPROVIDERTYPE,
394  				,
395  		       NULL,										 --nationalproviderid
396  		       '0'									      --SOURCECAREPROVIDERID,
397  			  ,
398  		       SYSDATE										    --RECORDINSERTDT,
399  			      ,
400  		       SYSDATE										      --RECORDUPDTDT,
401  			      ,
402  		       p_systemsource_in									--INSERTEDBY,
403  					,
404  		       p_systemsource_in									   --UPDTDBY,
405  					,
406  		       'Y',										-- providerfilterflag
407  		       NULL											     --TAXID,
408  			   ,
409  		       'Y'										--PROVIDEROPTOUTFLAG,
410  			  ,
411  		       NULL										  --PROVIDERUNIQUEID,
412  			   ,
413  		       NULL										  --PROVIDERMASTERID,
414  			   ,
415  		       'IN'										     --EXCLUSIONCODE,
416  			   ,
417  		       NULL											 --PROJECTID,
418  			   ,
419  		       p_systemsource_in								      --DATASOURCENM,
420  					,
421  		       '0',								      -- externalsourcecareproviderid
422  		       NULL										     --PRIMARYROLENM,
423  			   ,
424  		       NULL										   --SECONDARYROLENM,
425  			   ,
426  		       NULL										   --DELIVERYTYPETXT,
427  			   ,
428  		       NULL										      -- IssuingOrgid
429  			   );
430  
431  	      IF ln_acntorgid IS NOT NULL
432  	      THEN
433  		 INSERT INTO ods.orgpersonxref (orgpersonxrefskey,
434  						orgid,
435  						accountid,
436  						relatedpersonid,
437  						relationtypemnemonic,
438  						effstartdt,
439  						insertedby,
440  						inserteddt,
441  						updatedby,
442  						updateddt,
443  						createdbydatasourcenm,
444  						PRIMARYFLG)
445  		  VALUES (orgpersonxref_seq.NEXTVAL,
446  			  ln_acntorgid,
447  			  ln_acntorgid,
448  			  ln_providerid,
449  			  hie_core.fgetmastermemoniccode ('AFFL', 'ORGPRS'),
450  			  SYSDATE,
451  			  p_systemsource_in,
452  			  SYSTIMESTAMP,
453  			  p_systemsource_in,
454  			  SYSTIMESTAMP,
455  			  p_systemsource_in,
456  			  'Y');
457  	      END IF;
458  
459  	      INSERT INTO ods.person (personid,
460  				      firstnm,
461  				      middleinitial,
462  				      lastnm,
463  				      salutation,
464  				      suffix,
465  				      fullnm,
466  				      gender,
467  				      ssn,
468  				      dtofbirth,
469  				      ethnicrace,
470  				      maritalstatusmnemonic,
471  				      effectivestartdt,
472  				      effectiveenddt,
473  				      recordinsertdt,
474  				      recordupdtdt,
475  				      insertedby,
476  				      updtdby,
477  				      last4ssn,
478  				      exclusioncode,
479  				      title,
480  				      persontype)
481  	       VALUES (ln_providerid,
482  		       NULL											   --firstnm,
483  			   ,
484  		       NULL									--	       middleinitial,
485  			   ,
486  		       NULL										       --     lastnm,
487  			   ,
488  		       NULL										    --	  salutation,
489  			   ,
490  		       NULL											 --   suffix,
491  			   ,
492  		       'UNKNOWN'										  -- Fullname
493  				,
494  		       NULL											 --   gender,
495  			   ,
496  		       NULL											    --	 ssn,
497  			   ,
498  		       NULL										      --   dtofbirth,
499  			   ,
500  		       NULL										     --   ethnicrace,
501  			   ,
502  		       NULL									  --   maritalstatusmnemonic,
503  			   ,
504  		       SYSDATE									       --   effectivestartdt,
505  			      ,
506  		       NULL										 --   effectiveenddt,
507  			   ,
508  		       SYSDATE										 --   recordinsertdt,
509  			      ,
510  		       SYSDATE										   --	recordupdtdt,
511  			      ,
512  		       p_systemsource_in								     --   insertedby,
513  					,
514  		       p_systemsource_in									--   updtdby,
515  					,
516  		       NULL										       --   last4ssn,
517  			   ,
518  		       'IN'										  --   exclusioncode,
519  			   ,
520  		       NULL											  --   title,
521  			   ,
522  		       'P'										      --   persontype
523  			  );
524  
525  	      lv_retvalue := ln_providerid;
526  	      RETURN lv_retvalue;
527  	   WHEN OTHERS
528  	   THEN
529  	      lv_retvalue := NULL;
530  	      RETURN lv_retvalue;
531  	END fgetunknownprovider;
532  
533  	FUNCTION fgetprovtype (p_id_in IN number)
534  	   RETURN varchar2
535  	IS
536  	   lv_ret_value   varchar2 (1);
537  	BEGIN
538  	   BEGIN
539  	       SELECT poxref.provorgstafftypecd
540  		 INTO lv_ret_value
541  		 FROM ods.provorgstaffmasterxref poxref
542  		WHERE poxref.provorgstaffid = p_id_in AND NVL (poxref.exclusioncd, 'IN') = 'IN';
543  	   EXCEPTION
544  	      WHEN OTHERS
545  	      THEN
546  		 lv_ret_value := NULL;
547  	   END;
548  
549  	   RETURN lv_ret_value;
550  	END fgetprovtype;
551  
552  	FUNCTION fvalidateuserid (p_id_in IN number, p_type_in IN varchar2)
553  	   RETURN number
554  	IS
555  	   lv_retvalue	 number;
556  	BEGIN
557  	   IF p_type_in = 'P'
558  	   THEN
559  	       SELECT COUNT ( * )
560  		 INTO lv_retvalue
561  		 FROM careprovider
562  		WHERE careproviderid = p_id_in AND NVL (exclusioncode, 'IN') = 'IN'
563  		  AND (NVL (providerfilterflag, 'N') <> 'Y'
564  		    OR (providerfilterflag = 'Y' AND (sourcecareproviderid = '0' OR externalsourcecareproviderid = '0')));
565  	   ELSIF p_type_in = 'A'
566  	   THEN
567  	       SELECT COUNT ( * )
568  		 INTO lv_retvalue
569  		 FROM ods.provorgadjunctstaff
570  		WHERE provorgadjunctstaffid = p_id_in AND NVL (exclusioncd, 'IN') = 'IN';
571  	   ELSIF p_type_in = 'E'
572  	   THEN
573  	       SELECT COUNT ( * )
574  		 INTO lv_retvalue
575  		 FROM ods.employee
576  		WHERE employeeid = p_id_in AND NVL (exclusioncd, 'IN') = 'IN';
577  	   END IF;
578  
579  	   RETURN lv_retvalue;
580  	EXCEPTION
581  	   WHEN OTHERS
582  	   THEN
583  	      lv_retvalue := 0;
584  	      RETURN lv_retvalue;
585  	END;
586  
587  	PROCEDURE sethealthstatefdback (p_healthstatetrackingid_in    IN     number,
588  					p_memberplanid_in	      IN     number,
589  					p_healthstatetype_in	      IN     varchar2,
590  					p_systemsource_in	      IN     varchar2,
591  					p_fdbstatusid_in	      IN     varchar2,
592  					p_fdbstatusreason_in	      IN     number,
593  					p_fdbcomments_in	      IN     varchar2,
594  					p_fdbdate_in		      IN     date,
595  					p_byuserid_in		      IN     number,
596  					p_byprovidertype_in	      IN     varchar2,
597  					p_foruserid_in		      IN     number,
598  					p_forprovidertype_in	      IN     varchar2,
599  					p_healthstatetrackingid_out	 OUT number,
600  					p_memberplanid_out		 OUT number,
601  					p_returncode_out		 OUT number)
602  	IS
603  	   lv_return_code	 number;
604  	   lv_memberid		 MEMBER.memberid%TYPE;
605  	   lv_ahmsupplierid	 MEMBER.ahmsupplierid%TYPE;
606  	   lv_statecomponentid	 csid.memberhealthstate.statecomponentid%TYPE;
607  	   lv_feedbackseq	 number;
608  	   lv_statetypecd	 csid.memberhealthstate.statetypecd%TYPE;
609  	   lv_fdbxreftypcd	 csid.memberhealthstatefeedbackxref.clinicaloutputtypecd%TYPE;
610  	   lv_provtype		 varchar2 (30);
611  	   lv_forid		 number;
612  	   lv_byid		 number;
613  	   lv_userexists	 number;
614  
615  	   ln_episodeid 	 number;
616  
617  	       ln_mastersupplierid	   csid.memberhealthstate.mastersupplierid%TYPE;
618  	   ln_Yrqtr_low 		 csid.memberhealthstate.yearqtr%TYPE;
619  	       ln_Yrqtr_High		  csid.memberhealthstate.yearqtr%TYPE;
620  	       --Personview changes start--
621  	   ln_personmemberid	      csid.memberhealthstate.memberid%TYPE;
622  	       ln_personmastersupplierid  csid.memberhealthstate.mastersupplierid%TYPE;
623  	       ln_memberhealthstateskey  csid.memberhealthstate.memberhealthstateskey%TYPE;
624  		 --Personview changes End--
625  	BEGIN
626  
627  	   /* 17.4  chitra v personview change US102412  */
628  	   /* Service to set the feedback from various sources. This service is being called by CT/CCFeedback/TMV. Future it will be used by PHR also.
629  									Feedback can be Set by Member (M) /Provider (P) /Adjunct (A) /Unknown (U).
630  	   M  Type  =>	 FOR and BY usertype will be M and the Id  receive to this service is the memberplanid.System validates
631  			 only if the the memberplanid exists in ODS.
632  	   P/A Type =>	 Check if the  FOR/BY type is valid  against the XREF table.
633  	   U Type   =>	 In case of U type if the FOR/BY id is either Null or 0, derive the unknown provider for the account that belong to the
634  			 supplier of the given member. For Every account there is a Unknown provider setup will be available which is identified by
635  			 SourceCareProviderid =0 and ExternalSourceCareproviderid = 0 and Datasource - HIE_UE for HIEaccount and HDMS for non-hie account.
636  	   */
637  	   ods_core.gt_start := SYSTIMESTAMP;
638  
639  	   IF fdebug ('SETHEALTHSTATEFDBACK') = 'Y'
640  	   THEN
641  	      INSERT INTO ods.jsethsfeedback (healthstatetrackingid,
642  					      memberplanid,
643  					      healthstatetype,
644  					      systemsource,
645  					      fdbstatusid,
646  					      fdbstatusreason,
647  					      fdbcomments,
648  					      fdbdate,
649  					      byuserid,
650  					      byprovidertype,
651  					      foruserid,
652  					      forprovidertype,
653  					      recordinsertdt)
654  	       VALUES (p_healthstatetrackingid_in,
655  		       p_memberplanid_in,
656  		       p_healthstatetype_in,
657  		       p_systemsource_in,
658  		       p_fdbstatusid_in,
659  		       p_fdbstatusreason_in,
660  		       p_fdbcomments_in,
661  		       p_fdbdate_in,
662  		       p_byuserid_in,
663  		       p_byprovidertype_in,
664  		       p_foruserid_in,
665  		       p_forprovidertype_in,
666  		       SYSTIMESTAMP);
667  	   END IF;
668  
669  	   lv_return_code := ods_debugpkg.ferrorcodesforhie ('ALL', 'SUCCESSFUL');
670  
671  	   IF p_healthstatetrackingid_in IS NULL
672  	   OR p_memberplanid_in IS NULL
673  	   OR NVL (p_healthstatetype_in, 'X') NOT IN ('MK', 'ME', 'QM')
674  	   OR p_systemsource_in IS NULL
675  	   OR p_fdbstatusid_in IS NULL
676  	   OR p_fdbstatusreason_in IS NULL
677  	   OR p_fdbdate_in IS NULL
678  	   THEN
679  	      lv_return_code := ods_debugpkg.ferrorcodesforhie ('ALL', 'MANDATORY ELEMENTS NOT FOUND');
680  	      GOTO finish;
681  	   END IF;
682  
683  	   BEGIN
684  	       SELECT memberid, ahmsupplierid
685  		 INTO lv_memberid, lv_ahmsupplierid
686  		 FROM ods.MEMBER
687  		WHERE primarymemberplanid = p_memberplanid_in;
688  	   EXCEPTION
689  	      WHEN OTHERS
690  	      THEN
691  		 lv_memberid := NULL;
692  	   END;
693  
694  	   IF lv_memberid IS NULL
695  	   THEN
696  	      lv_return_code := ods_debugpkg.ferrorcodesforhie ('ALL', 'MEMBER NOT FOUND');
697  	      GOTO finish;
698  	   END IF;
699  
700  	   lv_provtype := NULL;
701  	   lv_forid := NULL;
702  	   lv_byid := NULL;
703  	   lv_userexists := 0;
704  
705  
706  
707  	   IF p_byprovidertype_in = 'U'
708  	   THEN
709  	      IF p_byuserid_in <> 0
710  	      THEN
711  		 lv_userexists := ods_core.fvalidateuserid (p_byuserid_in, 'P');
712  
713  		 IF lv_userexists = 0
714  		 THEN
715  		    lv_byid := NULL;
716  		 END IF;
717  	      ELSE
718  		 lv_byid :=
719  		    ods_core.fgetunknownprovider (
720  		       lv_ahmsupplierid,
721  		       CASE WHEN p_systemsource_in = 'HIE_UE' THEN 'HIE' ELSE p_systemsource_in END
722  		    );
723  	      END IF;
724  
725  	      IF lv_byid IS NULL
726  	      THEN
727  		 lv_return_code := ods_debugpkg.ferrorcodesforhie ('ALL', 'NOT A VALID REQUESTOR');
728  		 GOTO finish;
729  	      END IF;
730  	   ELSIF p_byprovidertype_in IN ('M', 'A', 'P', 'E')
731  	   THEN
732  	      IF p_byuserid_in IS NOT NULL
733  	      THEN
734  		 IF p_byprovidertype_in = 'M'
735  		 THEN
736  		    BEGIN
737  			SELECT memberid
738  			  INTO lv_byid
739  			  FROM ods.MEMBER
740  			 WHERE primarymemberplanid = p_byuserid_in;
741  		    EXCEPTION
742  		       WHEN OTHERS
743  		       THEN
744  			  lv_return_code := ods_debugpkg.ferrorcodesforhie ('ALL', 'MEMBER NOT FOUND');
745  			  GOTO finish;
746  		    END;
747  		 ELSE
748  		    /*
749  		     IF p_systemsource_in = 'CT'
750  		    -- For careteam we need to check the Type against Xref table
751  		    THEN
752  		       lv_provtype := ods_core.fgetprovtype (p_byuserid_in);
753  
754  		       IF (lv_provtype IS NULL OR (lv_provtype <> NVL (p_byprovidertype_in, 'X')))
755  		       THEN
756  			  lv_userexists := 0;
757  		       ELSE
758  			  lv_userexists := 1;
759  		       END IF;
760  		    ELSE
761  		       lv_userexists := ods_core.fvalidateuserid (p_byuserid_in, p_byprovidertype_in);
762  		    END IF;
763  		    */
764  
765  		    lv_userexists := ods_core.fvalidateuserid (p_byuserid_in, p_byprovidertype_in);
766  
767  		    IF lv_userexists = 0
768  		    THEN
769  		       lv_return_code := ods_debugpkg.ferrorcodesforhie ('ALL', 'NOT A VALID REQUESTOR');
770  		       GOTO finish;
771  		    ELSE
772  		       lv_byid := p_byuserid_in;
773  		    END IF;
774  		 END IF;
775  	      END IF;
776  	   END IF;
777  
778  	   -- Validating FOR Userid and FOR Type
779  	   lv_provtype := NULL;
780  	   lv_userexists := 0;
781  
782  	   IF p_forprovidertype_in = 'U'
783  	   THEN
784  	      IF p_foruserid_in <> 0
785  	      THEN
786  		 lv_userexists := ods_core.fvalidateuserid (p_foruserid_in, 'P');
787  
788  		 IF lv_userexists = 0
789  		 THEN
790  		    lv_forid := NULL;
791  		 END IF;
792  	      ELSE
793  		 lv_forid :=
794  		    ods_core.fgetunknownprovider (
795  		       lv_ahmsupplierid,
796  		       CASE WHEN p_systemsource_in = 'HIE_UE' THEN 'HIE' ELSE p_systemsource_in END
797  		    );
798  	      END IF;
799  
800  	      IF lv_forid IS NULL
801  	      THEN
802  		 lv_return_code := ods_debugpkg.ferrorcodesforhie ('ALL', 'NOT A VALID REQUESTOR');
803  		 GOTO finish;
804  	      END IF;
805  	   ELSIF p_forprovidertype_in IN ('M', 'P', 'A', 'E')
806  	   THEN
807  	      IF p_foruserid_in IS NOT NULL
808  	      THEN
809  		 IF p_forprovidertype_in = 'M'
810  		 THEN
811  		    BEGIN
812  			SELECT memberid
813  			  INTO lv_forid
814  			  FROM ods.MEMBER
815  			 WHERE primarymemberplanid = p_foruserid_in;
816  		    EXCEPTION
817  		       WHEN OTHERS
818  		       THEN
819  			  lv_return_code := ods_debugpkg.ferrorcodesforhie ('ALL', 'MEMBER NOT FOUND');
820  			  GOTO finish;
821  		    END;
822  		 ELSE
823  
824  		  /*IF p_systemsource_in = 'CT'
825  		    -- For careteam we need to check the Type against Xref table
826  		    THEN
827  		       lv_provtype := ods_core.fgetprovtype (p_foruserid_in);
828  
829  		       IF (lv_provtype IS NULL OR (lv_provtype <> NVL (p_forprovidertype_in, 'X')))
830  		       THEN
831  			  lv_userexists := 0;
832  		       ELSE
833  			  lv_userexists := 1;
834  		       END IF;
835  		    ELSE
836  		       lv_userexists := ods_core.fvalidateuserid (p_foruserid_in, p_forprovidertype_in);
837  		    END IF;
838  		    */
839  
840  		    lv_userexists := ods_core.fvalidateuserid (p_foruserid_in, p_forprovidertype_in);
841  
842  		    IF lv_userexists = 0
843  		    THEN
844  		       lv_return_code := ods_debugpkg.ferrorcodesforhie ('ALL', 'NOT A VALID REQUESTOR');
845  		       GOTO finish;
846  		    ELSE
847  		       lv_forid := p_foruserid_in;
848  		    END IF;
849  		 END IF;
850  	      END IF;
851  	   END IF;
852  
853  
854  	   ods_core.gt_chk1 := SYSTIMESTAMP;
855  
856  			      --For Data Management
857  		 ln_mastersupplierid  := ods_common_pkg.fgetmastersupplierid(pn_memberid_in => lv_memberid);
858  		     ln_Yrqtr_low    := ods_common_pkg.fgetpreviousyearqtr(sysdate);
859  		 ln_Yrqtr_High	 := ods_common_pkg.fgetyearqtr(sysdate);
860  
861  			   /*mhs,mhscommm,mhscommdtl ,mhsactionxref  -- memberid and mastersupplierid  is in  aggregate or instance level based on constent 'Y'
862  		  memberid and mastersupplierid  is in Memberinstance level for all other csid tables	*/
863  
864  	     /* personview starts */
865  	 IF ODS.ODS_COMMON_PKG.fgetpersonviewflg ='Y'
866  	    Then
867  
868  	     IF ODS.ODS_COMMON_PKG.fgetdatashareconsentformember(memberid_in=> lv_memberid ,memberplanid_in => NULL) ='Y'  -- check the shared consent,If yes personmode
869  		 Then
870  		     ln_personmemberid	 := ODS.ODS_COMMON_PKG.FGETPERSONAGGREGATEID (memberid_in => lv_memberid);	---  get the personaggregatgeid
871  		     ln_personmastersupplierid :=  ODS.ODS_COMMON_PKG.fgetmastersupplierid (pn_memberid_in => ln_personmemberid);  -- get the personmastersupplierid
872  
873  		 ELSE
874  				  ln_personmemberid := lv_memberid;
875  				      ln_personmastersupplierid := ln_mastersupplierid;
876  		 END IF;
877  
878  	     ELSE
879  			 ln_personmemberid := lv_memberid;
880  			     ln_personmastersupplierid := ln_mastersupplierid;
881  	  END IF;
882  	  /* Preson View ends */
883  
884  
885  
886  
887  	   BEGIN
888  	      IF p_healthstatetype_in IN ('MK', 'QM')
889  	      THEN
890  		 lv_statetypecd :=
891  		    CASE
892  		       WHEN p_healthstatetype_in = 'MK' THEN 'MK'
893  		       WHEN p_healthstatetype_in = 'QM' THEN 'ME'
894  		    END;
895  		 lv_fdbxreftypcd := 'MHS';
896  
897  		  BEGIN
898  
899  			      SELECT mhs.statecomponentid, mhs.episodeid, mhs.memberhealthstateskey
900  		    INTO lv_statecomponentid, ln_episodeid,ln_memberhealthstateskey
901  		    FROM csid.memberhealthstate mhs
902  		   WHERE mhs.memberhealthstateskey = p_healthstatetrackingid_in
903  		     AND mhs.memberid = ln_personmemberid
904  		     AND mhs.statetypecd = lv_statetypecd
905  		     AND mhs.voidflg = 'IN'
906  				     AND mhs.mastersupplierid = ln_personmastersupplierid;
907  
908  				     EXCEPTION
909  					WHEN NO_DATA_FOUND THEN
910  
911  				      SELECT mhs.statecomponentid, mhs.episodeid, mhs.memberhealthstateskey
912  					INTO lv_statecomponentid, ln_episodeid, ln_memberhealthstateskey
913  					FROM csid.memberhealthstate mhs
914  				       WHERE mhs.memberhealthstateskey = p_healthstatetrackingid_in
915  					     AND mhs.memberid = lv_memberid
916  					     AND mhs.statetypecd = lv_statetypecd
917  					     AND mhs.voidflg = 'IN'
918  					     AND mhs.mastersupplierid = ln_mastersupplierid;
919  		  END;
920  
921  
922  	      ELSIF p_healthstatetype_in = 'ME'
923  	      THEN
924  		 lv_statetypecd := 'ME';
925  		 lv_fdbxreftypcd := 'COM';
926  		 BEGIN
927  		  SELECT mhs.statecomponentid, mhs.episodeid, mhs.memberhealthstateskey
928  		    INTO lv_statecomponentid, ln_episodeid, ln_memberhealthstateskey
929  		    FROM csid.memberhealthstate mhs, csid.memberhealthstatecomm mhsc, csid.memberhealthstatecommdtl mhscd
930  		   WHERE mhs.memberid = ln_personmemberid
931  		     AND mhs.statetypecd = lv_statetypecd
932  		     AND mhs.voidflg = 'IN'
933  		     AND mhsc.memberhealthstateskey = mhs.memberhealthstateskey
934  		     AND mhsc.voidflg = 'IN'
935  		     AND mhscd.memberhealthstatecommskey = mhsc.memberhealthstatecommskey
936  		     AND mhscd.memberhealthstatecommdtlskey = p_healthstatetrackingid_in
937  		     AND mhscd.voidflg = 'IN'
938  				     AND mhs.mastersupplierid = ln_personmastersupplierid
939  				     AND mhs.mastersupplierid = mhsc.mastersupplierid
940  				     AND mhsc.mastersupplierid = mhscd.mastersupplierid;
941  		 EXCEPTION
942  				WHEN NO_DATA_FOUND THEN
943  			       SELECT mhs.statecomponentid, mhs.episodeid,  mhs.memberhealthstateskey
944  		    INTO lv_statecomponentid, ln_episodeid,ln_memberhealthstateskey
945  		    FROM csid.memberhealthstate mhs, csid.memberhealthstatecomm mhsc, csid.memberhealthstatecommdtl mhscd
946  		   WHERE mhs.memberid = lv_memberid
947  		     AND mhs.statetypecd = lv_statetypecd
948  		     AND mhs.voidflg = 'IN'
949  		     AND mhsc.memberhealthstateskey = mhs.memberhealthstateskey
950  		     AND mhsc.voidflg = 'IN'
951  		     AND mhscd.memberhealthstatecommskey = mhsc.memberhealthstatecommskey
952  		     AND mhscd.memberhealthstatecommdtlskey = p_healthstatetrackingid_in
953  		     AND mhscd.voidflg = 'IN'
954  				     AND mhs.mastersupplierid = ln_mastersupplierid
955  				     AND mhs.mastersupplierid = mhsc.mastersupplierid
956  				     AND mhsc.mastersupplierid = mhscd.mastersupplierid;
957  
958  		 END;
959  	     END IF;
960  	   EXCEPTION
961  	      WHEN NO_DATA_FOUND
962  	      THEN
963  		 lv_return_code := ods_debugpkg.ferrorcodesforhie ('ALL', 'NOT SUCCESSFUL');
964  		 GOTO finish;
965  	      WHEN OTHERS
966  	      THEN
967  		 lv_return_code := ods_debugpkg.ferrorcodesforhie ('ALL', 'NOT SUCCESSFUL');
968  		 GOTO finish;
969  	   END;
970  
971  	   ods_core.gt_chk2 := SYSTIMESTAMP;
972  
973  	   -- Delete the old data from Feedback Table
974  	   DELETE FROM csid.memberhealthstatefeedback mhsf
975  	     WHERE EXISTS
976  		      ( SELECT 1
977  			  FROM csid.memberhealthstatefeedbackxref mhsfxref
978  			 WHERE mhsfxref.memberhealthstatefeedbackskey = mhsf.memberhealthstatefeedbackskey
979  			   AND mhsfxref.clinicaloutputtypecd = lv_fdbxreftypcd
980  			   AND mhsfxref.clinicaloutputtrackingid = p_healthstatetrackingid_in);
981  
982  	   ods_core.gt_chk3 := SYSTIMESTAMP;
983  
984  	   --- Insert into Feedback
985  	   SELECT csid.memberhealthstatefeedback_seq.NEXTVAL INTO lv_feedbackseq FROM DUAL;
986  
987  	   INSERT INTO csid.memberhealthstatefeedback (memberhealthstatefeedbackskey,
988  						       feedbackstatusreasoncd,
989  						       feedbackstatuscd,
990  						       feedbackdt,
991  						       feedbackdatasourcenm,
992  						       commmethodmnemonic,
993  						       comments,
994  						       insertedby,
995  						       inserteddt,
996  						       updatedby,
997  						       updateddt,
998  						       memberid,
999  						       statetypecd,
1000  							statecomponentid,
1001  							feedbackprovidedbytypecd,
1002  							feedbackprovidedbyid,
1003  							feedbackonbehalfoftypecd,
1004  							feedbackonbehalfofid,
1005  							EPISODEID
1006  							)
1007  	     VALUES (lv_feedbackseq,
1008  		     p_fdbstatusreason_in,
1009  		     p_fdbstatusid_in,
1010  		     p_fdbdate_in,
1011  		     p_systemsource_in,
1012  		     'PHRACC',
1013  		     p_fdbcomments_in,
1014  		     USER,
1015  		     SYSTIMESTAMP,
1016  		     USER,
1017  		     SYSTIMESTAMP,
1018  		     lv_memberid,
1019  		     lv_statetypecd,
1020  		     lv_statecomponentid,
1021  		     p_byprovidertype_in,
1022  		     lv_byid,
1023  		     p_forprovidertype_in,
1024  		     lv_forid,
1025  		     ln_episodeid
1026  		     );
1027  
1028  	    ods_core.gt_chk4 := SYSTIMESTAMP;
1029  
1030  	    --- Insert into Feedback History
1031  	    INSERT INTO csid.memberhealthstatefeedbackhist (memberhealthstatefdbkhistskey,
1032  							    memberhealthstatefeedbackskey,
1033  							    feedbackstatusreasoncd,
1034  							    feedbackstatuscd,
1035  							    feedbackdt,
1036  							    feedbackdatasourcenm,
1037  							    commmethodmnemonic,
1038  							    comments,
1039  							    insertedby,
1040  							    inserteddt,
1041  							    updatedby,
1042  							    updateddt,
1043  							    memberid,
1044  							    statetypecd,
1045  							    statecomponentid,
1046  							    feedbackprovidedbytypecd,
1047  							    feedbackprovidedbyid,
1048  							    feedbackonbehalfoftypecd,
1049  							    feedbackonbehalfofid,
1050  							    EPISODEID
1051  							    )
1052  	     VALUES (csid.memberhealthstatefdbkhist_seq.NEXTVAL,
1053  		     lv_feedbackseq,
1054  		     p_fdbstatusreason_in,
1055  		     p_fdbstatusid_in,
1056  		     p_fdbdate_in,
1057  		     p_systemsource_in,
1058  		     'PHRACC',
1059  		     p_fdbcomments_in,
1060  		     USER,
1061  		     SYSTIMESTAMP,
1062  		     USER,
1063  		     SYSTIMESTAMP,
1064  		     lv_memberid,
1065  		     lv_statetypecd,
1066  		     lv_statecomponentid,
1067  		     p_byprovidertype_in,
1068  		     lv_byid,
1069  		     p_forprovidertype_in,
1070  		     lv_forid,
1071  		     ln_episodeid
1072  		     );
1073  
1074  	    ods_core.gt_chk5 := SYSTIMESTAMP;
1075  
1076  	    --- Insert into Feedback Xref
1077  	    INSERT INTO csid.memberhealthstatefeedbackxref (memberhealthstatefeedbackskey,
1078  							    clinicaloutputtypecd,
1079  							    clinicaloutputtrackingid,
1080  							    insertedby,
1081  							    inserteddt,
1082  							    updatedby,
1083  							    updateddt,
1084  														memberhealthstateskey)
1085  	     VALUES (lv_feedbackseq,
1086  		     lv_fdbxreftypcd,
1087  		     p_healthstatetrackingid_in,
1088  		     USER,
1089  		     SYSDATE,
1090  		     USER,
1091  		     SYSDATE,
1092  				 ln_memberhealthstateskey);
1093  
1094  	    ods_core.gt_chk6 := SYSTIMESTAMP;
1095  
1096  	    -- Set the Feedback bit for sucessfull operation (Success code = 10000)
1097  	    IF lv_return_code = 10000
1098  	    THEN
1099  	       updatecememberprocessstatus (pnmemberid_in => lv_memberid, pvbits_in => '000100000', -- BIT for the FDBK
1100  												    pvceflag_in => 'N');
1101  	    END IF;
1102  
1103  	   <<finish>>
1104  	    p_healthstatetrackingid_out := p_healthstatetrackingid_in;
1105  	    p_memberplanid_out := p_memberplanid_in;
1106  	    p_returncode_out := lv_return_code;
1107  	    ods_core.gt_end := SYSTIMESTAMP;
1108  
1109  	    -- Trace Long Call execution
1110  	    IF (ods_core.gt_end - ods_core.gt_start) > ods_core.fgetdebugexecutiontime ('SETHEALTHSTATEFDBACK')
1111  	    THEN
1112  	       ods_core.loglongcall (pv_procedurenm_in	    => 'SETHEALTHSTATEFDBACK',
1113  				     pn_procreturncode_in   => lv_return_code,
1114  				     pt_start_in	    => ods_core.gt_start,
1115  				     pt_chk1_in 	    => ods_core.gt_chk1,
1116  				     pt_chk2_in 	    => ods_core.gt_chk2,
1117  				     pt_chk3_in 	    => ods_core.gt_chk3,
1118  				     pt_chk4_in 	    => ods_core.gt_chk4,
1119  				     pt_chk5_in 	    => ods_core.gt_chk5,
1120  				     pt_chk6_in 	    => ods_core.gt_chk6,
1121  				     pt_end_in		    => ods_core.gt_end);
1122  	    END IF;
1123  	 EXCEPTION
1124  	    WHEN OTHERS
1125  	    THEN
1126  	       p_returncode_out := ods_debugpkg.ferrorcodesforhie ('ALL', 'ILLEGAL OPERATION');
1127  	       ods.log_error ('SETHEALTHSTATEFDBACK',
1128  			      NULL,
1129  			      SQLCODE,
1130  			      SQLERRM,
1131  			      SYSDATE,
1132  			      NULL);
1133  	       RAISE;
1134  	 END sethealthstatefdback;
1135  
1136  	 FUNCTION fgetorgoidfromorgid (pn_issuingorgid_in IN number)
1137  	    RETURN varchar2
1138  	 AS
1139  	    vissuingoid   varchar2 (64);
1140  	 BEGIN
1141  	     SELECT orgoid
1142  	       INTO vissuingoid
1143  	       FROM org
1144  	      WHERE orgid = pn_issuingorgid_in;
1145  
1146  	    RETURN vissuingoid;
1147  	 EXCEPTION
1148  	    WHEN OTHERS
1149  	    THEN
1150  	       RETURN NULL;
1151  	 END;
1152  END ods_core;
1153  /

Warning: Package Body created with compilation errors.

SQL> 
SQL> EXIT;
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
